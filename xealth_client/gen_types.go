// Package xealth_client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.3.0 DO NOT EDIT.
package xealth_client

import (
	"encoding/json"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for BloodPressureRequestExtensionDeviceInfoDisplayUrl.
const (
	Display BloodPressureRequestExtensionDeviceInfoDisplayUrl = "display"
)

// Defines values for BloodPressureRequestExtensionDeviceInfoIdentifierUrl.
const (
	Identifier BloodPressureRequestExtensionDeviceInfoIdentifierUrl = "identifier"
)

// Defines values for BloodPressureRequestExtensionDeviceInfoManufacturerUrl.
const (
	Manufacturer BloodPressureRequestExtensionDeviceInfoManufacturerUrl = "manufacturer"
)

// Defines values for BloodPressureRequestExtensionDeviceInfoModelUrl.
const (
	Model BloodPressureRequestExtensionDeviceInfoModelUrl = "model"
)

// Defines values for CardActionsAction.
const (
	CardActionsActionOpenUrl   CardActionsAction = "open_url"
	CardActionsActionOpenVideo CardActionsAction = "open_video"
	CardActionsActionPost      CardActionsAction = "post"
)

// Defines values for CardActionsActionType.
const (
	CardActionsActionTypeAppStore   CardActionsActionType = "appStore"
	CardActionsActionTypeButton     CardActionsActionType = "button"
	CardActionsActionTypeCard       CardActionsActionType = "card"
	CardActionsActionTypeGooglePlay CardActionsActionType = "googlePlay"
	CardActionsActionTypeHyperlink  CardActionsActionType = "hyperlink"
)

// Defines values for CardItemCardActionsAction.
const (
	CardItemCardActionsActionOpenUrl   CardItemCardActionsAction = "open_url"
	CardItemCardActionsActionOpenVideo CardItemCardActionsAction = "open_video"
	CardItemCardActionsActionPost      CardItemCardActionsAction = "post"
)

// Defines values for CardItemCardActionsActionType.
const (
	CardItemCardActionsActionTypeAppStore   CardItemCardActionsActionType = "appStore"
	CardItemCardActionsActionTypeButton     CardItemCardActionsActionType = "button"
	CardItemCardActionsActionTypeCard       CardItemCardActionsActionType = "card"
	CardItemCardActionsActionTypeGooglePlay CardItemCardActionsActionType = "googlePlay"
	CardItemCardActionsActionTypeHyperlink  CardItemCardActionsActionType = "hyperlink"
)

// Defines values for CardItemCardMetaCardType.
const (
	CardItemCardMetaCardTypeDocument CardItemCardMetaCardType = "document"
	CardItemCardMetaCardTypeProgram  CardItemCardMetaCardType = "program"
	CardItemCardMetaCardTypeVideo    CardItemCardMetaCardType = "video"
)

// Defines values for CardItemOrderInfoOrderSource.
const (
	CardItemOrderInfoOrderSourceAppointment          CardItemOrderInfoOrderSource = "appointment"
	CardItemOrderInfoOrderSourceBatch                CardItemOrderInfoOrderSource = "batch"
	CardItemOrderInfoOrderSourceDigitalcare          CardItemOrderInfoOrderSource = "digitalcare"
	CardItemOrderInfoOrderSourceDischarge            CardItemOrderInfoOrderSource = "discharge"
	CardItemOrderInfoOrderSourceHl7encounter         CardItemOrderInfoOrderSource = "hl7encounter"
	CardItemOrderInfoOrderSourceOrm                  CardItemOrderInfoOrderSource = "orm"
	CardItemOrderInfoOrderSourcePartnerapi           CardItemOrderInfoOrderSource = "partnerapi"
	CardItemOrderInfoOrderSourcePedsurginet          CardItemOrderInfoOrderSource = "pedsurginet"
	CardItemOrderInfoOrderSourceScheduled            CardItemOrderInfoOrderSource = "scheduled"
	CardItemOrderInfoOrderSourceSubscriberenrollment CardItemOrderInfoOrderSource = "subscriberenrollment"
	CardItemOrderInfoOrderSourceSubscriberorder      CardItemOrderInfoOrderSource = "subscriberorder"
	CardItemOrderInfoOrderSourceSurgery              CardItemOrderInfoOrderSource = "surgery"
	CardItemOrderInfoOrderSourceSurginet             CardItemOrderInfoOrderSource = "surginet"
)

// Defines values for CardMetaCardType.
const (
	CardMetaCardTypeDocument CardMetaCardType = "document"
	CardMetaCardTypeProgram  CardMetaCardType = "program"
	CardMetaCardTypeVideo    CardMetaCardType = "video"
)

// Defines values for CreateOrderResponsePatientIdentityHistoricalIdsOrigin.
const (
	CreateOrderResponsePatientIdentityHistoricalIdsOriginCerner   CreateOrderResponsePatientIdentityHistoricalIdsOrigin = "cerner"
	CreateOrderResponsePatientIdentityHistoricalIdsOriginEpic     CreateOrderResponsePatientIdentityHistoricalIdsOrigin = "epic"
	CreateOrderResponsePatientIdentityHistoricalIdsOriginInitiate CreateOrderResponsePatientIdentityHistoricalIdsOrigin = "initiate"
	CreateOrderResponsePatientIdentityHistoricalIdsOriginXealth   CreateOrderResponsePatientIdentityHistoricalIdsOrigin = "xealth"
)

// Defines values for CreateOrderResponsePatientIdentityIdsOrigin.
const (
	CreateOrderResponsePatientIdentityIdsOriginCerner   CreateOrderResponsePatientIdentityIdsOrigin = "cerner"
	CreateOrderResponsePatientIdentityIdsOriginEpic     CreateOrderResponsePatientIdentityIdsOrigin = "epic"
	CreateOrderResponsePatientIdentityIdsOriginInitiate CreateOrderResponsePatientIdentityIdsOrigin = "initiate"
	CreateOrderResponsePatientIdentityIdsOriginXealth   CreateOrderResponsePatientIdentityIdsOrigin = "xealth"
)

// Defines values for DataSetsDemographicsV1Gender.
const (
	DataSetsDemographicsV1GenderFemale  DataSetsDemographicsV1Gender = "female"
	DataSetsDemographicsV1GenderMale    DataSetsDemographicsV1Gender = "male"
	DataSetsDemographicsV1GenderOther   DataSetsDemographicsV1Gender = "other"
	DataSetsDemographicsV1GenderUnknown DataSetsDemographicsV1Gender = "unknown"
)

// Defines values for DataSetsDemographicsV1NameUse.
const (
	DataSetsDemographicsV1NameUseAnonymous DataSetsDemographicsV1NameUse = "anonymous"
	DataSetsDemographicsV1NameUseMaiden    DataSetsDemographicsV1NameUse = "maiden"
	DataSetsDemographicsV1NameUseNickname  DataSetsDemographicsV1NameUse = "nickname"
	DataSetsDemographicsV1NameUseOfficial  DataSetsDemographicsV1NameUse = "official"
	DataSetsDemographicsV1NameUseOld       DataSetsDemographicsV1NameUse = "old"
	DataSetsDemographicsV1NameUseTemp      DataSetsDemographicsV1NameUse = "temp"
	DataSetsDemographicsV1NameUseUsual     DataSetsDemographicsV1NameUse = "usual"
)

// Defines values for DataSetsDemographicsV1NameListUse.
const (
	DataSetsDemographicsV1NameListUseAnonymous DataSetsDemographicsV1NameListUse = "anonymous"
	DataSetsDemographicsV1NameListUseMaiden    DataSetsDemographicsV1NameListUse = "maiden"
	DataSetsDemographicsV1NameListUseNickname  DataSetsDemographicsV1NameListUse = "nickname"
	DataSetsDemographicsV1NameListUseOfficial  DataSetsDemographicsV1NameListUse = "official"
	DataSetsDemographicsV1NameListUseOld       DataSetsDemographicsV1NameListUse = "old"
	DataSetsDemographicsV1NameListUseTemp      DataSetsDemographicsV1NameListUse = "temp"
	DataSetsDemographicsV1NameListUseUsual     DataSetsDemographicsV1NameListUse = "usual"
)

// Defines values for DataSetsDemographicsV1TelecomSystem.
const (
	DataSetsDemographicsV1TelecomSystemEmail DataSetsDemographicsV1TelecomSystem = "email"
	DataSetsDemographicsV1TelecomSystemFax   DataSetsDemographicsV1TelecomSystem = "fax"
	DataSetsDemographicsV1TelecomSystemOther DataSetsDemographicsV1TelecomSystem = "other"
	DataSetsDemographicsV1TelecomSystemPager DataSetsDemographicsV1TelecomSystem = "pager"
	DataSetsDemographicsV1TelecomSystemPhone DataSetsDemographicsV1TelecomSystem = "phone"
	DataSetsDemographicsV1TelecomSystemSms   DataSetsDemographicsV1TelecomSystem = "sms"
	DataSetsDemographicsV1TelecomSystemUrl   DataSetsDemographicsV1TelecomSystem = "url"
)

// Defines values for DataSetsDemographicsV1TelecomUse.
const (
	DataSetsDemographicsV1TelecomUseHome   DataSetsDemographicsV1TelecomUse = "home"
	DataSetsDemographicsV1TelecomUseMobile DataSetsDemographicsV1TelecomUse = "mobile"
	DataSetsDemographicsV1TelecomUseOld    DataSetsDemographicsV1TelecomUse = "old"
	DataSetsDemographicsV1TelecomUseTemp   DataSetsDemographicsV1TelecomUse = "temp"
	DataSetsDemographicsV1TelecomUseWork   DataSetsDemographicsV1TelecomUse = "work"
)

// Defines values for DataSetsEncounterV1AttendingProviderNameUse.
const (
	DataSetsEncounterV1AttendingProviderNameUseAnonymous DataSetsEncounterV1AttendingProviderNameUse = "anonymous"
	DataSetsEncounterV1AttendingProviderNameUseMaiden    DataSetsEncounterV1AttendingProviderNameUse = "maiden"
	DataSetsEncounterV1AttendingProviderNameUseNickname  DataSetsEncounterV1AttendingProviderNameUse = "nickname"
	DataSetsEncounterV1AttendingProviderNameUseOfficial  DataSetsEncounterV1AttendingProviderNameUse = "official"
	DataSetsEncounterV1AttendingProviderNameUseOld       DataSetsEncounterV1AttendingProviderNameUse = "old"
	DataSetsEncounterV1AttendingProviderNameUseTemp      DataSetsEncounterV1AttendingProviderNameUse = "temp"
	DataSetsEncounterV1AttendingProviderNameUseUsual     DataSetsEncounterV1AttendingProviderNameUse = "usual"
)

// Defines values for DataSetsEncounterV1EncounterPointOfCareTelecomSystem.
const (
	DataSetsEncounterV1EncounterPointOfCareTelecomSystemEmail DataSetsEncounterV1EncounterPointOfCareTelecomSystem = "email"
	DataSetsEncounterV1EncounterPointOfCareTelecomSystemFax   DataSetsEncounterV1EncounterPointOfCareTelecomSystem = "fax"
	DataSetsEncounterV1EncounterPointOfCareTelecomSystemOther DataSetsEncounterV1EncounterPointOfCareTelecomSystem = "other"
	DataSetsEncounterV1EncounterPointOfCareTelecomSystemPager DataSetsEncounterV1EncounterPointOfCareTelecomSystem = "pager"
	DataSetsEncounterV1EncounterPointOfCareTelecomSystemPhone DataSetsEncounterV1EncounterPointOfCareTelecomSystem = "phone"
	DataSetsEncounterV1EncounterPointOfCareTelecomSystemSms   DataSetsEncounterV1EncounterPointOfCareTelecomSystem = "sms"
	DataSetsEncounterV1EncounterPointOfCareTelecomSystemUrl   DataSetsEncounterV1EncounterPointOfCareTelecomSystem = "url"
)

// Defines values for DataSetsEncounterV1EncounterPointOfCareTelecomUse.
const (
	DataSetsEncounterV1EncounterPointOfCareTelecomUseHome   DataSetsEncounterV1EncounterPointOfCareTelecomUse = "home"
	DataSetsEncounterV1EncounterPointOfCareTelecomUseMobile DataSetsEncounterV1EncounterPointOfCareTelecomUse = "mobile"
	DataSetsEncounterV1EncounterPointOfCareTelecomUseOld    DataSetsEncounterV1EncounterPointOfCareTelecomUse = "old"
	DataSetsEncounterV1EncounterPointOfCareTelecomUseTemp   DataSetsEncounterV1EncounterPointOfCareTelecomUse = "temp"
	DataSetsEncounterV1EncounterPointOfCareTelecomUseWork   DataSetsEncounterV1EncounterPointOfCareTelecomUse = "work"
)

// Defines values for DataSetsMaternityPregnancyEpicV1ChildrenNameUse.
const (
	DataSetsMaternityPregnancyEpicV1ChildrenNameUseAnonymous DataSetsMaternityPregnancyEpicV1ChildrenNameUse = "anonymous"
	DataSetsMaternityPregnancyEpicV1ChildrenNameUseMaiden    DataSetsMaternityPregnancyEpicV1ChildrenNameUse = "maiden"
	DataSetsMaternityPregnancyEpicV1ChildrenNameUseNickname  DataSetsMaternityPregnancyEpicV1ChildrenNameUse = "nickname"
	DataSetsMaternityPregnancyEpicV1ChildrenNameUseOfficial  DataSetsMaternityPregnancyEpicV1ChildrenNameUse = "official"
	DataSetsMaternityPregnancyEpicV1ChildrenNameUseOld       DataSetsMaternityPregnancyEpicV1ChildrenNameUse = "old"
	DataSetsMaternityPregnancyEpicV1ChildrenNameUseTemp      DataSetsMaternityPregnancyEpicV1ChildrenNameUse = "temp"
	DataSetsMaternityPregnancyEpicV1ChildrenNameUseUsual     DataSetsMaternityPregnancyEpicV1ChildrenNameUse = "usual"
)

// Defines values for DataSetsMaternityPregnancyEpicV1ChildrenType.
const (
	DataSetsMaternityPregnancyEpicV1ChildrenTypeBirth DataSetsMaternityPregnancyEpicV1ChildrenType = "birth"
	DataSetsMaternityPregnancyEpicV1ChildrenTypeProxy DataSetsMaternityPregnancyEpicV1ChildrenType = "proxy"
)

// Defines values for DataSetsMaternityPregnancyEpicV1Pregnant.
const (
	DataSetsMaternityPregnancyEpicV1PregnantNo      DataSetsMaternityPregnancyEpicV1Pregnant = "no"
	DataSetsMaternityPregnancyEpicV1PregnantUnknown DataSetsMaternityPregnancyEpicV1Pregnant = "unknown"
	DataSetsMaternityPregnancyEpicV1PregnantYes     DataSetsMaternityPregnancyEpicV1Pregnant = "yes"
)

// Defines values for EventNotificationEventContext.
const (
	EventNotificationEventContextCancel EventNotificationEventContext = "cancel"
	EventNotificationEventContextDelete EventNotificationEventContext = "delete"
	EventNotificationEventContextNew    EventNotificationEventContext = "new"
	EventNotificationEventContextUpdate EventNotificationEventContext = "update"
)

// Defines values for EventNotificationEventType.
const (
	EventNotificationEventTypeOrder       EventNotificationEventType = "order"
	EventNotificationEventTypePatient     EventNotificationEventType = "patient"
	EventNotificationEventTypePatientCard EventNotificationEventType = "patient_card"
)

// Defines values for EventNotificationPatientIdentityHistoricalIdsOrigin.
const (
	EventNotificationPatientIdentityHistoricalIdsOriginCerner   EventNotificationPatientIdentityHistoricalIdsOrigin = "cerner"
	EventNotificationPatientIdentityHistoricalIdsOriginEpic     EventNotificationPatientIdentityHistoricalIdsOrigin = "epic"
	EventNotificationPatientIdentityHistoricalIdsOriginInitiate EventNotificationPatientIdentityHistoricalIdsOrigin = "initiate"
	EventNotificationPatientIdentityHistoricalIdsOriginXealth   EventNotificationPatientIdentityHistoricalIdsOrigin = "xealth"
)

// Defines values for EventNotificationPatientIdentityIdsOrigin.
const (
	EventNotificationPatientIdentityIdsOriginCerner   EventNotificationPatientIdentityIdsOrigin = "cerner"
	EventNotificationPatientIdentityIdsOriginEpic     EventNotificationPatientIdentityIdsOrigin = "epic"
	EventNotificationPatientIdentityIdsOriginInitiate EventNotificationPatientIdentityIdsOrigin = "initiate"
	EventNotificationPatientIdentityIdsOriginXealth   EventNotificationPatientIdentityIdsOrigin = "xealth"
)

// Defines values for EventNotificationRequestEventType.
const (
	EventNotificationRequestEventTypeOrder       EventNotificationRequestEventType = "order"
	EventNotificationRequestEventTypePatient     EventNotificationRequestEventType = "patient"
	EventNotificationRequestEventTypePatientCard EventNotificationRequestEventType = "patient_card"
)

// Defines values for EventNotificationRequestStatus.
const (
	Failed EventNotificationRequestStatus = "failed"
	Sent   EventNotificationRequestStatus = "sent"
)

// Defines values for EventNotificationResponseEventNotificationsEventContext.
const (
	EventNotificationResponseEventNotificationsEventContextCancel EventNotificationResponseEventNotificationsEventContext = "cancel"
	EventNotificationResponseEventNotificationsEventContextDelete EventNotificationResponseEventNotificationsEventContext = "delete"
	EventNotificationResponseEventNotificationsEventContextNew    EventNotificationResponseEventNotificationsEventContext = "new"
	EventNotificationResponseEventNotificationsEventContextUpdate EventNotificationResponseEventNotificationsEventContext = "update"
)

// Defines values for EventNotificationResponseEventNotificationsEventType.
const (
	EventNotificationResponseEventNotificationsEventTypeOrder       EventNotificationResponseEventNotificationsEventType = "order"
	EventNotificationResponseEventNotificationsEventTypePatient     EventNotificationResponseEventNotificationsEventType = "patient"
	EventNotificationResponseEventNotificationsEventTypePatientCard EventNotificationResponseEventNotificationsEventType = "patient_card"
)

// Defines values for EventNotificationResponseEventNotificationsPatientIdentityHistoricalIdsOrigin.
const (
	EventNotificationResponseEventNotificationsPatientIdentityHistoricalIdsOriginCerner   EventNotificationResponseEventNotificationsPatientIdentityHistoricalIdsOrigin = "cerner"
	EventNotificationResponseEventNotificationsPatientIdentityHistoricalIdsOriginEpic     EventNotificationResponseEventNotificationsPatientIdentityHistoricalIdsOrigin = "epic"
	EventNotificationResponseEventNotificationsPatientIdentityHistoricalIdsOriginInitiate EventNotificationResponseEventNotificationsPatientIdentityHistoricalIdsOrigin = "initiate"
	EventNotificationResponseEventNotificationsPatientIdentityHistoricalIdsOriginXealth   EventNotificationResponseEventNotificationsPatientIdentityHistoricalIdsOrigin = "xealth"
)

// Defines values for EventNotificationResponseEventNotificationsPatientIdentityIdsOrigin.
const (
	EventNotificationResponseEventNotificationsPatientIdentityIdsOriginCerner   EventNotificationResponseEventNotificationsPatientIdentityIdsOrigin = "cerner"
	EventNotificationResponseEventNotificationsPatientIdentityIdsOriginEpic     EventNotificationResponseEventNotificationsPatientIdentityIdsOrigin = "epic"
	EventNotificationResponseEventNotificationsPatientIdentityIdsOriginInitiate EventNotificationResponseEventNotificationsPatientIdentityIdsOrigin = "initiate"
	EventNotificationResponseEventNotificationsPatientIdentityIdsOriginXealth   EventNotificationResponseEventNotificationsPatientIdentityIdsOrigin = "xealth"
)

// Defines values for EventType.
const (
	EventTypeOrder       EventType = "order"
	EventTypePatient     EventType = "patient"
	EventTypePatientCard EventType = "patient_card"
)

// Defines values for GeneralDatasetsDemographicsV1Gender.
const (
	GeneralDatasetsDemographicsV1GenderFemale  GeneralDatasetsDemographicsV1Gender = "female"
	GeneralDatasetsDemographicsV1GenderMale    GeneralDatasetsDemographicsV1Gender = "male"
	GeneralDatasetsDemographicsV1GenderOther   GeneralDatasetsDemographicsV1Gender = "other"
	GeneralDatasetsDemographicsV1GenderUnknown GeneralDatasetsDemographicsV1Gender = "unknown"
)

// Defines values for GeneralDatasetsDemographicsV1NameUse.
const (
	GeneralDatasetsDemographicsV1NameUseAnonymous GeneralDatasetsDemographicsV1NameUse = "anonymous"
	GeneralDatasetsDemographicsV1NameUseMaiden    GeneralDatasetsDemographicsV1NameUse = "maiden"
	GeneralDatasetsDemographicsV1NameUseNickname  GeneralDatasetsDemographicsV1NameUse = "nickname"
	GeneralDatasetsDemographicsV1NameUseOfficial  GeneralDatasetsDemographicsV1NameUse = "official"
	GeneralDatasetsDemographicsV1NameUseOld       GeneralDatasetsDemographicsV1NameUse = "old"
	GeneralDatasetsDemographicsV1NameUseTemp      GeneralDatasetsDemographicsV1NameUse = "temp"
	GeneralDatasetsDemographicsV1NameUseUsual     GeneralDatasetsDemographicsV1NameUse = "usual"
)

// Defines values for GeneralDatasetsDemographicsV1NameListUse.
const (
	GeneralDatasetsDemographicsV1NameListUseAnonymous GeneralDatasetsDemographicsV1NameListUse = "anonymous"
	GeneralDatasetsDemographicsV1NameListUseMaiden    GeneralDatasetsDemographicsV1NameListUse = "maiden"
	GeneralDatasetsDemographicsV1NameListUseNickname  GeneralDatasetsDemographicsV1NameListUse = "nickname"
	GeneralDatasetsDemographicsV1NameListUseOfficial  GeneralDatasetsDemographicsV1NameListUse = "official"
	GeneralDatasetsDemographicsV1NameListUseOld       GeneralDatasetsDemographicsV1NameListUse = "old"
	GeneralDatasetsDemographicsV1NameListUseTemp      GeneralDatasetsDemographicsV1NameListUse = "temp"
	GeneralDatasetsDemographicsV1NameListUseUsual     GeneralDatasetsDemographicsV1NameListUse = "usual"
)

// Defines values for GeneralDatasetsDemographicsV1TelecomSystem.
const (
	GeneralDatasetsDemographicsV1TelecomSystemEmail GeneralDatasetsDemographicsV1TelecomSystem = "email"
	GeneralDatasetsDemographicsV1TelecomSystemFax   GeneralDatasetsDemographicsV1TelecomSystem = "fax"
	GeneralDatasetsDemographicsV1TelecomSystemOther GeneralDatasetsDemographicsV1TelecomSystem = "other"
	GeneralDatasetsDemographicsV1TelecomSystemPager GeneralDatasetsDemographicsV1TelecomSystem = "pager"
	GeneralDatasetsDemographicsV1TelecomSystemPhone GeneralDatasetsDemographicsV1TelecomSystem = "phone"
	GeneralDatasetsDemographicsV1TelecomSystemSms   GeneralDatasetsDemographicsV1TelecomSystem = "sms"
	GeneralDatasetsDemographicsV1TelecomSystemUrl   GeneralDatasetsDemographicsV1TelecomSystem = "url"
)

// Defines values for GeneralDatasetsDemographicsV1TelecomUse.
const (
	GeneralDatasetsDemographicsV1TelecomUseHome   GeneralDatasetsDemographicsV1TelecomUse = "home"
	GeneralDatasetsDemographicsV1TelecomUseMobile GeneralDatasetsDemographicsV1TelecomUse = "mobile"
	GeneralDatasetsDemographicsV1TelecomUseOld    GeneralDatasetsDemographicsV1TelecomUse = "old"
	GeneralDatasetsDemographicsV1TelecomUseTemp   GeneralDatasetsDemographicsV1TelecomUse = "temp"
	GeneralDatasetsDemographicsV1TelecomUseWork   GeneralDatasetsDemographicsV1TelecomUse = "work"
)

// Defines values for GeneralDatasetsEncounterV1AttendingProviderNameUse.
const (
	GeneralDatasetsEncounterV1AttendingProviderNameUseAnonymous GeneralDatasetsEncounterV1AttendingProviderNameUse = "anonymous"
	GeneralDatasetsEncounterV1AttendingProviderNameUseMaiden    GeneralDatasetsEncounterV1AttendingProviderNameUse = "maiden"
	GeneralDatasetsEncounterV1AttendingProviderNameUseNickname  GeneralDatasetsEncounterV1AttendingProviderNameUse = "nickname"
	GeneralDatasetsEncounterV1AttendingProviderNameUseOfficial  GeneralDatasetsEncounterV1AttendingProviderNameUse = "official"
	GeneralDatasetsEncounterV1AttendingProviderNameUseOld       GeneralDatasetsEncounterV1AttendingProviderNameUse = "old"
	GeneralDatasetsEncounterV1AttendingProviderNameUseTemp      GeneralDatasetsEncounterV1AttendingProviderNameUse = "temp"
	GeneralDatasetsEncounterV1AttendingProviderNameUseUsual     GeneralDatasetsEncounterV1AttendingProviderNameUse = "usual"
)

// Defines values for GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystem.
const (
	GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystemEmail GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "email"
	GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystemFax   GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "fax"
	GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystemOther GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "other"
	GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystemPager GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "pager"
	GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystemPhone GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "phone"
	GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystemSms   GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "sms"
	GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystemUrl   GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "url"
)

// Defines values for GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUse.
const (
	GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUseHome   GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUse = "home"
	GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUseMobile GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUse = "mobile"
	GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUseOld    GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUse = "old"
	GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUseTemp   GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUse = "temp"
	GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUseWork   GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUse = "work"
)

// Defines values for GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUse.
const (
	GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUseAnonymous GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "anonymous"
	GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUseMaiden    GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "maiden"
	GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUseNickname  GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "nickname"
	GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUseOfficial  GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "official"
	GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUseOld       GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "old"
	GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUseTemp      GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "temp"
	GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUseUsual     GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "usual"
)

// Defines values for GeneralDatasetsMaternityPregnancyEpicV1ChildrenType.
const (
	GeneralDatasetsMaternityPregnancyEpicV1ChildrenTypeBirth GeneralDatasetsMaternityPregnancyEpicV1ChildrenType = "birth"
	GeneralDatasetsMaternityPregnancyEpicV1ChildrenTypeProxy GeneralDatasetsMaternityPregnancyEpicV1ChildrenType = "proxy"
)

// Defines values for GeneralDatasetsMaternityPregnancyEpicV1Pregnant.
const (
	GeneralDatasetsMaternityPregnancyEpicV1PregnantNo      GeneralDatasetsMaternityPregnancyEpicV1Pregnant = "no"
	GeneralDatasetsMaternityPregnancyEpicV1PregnantUnknown GeneralDatasetsMaternityPregnancyEpicV1Pregnant = "unknown"
	GeneralDatasetsMaternityPregnancyEpicV1PregnantYes     GeneralDatasetsMaternityPregnancyEpicV1Pregnant = "yes"
)

// Defines values for GetProgramUrlRequestEhrView.
const (
	GetProgramUrlRequestEhrViewEncounter GetProgramUrlRequestEhrView = "encounter"
	GetProgramUrlRequestEhrViewOther     GetProgramUrlRequestEhrView = "other"
)

// Defines values for GetProgramUrlRequestEventContext.
const (
	GetProgramUrlRequestEventContextInitial GetProgramUrlRequestEventContext = "initial"
)

// Defines values for GetProgramUrlRequestEventType.
const (
	GetProgramUrl GetProgramUrlRequestEventType = "getProgramUrl"
)

// Defines values for GetProgramsRequestEhrView.
const (
	GetProgramsRequestEhrViewEncounter GetProgramsRequestEhrView = "encounter"
	GetProgramsRequestEhrViewOther     GetProgramsRequestEhrView = "other"
)

// Defines values for GetProgramsRequestEventContext.
const (
	GetProgramsRequestEventContextInitial GetProgramsRequestEventContext = "initial"
)

// Defines values for GetProgramsRequestEventType.
const (
	GetPrograms GetProgramsRequestEventType = "getPrograms"
)

// Defines values for HsCreateOrderRequestOrderType.
const (
	Order HsCreateOrderRequestOrderType = "order"
)

// Defines values for HsCreateOrderRequestPatientIdOrigin.
const (
	HsCreateOrderRequestPatientIdOriginCerner   HsCreateOrderRequestPatientIdOrigin = "cerner"
	HsCreateOrderRequestPatientIdOriginEpic     HsCreateOrderRequestPatientIdOrigin = "epic"
	HsCreateOrderRequestPatientIdOriginInitiate HsCreateOrderRequestPatientIdOrigin = "initiate"
	HsCreateOrderRequestPatientIdOriginXealth   HsCreateOrderRequestPatientIdOrigin = "xealth"
)

// Defines values for OrderInfoOrderSource.
const (
	OrderInfoOrderSourceAppointment          OrderInfoOrderSource = "appointment"
	OrderInfoOrderSourceBatch                OrderInfoOrderSource = "batch"
	OrderInfoOrderSourceDigitalcare          OrderInfoOrderSource = "digitalcare"
	OrderInfoOrderSourceDischarge            OrderInfoOrderSource = "discharge"
	OrderInfoOrderSourceHl7encounter         OrderInfoOrderSource = "hl7encounter"
	OrderInfoOrderSourceOrm                  OrderInfoOrderSource = "orm"
	OrderInfoOrderSourcePartnerapi           OrderInfoOrderSource = "partnerapi"
	OrderInfoOrderSourcePedsurginet          OrderInfoOrderSource = "pedsurginet"
	OrderInfoOrderSourceScheduled            OrderInfoOrderSource = "scheduled"
	OrderInfoOrderSourceSubscriberenrollment OrderInfoOrderSource = "subscriberenrollment"
	OrderInfoOrderSourceSubscriberorder      OrderInfoOrderSource = "subscriberorder"
	OrderInfoOrderSourceSurgery              OrderInfoOrderSource = "surgery"
	OrderInfoOrderSourceSurginet             OrderInfoOrderSource = "surginet"
)

// Defines values for PartnerCreateOrderRequestOrderType.
const (
	PartnerCreateOrderRequestOrderTypeEnrollment PartnerCreateOrderRequestOrderType = "enrollment"
)

// Defines values for PartnerCreateOrderRequestPatientIdOrigin.
const (
	PartnerCreateOrderRequestPatientIdOriginCerner   PartnerCreateOrderRequestPatientIdOrigin = "cerner"
	PartnerCreateOrderRequestPatientIdOriginEpic     PartnerCreateOrderRequestPatientIdOrigin = "epic"
	PartnerCreateOrderRequestPatientIdOriginInitiate PartnerCreateOrderRequestPatientIdOrigin = "initiate"
	PartnerCreateOrderRequestPatientIdOriginXealth   PartnerCreateOrderRequestPatientIdOrigin = "xealth"
)

// Defines values for PatientCardActionResponseCardCardActionsAction.
const (
	PatientCardActionResponseCardCardActionsActionOpenUrl   PatientCardActionResponseCardCardActionsAction = "open_url"
	PatientCardActionResponseCardCardActionsActionOpenVideo PatientCardActionResponseCardCardActionsAction = "open_video"
	PatientCardActionResponseCardCardActionsActionPost      PatientCardActionResponseCardCardActionsAction = "post"
)

// Defines values for PatientCardActionResponseCardCardActionsActionType.
const (
	PatientCardActionResponseCardCardActionsActionTypeAppStore   PatientCardActionResponseCardCardActionsActionType = "appStore"
	PatientCardActionResponseCardCardActionsActionTypeButton     PatientCardActionResponseCardCardActionsActionType = "button"
	PatientCardActionResponseCardCardActionsActionTypeCard       PatientCardActionResponseCardCardActionsActionType = "card"
	PatientCardActionResponseCardCardActionsActionTypeGooglePlay PatientCardActionResponseCardCardActionsActionType = "googlePlay"
	PatientCardActionResponseCardCardActionsActionTypeHyperlink  PatientCardActionResponseCardCardActionsActionType = "hyperlink"
)

// Defines values for PatientCardActionResponseCardCardMetaCardType.
const (
	PatientCardActionResponseCardCardMetaCardTypeDocument PatientCardActionResponseCardCardMetaCardType = "document"
	PatientCardActionResponseCardCardMetaCardTypeProgram  PatientCardActionResponseCardCardMetaCardType = "program"
	PatientCardActionResponseCardCardMetaCardTypeVideo    PatientCardActionResponseCardCardMetaCardType = "video"
)

// Defines values for PatientCardActionResponseCardOrderInfoOrderSource.
const (
	PatientCardActionResponseCardOrderInfoOrderSourceAppointment          PatientCardActionResponseCardOrderInfoOrderSource = "appointment"
	PatientCardActionResponseCardOrderInfoOrderSourceBatch                PatientCardActionResponseCardOrderInfoOrderSource = "batch"
	PatientCardActionResponseCardOrderInfoOrderSourceDigitalcare          PatientCardActionResponseCardOrderInfoOrderSource = "digitalcare"
	PatientCardActionResponseCardOrderInfoOrderSourceDischarge            PatientCardActionResponseCardOrderInfoOrderSource = "discharge"
	PatientCardActionResponseCardOrderInfoOrderSourceHl7encounter         PatientCardActionResponseCardOrderInfoOrderSource = "hl7encounter"
	PatientCardActionResponseCardOrderInfoOrderSourceOrm                  PatientCardActionResponseCardOrderInfoOrderSource = "orm"
	PatientCardActionResponseCardOrderInfoOrderSourcePartnerapi           PatientCardActionResponseCardOrderInfoOrderSource = "partnerapi"
	PatientCardActionResponseCardOrderInfoOrderSourcePedsurginet          PatientCardActionResponseCardOrderInfoOrderSource = "pedsurginet"
	PatientCardActionResponseCardOrderInfoOrderSourceScheduled            PatientCardActionResponseCardOrderInfoOrderSource = "scheduled"
	PatientCardActionResponseCardOrderInfoOrderSourceSubscriberenrollment PatientCardActionResponseCardOrderInfoOrderSource = "subscriberenrollment"
	PatientCardActionResponseCardOrderInfoOrderSourceSubscriberorder      PatientCardActionResponseCardOrderInfoOrderSource = "subscriberorder"
	PatientCardActionResponseCardOrderInfoOrderSourceSurgery              PatientCardActionResponseCardOrderInfoOrderSource = "surgery"
	PatientCardActionResponseCardOrderInfoOrderSourceSurginet             PatientCardActionResponseCardOrderInfoOrderSource = "surginet"
)

// Defines values for PatientCardActionResponsePatientIdentityHistoricalIdsOrigin.
const (
	PatientCardActionResponsePatientIdentityHistoricalIdsOriginCerner   PatientCardActionResponsePatientIdentityHistoricalIdsOrigin = "cerner"
	PatientCardActionResponsePatientIdentityHistoricalIdsOriginEpic     PatientCardActionResponsePatientIdentityHistoricalIdsOrigin = "epic"
	PatientCardActionResponsePatientIdentityHistoricalIdsOriginInitiate PatientCardActionResponsePatientIdentityHistoricalIdsOrigin = "initiate"
	PatientCardActionResponsePatientIdentityHistoricalIdsOriginXealth   PatientCardActionResponsePatientIdentityHistoricalIdsOrigin = "xealth"
)

// Defines values for PatientCardActionResponsePatientIdentityIdsOrigin.
const (
	PatientCardActionResponsePatientIdentityIdsOriginCerner   PatientCardActionResponsePatientIdentityIdsOrigin = "cerner"
	PatientCardActionResponsePatientIdentityIdsOriginEpic     PatientCardActionResponsePatientIdentityIdsOrigin = "epic"
	PatientCardActionResponsePatientIdentityIdsOriginInitiate PatientCardActionResponsePatientIdentityIdsOrigin = "initiate"
	PatientCardActionResponsePatientIdentityIdsOriginXealth   PatientCardActionResponsePatientIdentityIdsOrigin = "xealth"
)

// Defines values for PatientCardResponseCardCardActionsAction.
const (
	PatientCardResponseCardCardActionsActionOpenUrl   PatientCardResponseCardCardActionsAction = "open_url"
	PatientCardResponseCardCardActionsActionOpenVideo PatientCardResponseCardCardActionsAction = "open_video"
	PatientCardResponseCardCardActionsActionPost      PatientCardResponseCardCardActionsAction = "post"
)

// Defines values for PatientCardResponseCardCardActionsActionType.
const (
	PatientCardResponseCardCardActionsActionTypeAppStore   PatientCardResponseCardCardActionsActionType = "appStore"
	PatientCardResponseCardCardActionsActionTypeButton     PatientCardResponseCardCardActionsActionType = "button"
	PatientCardResponseCardCardActionsActionTypeCard       PatientCardResponseCardCardActionsActionType = "card"
	PatientCardResponseCardCardActionsActionTypeGooglePlay PatientCardResponseCardCardActionsActionType = "googlePlay"
	PatientCardResponseCardCardActionsActionTypeHyperlink  PatientCardResponseCardCardActionsActionType = "hyperlink"
)

// Defines values for PatientCardResponseCardCardMetaCardType.
const (
	PatientCardResponseCardCardMetaCardTypeDocument PatientCardResponseCardCardMetaCardType = "document"
	PatientCardResponseCardCardMetaCardTypeProgram  PatientCardResponseCardCardMetaCardType = "program"
	PatientCardResponseCardCardMetaCardTypeVideo    PatientCardResponseCardCardMetaCardType = "video"
)

// Defines values for PatientCardResponseCardOrderInfoOrderSource.
const (
	PatientCardResponseCardOrderInfoOrderSourceAppointment          PatientCardResponseCardOrderInfoOrderSource = "appointment"
	PatientCardResponseCardOrderInfoOrderSourceBatch                PatientCardResponseCardOrderInfoOrderSource = "batch"
	PatientCardResponseCardOrderInfoOrderSourceDigitalcare          PatientCardResponseCardOrderInfoOrderSource = "digitalcare"
	PatientCardResponseCardOrderInfoOrderSourceDischarge            PatientCardResponseCardOrderInfoOrderSource = "discharge"
	PatientCardResponseCardOrderInfoOrderSourceHl7encounter         PatientCardResponseCardOrderInfoOrderSource = "hl7encounter"
	PatientCardResponseCardOrderInfoOrderSourceOrm                  PatientCardResponseCardOrderInfoOrderSource = "orm"
	PatientCardResponseCardOrderInfoOrderSourcePartnerapi           PatientCardResponseCardOrderInfoOrderSource = "partnerapi"
	PatientCardResponseCardOrderInfoOrderSourcePedsurginet          PatientCardResponseCardOrderInfoOrderSource = "pedsurginet"
	PatientCardResponseCardOrderInfoOrderSourceScheduled            PatientCardResponseCardOrderInfoOrderSource = "scheduled"
	PatientCardResponseCardOrderInfoOrderSourceSubscriberenrollment PatientCardResponseCardOrderInfoOrderSource = "subscriberenrollment"
	PatientCardResponseCardOrderInfoOrderSourceSubscriberorder      PatientCardResponseCardOrderInfoOrderSource = "subscriberorder"
	PatientCardResponseCardOrderInfoOrderSourceSurgery              PatientCardResponseCardOrderInfoOrderSource = "surgery"
	PatientCardResponseCardOrderInfoOrderSourceSurginet             PatientCardResponseCardOrderInfoOrderSource = "surginet"
)

// Defines values for PatientCardResponsePatientIdentityHistoricalIdsOrigin.
const (
	PatientCardResponsePatientIdentityHistoricalIdsOriginCerner   PatientCardResponsePatientIdentityHistoricalIdsOrigin = "cerner"
	PatientCardResponsePatientIdentityHistoricalIdsOriginEpic     PatientCardResponsePatientIdentityHistoricalIdsOrigin = "epic"
	PatientCardResponsePatientIdentityHistoricalIdsOriginInitiate PatientCardResponsePatientIdentityHistoricalIdsOrigin = "initiate"
	PatientCardResponsePatientIdentityHistoricalIdsOriginXealth   PatientCardResponsePatientIdentityHistoricalIdsOrigin = "xealth"
)

// Defines values for PatientCardResponsePatientIdentityIdsOrigin.
const (
	PatientCardResponsePatientIdentityIdsOriginCerner   PatientCardResponsePatientIdentityIdsOrigin = "cerner"
	PatientCardResponsePatientIdentityIdsOriginEpic     PatientCardResponsePatientIdentityIdsOrigin = "epic"
	PatientCardResponsePatientIdentityIdsOriginInitiate PatientCardResponsePatientIdentityIdsOrigin = "initiate"
	PatientCardResponsePatientIdentityIdsOriginXealth   PatientCardResponsePatientIdentityIdsOrigin = "xealth"
)

// Defines values for PatientCardsRequestPatientIdOrigin.
const (
	PatientCardsRequestPatientIdOriginCerner   PatientCardsRequestPatientIdOrigin = "cerner"
	PatientCardsRequestPatientIdOriginEpic     PatientCardsRequestPatientIdOrigin = "epic"
	PatientCardsRequestPatientIdOriginInitiate PatientCardsRequestPatientIdOrigin = "initiate"
	PatientCardsRequestPatientIdOriginXealth   PatientCardsRequestPatientIdOrigin = "xealth"
)

// Defines values for PatientCardsResponseCardFeedCardActionsAction.
const (
	OpenUrl   PatientCardsResponseCardFeedCardActionsAction = "open_url"
	OpenVideo PatientCardsResponseCardFeedCardActionsAction = "open_video"
	Post      PatientCardsResponseCardFeedCardActionsAction = "post"
)

// Defines values for PatientCardsResponseCardFeedCardActionsActionType.
const (
	AppStore   PatientCardsResponseCardFeedCardActionsActionType = "appStore"
	Button     PatientCardsResponseCardFeedCardActionsActionType = "button"
	Card       PatientCardsResponseCardFeedCardActionsActionType = "card"
	GooglePlay PatientCardsResponseCardFeedCardActionsActionType = "googlePlay"
	Hyperlink  PatientCardsResponseCardFeedCardActionsActionType = "hyperlink"
)

// Defines values for PatientCardsResponseCardFeedCardMetaCardType.
const (
	PatientCardsResponseCardFeedCardMetaCardTypeDocument PatientCardsResponseCardFeedCardMetaCardType = "document"
	PatientCardsResponseCardFeedCardMetaCardTypeProgram  PatientCardsResponseCardFeedCardMetaCardType = "program"
	PatientCardsResponseCardFeedCardMetaCardTypeVideo    PatientCardsResponseCardFeedCardMetaCardType = "video"
)

// Defines values for PatientCardsResponseCardFeedOrderInfoOrderSource.
const (
	PatientCardsResponseCardFeedOrderInfoOrderSourceAppointment          PatientCardsResponseCardFeedOrderInfoOrderSource = "appointment"
	PatientCardsResponseCardFeedOrderInfoOrderSourceBatch                PatientCardsResponseCardFeedOrderInfoOrderSource = "batch"
	PatientCardsResponseCardFeedOrderInfoOrderSourceDigitalcare          PatientCardsResponseCardFeedOrderInfoOrderSource = "digitalcare"
	PatientCardsResponseCardFeedOrderInfoOrderSourceDischarge            PatientCardsResponseCardFeedOrderInfoOrderSource = "discharge"
	PatientCardsResponseCardFeedOrderInfoOrderSourceHl7encounter         PatientCardsResponseCardFeedOrderInfoOrderSource = "hl7encounter"
	PatientCardsResponseCardFeedOrderInfoOrderSourceOrm                  PatientCardsResponseCardFeedOrderInfoOrderSource = "orm"
	PatientCardsResponseCardFeedOrderInfoOrderSourcePartnerapi           PatientCardsResponseCardFeedOrderInfoOrderSource = "partnerapi"
	PatientCardsResponseCardFeedOrderInfoOrderSourcePedsurginet          PatientCardsResponseCardFeedOrderInfoOrderSource = "pedsurginet"
	PatientCardsResponseCardFeedOrderInfoOrderSourceScheduled            PatientCardsResponseCardFeedOrderInfoOrderSource = "scheduled"
	PatientCardsResponseCardFeedOrderInfoOrderSourceSubscriberenrollment PatientCardsResponseCardFeedOrderInfoOrderSource = "subscriberenrollment"
	PatientCardsResponseCardFeedOrderInfoOrderSourceSubscriberorder      PatientCardsResponseCardFeedOrderInfoOrderSource = "subscriberorder"
	PatientCardsResponseCardFeedOrderInfoOrderSourceSurgery              PatientCardsResponseCardFeedOrderInfoOrderSource = "surgery"
	PatientCardsResponseCardFeedOrderInfoOrderSourceSurginet             PatientCardsResponseCardFeedOrderInfoOrderSource = "surginet"
)

// Defines values for PatientCardsResponsePatientIdentityHistoricalIdsOrigin.
const (
	PatientCardsResponsePatientIdentityHistoricalIdsOriginCerner   PatientCardsResponsePatientIdentityHistoricalIdsOrigin = "cerner"
	PatientCardsResponsePatientIdentityHistoricalIdsOriginEpic     PatientCardsResponsePatientIdentityHistoricalIdsOrigin = "epic"
	PatientCardsResponsePatientIdentityHistoricalIdsOriginInitiate PatientCardsResponsePatientIdentityHistoricalIdsOrigin = "initiate"
	PatientCardsResponsePatientIdentityHistoricalIdsOriginXealth   PatientCardsResponsePatientIdentityHistoricalIdsOrigin = "xealth"
)

// Defines values for PatientCardsResponsePatientIdentityIdsOrigin.
const (
	PatientCardsResponsePatientIdentityIdsOriginCerner   PatientCardsResponsePatientIdentityIdsOrigin = "cerner"
	PatientCardsResponsePatientIdentityIdsOriginEpic     PatientCardsResponsePatientIdentityIdsOrigin = "epic"
	PatientCardsResponsePatientIdentityIdsOriginInitiate PatientCardsResponsePatientIdentityIdsOrigin = "initiate"
	PatientCardsResponsePatientIdentityIdsOriginXealth   PatientCardsResponsePatientIdentityIdsOrigin = "xealth"
)

// Defines values for PatientIdOrigin.
const (
	PatientIdOriginCerner   PatientIdOrigin = "cerner"
	PatientIdOriginEpic     PatientIdOrigin = "epic"
	PatientIdOriginInitiate PatientIdOrigin = "initiate"
	PatientIdOriginXealth   PatientIdOrigin = "xealth"
)

// Defines values for PatientIdentityHistoricalIdsOrigin.
const (
	PatientIdentityHistoricalIdsOriginCerner   PatientIdentityHistoricalIdsOrigin = "cerner"
	PatientIdentityHistoricalIdsOriginEpic     PatientIdentityHistoricalIdsOrigin = "epic"
	PatientIdentityHistoricalIdsOriginInitiate PatientIdentityHistoricalIdsOrigin = "initiate"
	PatientIdentityHistoricalIdsOriginXealth   PatientIdentityHistoricalIdsOrigin = "xealth"
)

// Defines values for PatientIdentityIdsOrigin.
const (
	PatientIdentityIdsOriginCerner   PatientIdentityIdsOrigin = "cerner"
	PatientIdentityIdsOriginEpic     PatientIdentityIdsOrigin = "epic"
	PatientIdentityIdsOriginInitiate PatientIdentityIdsOrigin = "initiate"
	PatientIdentityIdsOriginXealth   PatientIdentityIdsOrigin = "xealth"
)

// Defines values for PreorderFormRequest0EventContext.
const (
	Initial PreorderFormRequest0EventContext = "initial"
)

// Defines values for PreorderFormRequest0EventType.
const (
	PreorderFormRequest0EventTypePreorder PreorderFormRequest0EventType = "preorder"
)

// Defines values for PreorderFormRequest1EventContext.
const (
	Subsequent PreorderFormRequest1EventContext = "subsequent"
)

// Defines values for PreorderFormRequest1EventType.
const (
	PreorderFormRequest1EventTypePreorder PreorderFormRequest1EventType = "preorder"
)

// Defines values for ProviderMessageRequestMessage0Priority.
const (
	High    ProviderMessageRequestMessage0Priority = "high"
	Low     ProviderMessageRequestMessage0Priority = "low"
	Routine ProviderMessageRequestMessage0Priority = "routine"
)

// Defines values for ProviderMessageRequestMessage0Type.
const (
	Inbasket ProviderMessageRequestMessage0Type = "inbasket"
)

// Defines values for ProviderMessageRequestMessage1Type.
const (
	Sde ProviderMessageRequestMessage1Type = "sde"
)

// Defines values for ReadOrderResponseDatasetsDemographicsV1Gender.
const (
	ReadOrderResponseDatasetsDemographicsV1GenderFemale  ReadOrderResponseDatasetsDemographicsV1Gender = "female"
	ReadOrderResponseDatasetsDemographicsV1GenderMale    ReadOrderResponseDatasetsDemographicsV1Gender = "male"
	ReadOrderResponseDatasetsDemographicsV1GenderOther   ReadOrderResponseDatasetsDemographicsV1Gender = "other"
	ReadOrderResponseDatasetsDemographicsV1GenderUnknown ReadOrderResponseDatasetsDemographicsV1Gender = "unknown"
)

// Defines values for ReadOrderResponseDatasetsDemographicsV1NameUse.
const (
	ReadOrderResponseDatasetsDemographicsV1NameUseAnonymous ReadOrderResponseDatasetsDemographicsV1NameUse = "anonymous"
	ReadOrderResponseDatasetsDemographicsV1NameUseMaiden    ReadOrderResponseDatasetsDemographicsV1NameUse = "maiden"
	ReadOrderResponseDatasetsDemographicsV1NameUseNickname  ReadOrderResponseDatasetsDemographicsV1NameUse = "nickname"
	ReadOrderResponseDatasetsDemographicsV1NameUseOfficial  ReadOrderResponseDatasetsDemographicsV1NameUse = "official"
	ReadOrderResponseDatasetsDemographicsV1NameUseOld       ReadOrderResponseDatasetsDemographicsV1NameUse = "old"
	ReadOrderResponseDatasetsDemographicsV1NameUseTemp      ReadOrderResponseDatasetsDemographicsV1NameUse = "temp"
	ReadOrderResponseDatasetsDemographicsV1NameUseUsual     ReadOrderResponseDatasetsDemographicsV1NameUse = "usual"
)

// Defines values for ReadOrderResponseDatasetsDemographicsV1NameListUse.
const (
	ReadOrderResponseDatasetsDemographicsV1NameListUseAnonymous ReadOrderResponseDatasetsDemographicsV1NameListUse = "anonymous"
	ReadOrderResponseDatasetsDemographicsV1NameListUseMaiden    ReadOrderResponseDatasetsDemographicsV1NameListUse = "maiden"
	ReadOrderResponseDatasetsDemographicsV1NameListUseNickname  ReadOrderResponseDatasetsDemographicsV1NameListUse = "nickname"
	ReadOrderResponseDatasetsDemographicsV1NameListUseOfficial  ReadOrderResponseDatasetsDemographicsV1NameListUse = "official"
	ReadOrderResponseDatasetsDemographicsV1NameListUseOld       ReadOrderResponseDatasetsDemographicsV1NameListUse = "old"
	ReadOrderResponseDatasetsDemographicsV1NameListUseTemp      ReadOrderResponseDatasetsDemographicsV1NameListUse = "temp"
	ReadOrderResponseDatasetsDemographicsV1NameListUseUsual     ReadOrderResponseDatasetsDemographicsV1NameListUse = "usual"
)

// Defines values for ReadOrderResponseDatasetsDemographicsV1TelecomSystem.
const (
	ReadOrderResponseDatasetsDemographicsV1TelecomSystemEmail ReadOrderResponseDatasetsDemographicsV1TelecomSystem = "email"
	ReadOrderResponseDatasetsDemographicsV1TelecomSystemFax   ReadOrderResponseDatasetsDemographicsV1TelecomSystem = "fax"
	ReadOrderResponseDatasetsDemographicsV1TelecomSystemOther ReadOrderResponseDatasetsDemographicsV1TelecomSystem = "other"
	ReadOrderResponseDatasetsDemographicsV1TelecomSystemPager ReadOrderResponseDatasetsDemographicsV1TelecomSystem = "pager"
	ReadOrderResponseDatasetsDemographicsV1TelecomSystemPhone ReadOrderResponseDatasetsDemographicsV1TelecomSystem = "phone"
	ReadOrderResponseDatasetsDemographicsV1TelecomSystemSms   ReadOrderResponseDatasetsDemographicsV1TelecomSystem = "sms"
	ReadOrderResponseDatasetsDemographicsV1TelecomSystemUrl   ReadOrderResponseDatasetsDemographicsV1TelecomSystem = "url"
)

// Defines values for ReadOrderResponseDatasetsDemographicsV1TelecomUse.
const (
	ReadOrderResponseDatasetsDemographicsV1TelecomUseHome   ReadOrderResponseDatasetsDemographicsV1TelecomUse = "home"
	ReadOrderResponseDatasetsDemographicsV1TelecomUseMobile ReadOrderResponseDatasetsDemographicsV1TelecomUse = "mobile"
	ReadOrderResponseDatasetsDemographicsV1TelecomUseOld    ReadOrderResponseDatasetsDemographicsV1TelecomUse = "old"
	ReadOrderResponseDatasetsDemographicsV1TelecomUseTemp   ReadOrderResponseDatasetsDemographicsV1TelecomUse = "temp"
	ReadOrderResponseDatasetsDemographicsV1TelecomUseWork   ReadOrderResponseDatasetsDemographicsV1TelecomUse = "work"
)

// Defines values for ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUse.
const (
	ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUseAnonymous ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUse = "anonymous"
	ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUseMaiden    ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUse = "maiden"
	ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUseNickname  ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUse = "nickname"
	ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUseOfficial  ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUse = "official"
	ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUseOld       ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUse = "old"
	ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUseTemp      ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUse = "temp"
	ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUseUsual     ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUse = "usual"
)

// Defines values for ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomSystem.
const (
	Email ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "email"
	Fax   ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "fax"
	Other ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "other"
	Pager ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "pager"
	Phone ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "phone"
	Sms   ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "sms"
	Url   ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomSystem = "url"
)

// Defines values for ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUse.
const (
	ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUseHome   ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUse = "home"
	ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUseMobile ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUse = "mobile"
	ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUseOld    ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUse = "old"
	ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUseTemp   ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUse = "temp"
	ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUseWork   ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUse = "work"
)

// Defines values for ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUse.
const (
	ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUseAnonymous ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "anonymous"
	ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUseMaiden    ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "maiden"
	ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUseNickname  ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "nickname"
	ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUseOfficial  ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "official"
	ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUseOld       ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "old"
	ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUseTemp      ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "temp"
	ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUseUsual     ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUse = "usual"
)

// Defines values for ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenType.
const (
	Birth ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenType = "birth"
	Proxy ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenType = "proxy"
)

// Defines values for ReadOrderResponseDatasetsMaternityPregnancyEpicV1Pregnant.
const (
	No      ReadOrderResponseDatasetsMaternityPregnancyEpicV1Pregnant = "no"
	Unknown ReadOrderResponseDatasetsMaternityPregnancyEpicV1Pregnant = "unknown"
	Yes     ReadOrderResponseDatasetsMaternityPregnancyEpicV1Pregnant = "yes"
)

// Defines values for ReadOrderResponseOrderInfoOrderSource.
const (
	ReadOrderResponseOrderInfoOrderSourceAppointment          ReadOrderResponseOrderInfoOrderSource = "appointment"
	ReadOrderResponseOrderInfoOrderSourceBatch                ReadOrderResponseOrderInfoOrderSource = "batch"
	ReadOrderResponseOrderInfoOrderSourceDigitalcare          ReadOrderResponseOrderInfoOrderSource = "digitalcare"
	ReadOrderResponseOrderInfoOrderSourceDischarge            ReadOrderResponseOrderInfoOrderSource = "discharge"
	ReadOrderResponseOrderInfoOrderSourceHl7encounter         ReadOrderResponseOrderInfoOrderSource = "hl7encounter"
	ReadOrderResponseOrderInfoOrderSourceOrm                  ReadOrderResponseOrderInfoOrderSource = "orm"
	ReadOrderResponseOrderInfoOrderSourcePartnerapi           ReadOrderResponseOrderInfoOrderSource = "partnerapi"
	ReadOrderResponseOrderInfoOrderSourcePedsurginet          ReadOrderResponseOrderInfoOrderSource = "pedsurginet"
	ReadOrderResponseOrderInfoOrderSourceScheduled            ReadOrderResponseOrderInfoOrderSource = "scheduled"
	ReadOrderResponseOrderInfoOrderSourceSubscriberenrollment ReadOrderResponseOrderInfoOrderSource = "subscriberenrollment"
	ReadOrderResponseOrderInfoOrderSourceSubscriberorder      ReadOrderResponseOrderInfoOrderSource = "subscriberorder"
	ReadOrderResponseOrderInfoOrderSourceSurgery              ReadOrderResponseOrderInfoOrderSource = "surgery"
	ReadOrderResponseOrderInfoOrderSourceSurginet             ReadOrderResponseOrderInfoOrderSource = "surginet"
)

// Defines values for ReadOrderResponseOrderInfoOrderState.
const (
	Canceled ReadOrderResponseOrderInfoOrderState = "canceled"
	Ordered  ReadOrderResponseOrderInfoOrderState = "ordered"
)

// Defines values for ReadOrderResponsePatientIdentityHistoricalIdsOrigin.
const (
	ReadOrderResponsePatientIdentityHistoricalIdsOriginCerner   ReadOrderResponsePatientIdentityHistoricalIdsOrigin = "cerner"
	ReadOrderResponsePatientIdentityHistoricalIdsOriginEpic     ReadOrderResponsePatientIdentityHistoricalIdsOrigin = "epic"
	ReadOrderResponsePatientIdentityHistoricalIdsOriginInitiate ReadOrderResponsePatientIdentityHistoricalIdsOrigin = "initiate"
	ReadOrderResponsePatientIdentityHistoricalIdsOriginXealth   ReadOrderResponsePatientIdentityHistoricalIdsOrigin = "xealth"
)

// Defines values for ReadOrderResponsePatientIdentityIdsOrigin.
const (
	ReadOrderResponsePatientIdentityIdsOriginCerner   ReadOrderResponsePatientIdentityIdsOrigin = "cerner"
	ReadOrderResponsePatientIdentityIdsOriginEpic     ReadOrderResponsePatientIdentityIdsOrigin = "epic"
	ReadOrderResponsePatientIdentityIdsOriginInitiate ReadOrderResponsePatientIdentityIdsOrigin = "initiate"
	ReadOrderResponsePatientIdentityIdsOriginXealth   ReadOrderResponsePatientIdentityIdsOrigin = "xealth"
)

// Defines values for UpdateOrderRequestPartnerOrderUpdateProgramStatus.
const (
	UpdateOrderRequestPartnerOrderUpdateProgramStatusActive         UpdateOrderRequestPartnerOrderUpdateProgramStatus = "active"
	UpdateOrderRequestPartnerOrderUpdateProgramStatusCompleted      UpdateOrderRequestPartnerOrderUpdateProgramStatus = "completed"
	UpdateOrderRequestPartnerOrderUpdateProgramStatusDraft          UpdateOrderRequestPartnerOrderUpdateProgramStatus = "draft"
	UpdateOrderRequestPartnerOrderUpdateProgramStatusEnteredInError UpdateOrderRequestPartnerOrderUpdateProgramStatus = "entered-in-error"
	UpdateOrderRequestPartnerOrderUpdateProgramStatusRevoked        UpdateOrderRequestPartnerOrderUpdateProgramStatus = "revoked"
)

// Defines values for Action.
const (
	ActionAction    Action = "action"
	ActionArchive   Action = "archive"
	ActionUnarchive Action = "unarchive"
	ActionVideo     Action = "video"
)

// Defines values for PostPartnerWriteOrderDeploymentJSONBodyOrderType.
const (
	PostPartnerWriteOrderDeploymentJSONBodyOrderTypeEnrollment PostPartnerWriteOrderDeploymentJSONBodyOrderType = "enrollment"
)

// Defines values for PostPartnerWriteOrderDeploymentJSONBodyPatientIdOrigin.
const (
	Cerner   PostPartnerWriteOrderDeploymentJSONBodyPatientIdOrigin = "cerner"
	Epic     PostPartnerWriteOrderDeploymentJSONBodyPatientIdOrigin = "epic"
	Initiate PostPartnerWriteOrderDeploymentJSONBodyPatientIdOrigin = "initiate"
	Xealth   PostPartnerWriteOrderDeploymentJSONBodyPatientIdOrigin = "xealth"
)

// Defines values for PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatus.
const (
	PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatusActive         PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatus = "active"
	PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatusCompleted      PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatus = "completed"
	PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatusDraft          PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatus = "draft"
	PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatusEnteredInError PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatus = "entered-in-error"
	PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatusRevoked        PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatus = "revoked"
)

// BatchFileInfo Information related to the batch file associated with the order
type BatchFileInfo struct {
	// BatchFileData JSON object of the batch file data associated with the order
	BatchFileData *map[string]interface{} `json:"batchFileData,omitempty"`

	// BatchFileDataSchemaId Unique identifier related to the JSON schema of the batchFileData
	BatchFileDataSchemaId *string `json:"batchFileDataSchemaId,omitempty"`
}

// BatchFileSchemaResponse defines model for BatchFileSchemaResponse.
type BatchFileSchemaResponse struct {
	// BatchFileSchema JSON schema of the batch file
	BatchFileSchema map[string]interface{} `json:"batchFileSchema"`
}

// BloodPressureRequest defines model for BloodPressureRequest.
type BloodPressureRequest struct {
	BasedOn []struct {
		Reference string `json:"reference"`
	} `json:"basedOn"`
	Category []struct {
		Coding []struct {
			Code    string `json:"code"`
			Display string `json:"display"`
			System  string `json:"system"`
		} `json:"coding"`
		Text string `json:"text"`
	} `json:"category"`
	Code struct {
		Coding []struct {
			Code    string `json:"code"`
			Display string `json:"display"`
			System  string `json:"system"`
		} `json:"coding"`
		Text string `json:"text"`
	} `json:"code"`
	Component []struct {
		Code struct {
			Coding []struct {
				Code    string `json:"code"`
				Display string `json:"display"`
				System  string `json:"system"`
			} `json:"coding"`
			Text string `json:"text"`
		} `json:"code"`
		ValueQuantity struct {
			Code   string `json:"code"`
			System string `json:"system"`
			Unit   string `json:"unit"`
			Value  int    `json:"value"`
		} `json:"valueQuantity"`
	} `json:"component"`
	EffectiveDateTime string `json:"effectiveDateTime"`
	Extension         []struct {
		DeviceInfo *struct {
			Display struct {
				Url         BloodPressureRequestExtensionDeviceInfoDisplayUrl `json:"url"`
				ValueString string                                            `json:"valueString"`
			} `json:"display"`
			Identifier *struct {
				Url         BloodPressureRequestExtensionDeviceInfoIdentifierUrl `json:"url"`
				ValueString string                                               `json:"valueString"`
			} `json:"identifier,omitempty"`
			Manufacturer struct {
				Url         BloodPressureRequestExtensionDeviceInfoManufacturerUrl `json:"url"`
				ValueString string                                                 `json:"valueString"`
			} `json:"manufacturer"`
			Model struct {
				Url         BloodPressureRequestExtensionDeviceInfoModelUrl `json:"url"`
				ValueString string                                          `json:"valueString"`
			} `json:"model"`
		} `json:"deviceInfo,omitempty"`
		IsManualEntry struct {
			Url          string `json:"url"`
			ValueBoolean bool   `json:"valueBoolean"`
		} `json:"isManualEntry"`
	} `json:"extension"`
	Meta struct {
		Profile []string `json:"profile"`
	} `json:"meta"`
	ResourceType string `json:"resourceType"`
	Status       string `json:"status"`
}

// BloodPressureRequestExtensionDeviceInfoDisplayUrl defines model for BloodPressureRequest.Extension.DeviceInfo.Display.Url.
type BloodPressureRequestExtensionDeviceInfoDisplayUrl string

// BloodPressureRequestExtensionDeviceInfoIdentifierUrl defines model for BloodPressureRequest.Extension.DeviceInfo.Identifier.Url.
type BloodPressureRequestExtensionDeviceInfoIdentifierUrl string

// BloodPressureRequestExtensionDeviceInfoManufacturerUrl defines model for BloodPressureRequest.Extension.DeviceInfo.Manufacturer.Url.
type BloodPressureRequestExtensionDeviceInfoManufacturerUrl string

// BloodPressureRequestExtensionDeviceInfoModelUrl defines model for BloodPressureRequest.Extension.DeviceInfo.Model.Url.
type BloodPressureRequestExtensionDeviceInfoModelUrl string

// BodyWeightRequest defines model for BodyWeightRequest.
type BodyWeightRequest struct {
	BasedOn []struct {
		Reference string `json:"reference"`
	} `json:"basedOn"`
	Category []struct {
		Coding []struct {
			Code    string `json:"code"`
			Display string `json:"display"`
			System  string `json:"system"`
		} `json:"coding"`
		Text string `json:"text"`
	} `json:"category"`
	Code struct {
		Coding []struct {
			Code    string `json:"code"`
			Display string `json:"display"`
			System  string `json:"system"`
		} `json:"coding"`
		Text string `json:"text"`
	} `json:"code"`
	EffectiveDateTime string `json:"effectiveDateTime"`
	Extension         []struct {
		Url          string `json:"url"`
		ValueBoolean bool   `json:"valueBoolean"`
	} `json:"extension"`
	Meta struct {
		Profile []string `json:"profile"`
	} `json:"meta"`
	ResourceType  string `json:"resourceType"`
	Status        string `json:"status"`
	ValueQuantity struct {
		Code   string  `json:"code"`
		System string  `json:"system"`
		Unit   string  `json:"unit"`
		Value  float32 `json:"value"`
	} `json:"valueQuantity"`
}

// CardActionLogging defines model for CardActionLogging.
type CardActionLogging struct {
	CardMeta *struct {
		IsArchived *bool `json:"isArchived,omitempty"`
	} `json:"cardMeta,omitempty"`
	VideoInfo *struct {
		VideoWatchedPercentage *float32 `json:"videoWatchedPercentage,omitempty"`
	} `json:"videoInfo,omitempty"`
}

// CardActions Detail information related to interactive elements associated with the card
type CardActions struct {
	// Action Indicates the action to be invoked for this cardAction
	Action CardActionsAction `json:"action"`

	// ActionType Indicates how the cardAction should be presented to the patient
	ActionType CardActionsActionType `json:"actionType"`

	// Description Description of the card action
	Description *string `json:"description,omitempty"`

	// Label Text that should be presented to the patient for this cardAction
	Label *string `json:"label,omitempty"`

	// Path Request path to Xealth API when the cardAction is invoked
	Path *string `json:"path,omitempty"`

	// Url URL opened when the cardAction is invoked
	Url *string `json:"url,omitempty"`
}

// CardActionsAction Indicates the action to be invoked for this cardAction
type CardActionsAction string

// CardActionsActionType Indicates how the cardAction should be presented to the patient
type CardActionsActionType string

// CardItem All information related to the patient card
type CardItem struct {
	CardActions *[]struct {
		// Action Indicates the action to be invoked for this cardAction
		Action CardItemCardActionsAction `json:"action"`

		// ActionType Indicates how the cardAction should be presented to the patient
		ActionType CardItemCardActionsActionType `json:"actionType"`

		// Description Description of the card action
		Description *string `json:"description,omitempty"`

		// Label Text that should be presented to the patient for this cardAction
		Label *string `json:"label,omitempty"`

		// Path Request path to Xealth API when the cardAction is invoked
		Path *string `json:"path,omitempty"`

		// Url URL opened when the cardAction is invoked
		Url *string `json:"url,omitempty"`
	} `json:"cardActions,omitempty"`

	// CardMeta Detail information related to the card
	CardMeta struct {
		// CardCreationDateTime Indicates when the card was created
		CardCreationDateTime time.Time `json:"cardCreationDateTime"`

		// CardText Text associated with the card
		CardText *string `json:"cardText,omitempty"`

		// CardTitle Title of the card
		CardTitle string `json:"cardTitle"`

		// CardType Type of digital content associated with the card
		CardType CardItemCardMetaCardType `json:"cardType"`

		// CardUpdateDateTime Indicates when the card was last updated
		CardUpdateDateTime time.Time `json:"cardUpdateDateTime"`

		// HasActivity Indicates whether or not patient interacted with the card
		HasActivity *bool `json:"hasActivity,omitempty"`

		// IsArchived Indicates whether or not the card is archived
		IsArchived bool `json:"isArchived"`

		// IsCompleted Indicates whether or not the content of the card is consumed
		IsCompleted bool `json:"isCompleted"`

		// IsPinned Indicates whether or not the card is pinned to the top of the card feed
		IsPinned *bool `json:"isPinned,omitempty"`

		// ProviderInfo Provider associated with the card
		ProviderInfo struct {
			// Name Name of the provider associated with the card
			Name *string `json:"name,omitempty"`
		} `json:"providerInfo"`

		// Thumbnail Link to a thumbnail image of the card
		Thumbnail *string `json:"thumbnail,omitempty"`
	} `json:"cardMeta"`

	// OrderInfo Detail information related to the order
	OrderInfo struct {
		// ContentTag Tags defining the type of digital content associated with the order
		ContentTag *[]string `json:"contentTag,omitempty"`

		// Deployment The Xealth-defined ID of the Health System
		Deployment string `json:"deployment"`

		// OrderCreationDateTime Indicates when the order was created
		OrderCreationDateTime time.Time `json:"orderCreationDateTime"`

		// OrderId Xealth-generated value that uniquely identifies the order
		OrderId string `json:"orderId"`

		// OrderSource Indicates the source system used to generate the order
		OrderSource CardItemOrderInfoOrderSource `json:"orderSource"`

		// OrderUpdateDateTime Indicates when the order was last updated
		OrderUpdateDateTime time.Time `json:"orderUpdateDateTime"`

		// PartnerId Xealth-generated value that uniquely identifies the partner associated with the order
		PartnerId string `json:"partnerId"`

		// ProgramId Xealth-generated value that identifies the digital content associated with the order
		ProgramId string `json:"programId"`
	} `json:"orderInfo"`

	// VideoInfo Detail information related to video data associated with the card
	VideoInfo *struct {
		// Captions Detail information related to video captions data
		Captions *[]struct {
			// Default Indicates whether or not the track should be used by default
			Default *bool `json:"default,omitempty"`

			// Kind How the text track is meant to be used
			Kind *string `json:"kind,omitempty"`

			// Src Address of the track (.vtt file)
			Src *string `json:"src,omitempty"`

			// Srclang Language of the track text data
			Srclang *string `json:"srclang,omitempty"`
		} `json:"captions,omitempty"`

		// Hlsv3 Detail information related to hlsv3 data associated with the video
		Hlsv3 *struct {
			// ContentType MIME type of the hlsv3 video
			ContentType *string `json:"contentType,omitempty"`

			// Url Link to the hlsv3 video
			Url *string `json:"url,omitempty"`
		} `json:"hlsv3,omitempty"`

		// Mp4 Detail information related to mp4 data associated with the video
		Mp4 *struct {
			// Height Height of the mp4 video
			Height *int `json:"height,omitempty"`

			// Url Link to the mp4 video
			Url *string `json:"url,omitempty"`

			// Width Width of the mp4 video
			Width *int `json:"width,omitempty"`
		} `json:"mp4,omitempty"`

		// Thumbnail Link to a thumbnail image of the video
		Thumbnail *string `json:"thumbnail,omitempty"`

		// Wistia Detail information related to Wistia player data associated with the video
		Wistia *struct {
			// OrderCode Wistia order code associated with the video
			OrderCode *string `json:"orderCode,omitempty"`

			// WistiaId Wistia identifier associated with the video
			WistiaId *string `json:"wistiaId,omitempty"`

			// WistiaTracker Wistia tracking value associated with the video
			WistiaTracker *string `json:"wistiaTracker,omitempty"`
		} `json:"wistia,omitempty"`

		// Youtube Detail information related to YouTube data associated with the video
		Youtube *struct {
			// Url Link to the YouTube video
			Url *string `json:"url,omitempty"`
		} `json:"youtube,omitempty"`
	} `json:"videoInfo,omitempty"`
}

// CardItemCardActionsAction Indicates the action to be invoked for this cardAction
type CardItemCardActionsAction string

// CardItemCardActionsActionType Indicates how the cardAction should be presented to the patient
type CardItemCardActionsActionType string

// CardItemCardMetaCardType Type of digital content associated with the card
type CardItemCardMetaCardType string

// CardItemOrderInfoOrderSource Indicates the source system used to generate the order
type CardItemOrderInfoOrderSource string

// CardMeta Detail information related to the card
type CardMeta struct {
	// CardCreationDateTime Indicates when the card was created
	CardCreationDateTime time.Time `json:"cardCreationDateTime"`

	// CardText Text associated with the card
	CardText *string `json:"cardText,omitempty"`

	// CardTitle Title of the card
	CardTitle string `json:"cardTitle"`

	// CardType Type of digital content associated with the card
	CardType CardMetaCardType `json:"cardType"`

	// CardUpdateDateTime Indicates when the card was last updated
	CardUpdateDateTime time.Time `json:"cardUpdateDateTime"`

	// HasActivity Indicates whether or not patient interacted with the card
	HasActivity *bool `json:"hasActivity,omitempty"`

	// IsArchived Indicates whether or not the card is archived
	IsArchived bool `json:"isArchived"`

	// IsCompleted Indicates whether or not the content of the card is consumed
	IsCompleted bool `json:"isCompleted"`

	// IsPinned Indicates whether or not the card is pinned to the top of the card feed
	IsPinned *bool `json:"isPinned,omitempty"`

	// ProviderInfo Provider associated with the card
	ProviderInfo struct {
		// Name Name of the provider associated with the card
		Name *string `json:"name,omitempty"`
	} `json:"providerInfo"`

	// Thumbnail Link to a thumbnail image of the card
	Thumbnail *string `json:"thumbnail,omitempty"`
}

// CardMetaCardType Type of digital content associated with the card
type CardMetaCardType string

// CreateOrderResponse defines model for CreateOrderResponse.
type CreateOrderResponse struct {
	// Deployment The Xealth-defined ID of the Health System
	Deployment string `json:"deployment"`

	// OrderId Xealth-generated value that uniquely identifies the order
	OrderId string `json:"orderId"`

	// PartnerId Xealth-generated value that uniquely identifies the partner
	PartnerId string `json:"partnerId"`

	// PatientIdentity Object identifying the patient
	PatientIdentity struct {
		// HistoricalIds List of the historical identifiers related to the patient
		HistoricalIds *[]struct {
			// Id Value of the identifier for the patient
			Id string `json:"id"`

			// Origin Defines the originating system from which the id value was sourced
			Origin CreateOrderResponsePatientIdentityHistoricalIdsOrigin `json:"origin"`

			// Type Defines the type of identifier associated with the id
			Type string `json:"type"`
		} `json:"historicalIds,omitempty"`

		// Ids List of the current identifiers related to the patient
		Ids []struct {
			// Id Value of the identifier for the patient
			Id string `json:"id"`

			// Origin Defines the originating system from which the id value was sourced
			Origin CreateOrderResponsePatientIdentityIdsOrigin `json:"origin"`

			// Type Defines the type of identifier associated with the id
			Type string `json:"type"`
		} `json:"ids"`
	} `json:"patientIdentity"`
}

// CreateOrderResponsePatientIdentityHistoricalIdsOrigin Defines the originating system from which the id value was sourced
type CreateOrderResponsePatientIdentityHistoricalIdsOrigin string

// CreateOrderResponsePatientIdentityIdsOrigin Defines the originating system from which the id value was sourced
type CreateOrderResponsePatientIdentityIdsOrigin string

// DataSets Health system data configured for the subscriber
type DataSets struct {
	// AdmitDischargeTransferV1 HL7 ADT encounter data. This dataset supports Epic and Cerner. The data expected to be populated varies based on what trigger event the dataset is generated from: A01 (Admit), A02 (Transfer), A03 (Discharge), to list a few examples.
	AdmitDischargeTransferV1 *struct {
		// AdditionalDemographics Additional patient demographics (PD1)
		AdditionalDemographics *struct {
			// Handicap Handicap (PD1-6)
			Handicap *string `json:"handicap,omitempty"`

			// PrimaryCareProvider List of identifiers of primary care provider (PD1-4)
			PrimaryCareProvider *[]struct {
				// FamilyName Provider last name (XCN.2)
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name (XCN.3)
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number (XCN.1)
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"primaryCareProvider,omitempty"`
		} `json:"additionalDemographics,omitempty"`

		// AdmissionSource Admission Source (PV1-14)
		AdmissionSource *string `json:"admissionSource,omitempty"`

		// AdmissionType Admission Type (PV1-4)
		AdmissionType *string `json:"admissionType,omitempty"`

		// AdmitDateTime Admit Date/Time (PV1-45)
		AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

		// AdmitReason Admit reason (PV2-3)
		AdmitReason *struct {
			// Identifier Symbol in syntax defined by the system
			Identifier *string `json:"identifier,omitempty"`

			// NameOfCodingSystem Identity of the terminology system
			NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

			// Text Representation defined by the system
			Text *string `json:"text,omitempty"`
		} `json:"admitReason,omitempty"`

		// AdmittingProvider A list of provider identifiers for the admitting provider (PV1-17)
		AdmittingProvider *[]struct {
			// FamilyName Provider last name (XCN.2)
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name (XCN.3)
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number (XCN.1)
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"admittingProvider,omitempty"`

		// AlternateVisitId Alternate Visit Id (PV1-50)
		AlternateVisitId *struct {
			// Id Alternate visit id (PV1-50.1)
			Id *string `json:"id,omitempty"`
		} `json:"alternateVisitId,omitempty"`

		// AssignedPatientLocation Assigned Patient Location (PV1-3). Cerner-specific note: Each field in this structure may not be considered unique except within the context of the hierarchy it is part of.
		AssignedPatientLocation *struct {
			// Building Object defining an identifier set describing an entity in either a local or universal context
			Building *struct {
				// NamespaceId A locally unique identifier
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId An identifier that is universally unique within a given context
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType A code describing the context in which the universal id is unique
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"building,omitempty"`

			// Department Object defining an identifier set describing an entity in either a local or universal context
			Department *struct {
				// NamespaceId A locally unique identifier
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId An identifier that is universally unique within a given context
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType A code describing the context in which the universal id is unique
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"department,omitempty"`

			// Facility Object defining an identifier set describing an entity in either a local or universal context
			Facility *struct {
				// NamespaceId A locally unique identifier
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId An identifier that is universally unique within a given context
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType A code describing the context in which the universal id is unique
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"facility,omitempty"`
		} `json:"assignedPatientLocation,omitempty"`

		// AttendingProvider A list of provider identifiers for the attending provider (PV1-7)
		AttendingProvider *[]struct {
			// FamilyName Provider last name (XCN.2)
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name (XCN.3)
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number (XCN.1)
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"attendingProvider,omitempty"`

		// ConsultingProvider A list of provider identifiers for the consulting provider (PV1-9)
		ConsultingProvider *[]struct {
			// FamilyName Provider last name (XCN.2)
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name (XCN.3)
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number (XCN.1)
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"consultingProvider,omitempty"`

		// DischargeDateTime Discharge Date/Time (PV1-45)
		DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

		// DischargeDestination Discharge destination (PV1-37)
		DischargeDestination *string `json:"dischargeDestination,omitempty"`

		// DischargeDisposition Discharge disposition (PV1-36)
		DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

		// EncounterDiagnosis List of encounter diagnoses (DG1)
		EncounterDiagnosis *[]struct {
			// DiagnosisCode Diagnosis code (DG1-3)
			DiagnosisCode *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"diagnosisCode,omitempty"`

			// DiagnosisDateTime Diagnosis date/time (DG1-5)
			DiagnosisDateTime *time.Time `json:"diagnosisDateTime,omitempty"`

			// DiagnosisDescription Diagnosis description (DG1-4)
			DiagnosisDescription *string `json:"diagnosisDescription,omitempty"`

			// DiagnosisType Diagnosis type (DG1-6)
			DiagnosisType *string `json:"diagnosisType,omitempty"`
		} `json:"encounterDiagnosis,omitempty"`

		// EventOccurredDateTime (Epic only) Date/Time Event Occurred (EVN-6)
		EventOccurredDateTime *time.Time `json:"eventOccurredDateTime,omitempty"`

		// EventRecordedDateTime Date/Time Event Recorded (EVN-2)
		EventRecordedDateTime *time.Time `json:"eventRecordedDateTime,omitempty"`

		// EventTypeCode Event Type Code (EVN-1)
		EventTypeCode *string `json:"eventTypeCode,omitempty"`

		// HospitalService Hospital service (PV1-10)
		HospitalService *string `json:"hospitalService,omitempty"`

		// MessageType ADT Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`

		// NextOfKin List of next of kin (NK1)
		NextOfKin *[]struct {
			// Addresses List of addresses of the next of kin (NK1-4)
			Addresses *[]struct {
				// City City (XAD.3)
				City *string `json:"city,omitempty"`

				// OtherDesignation Other designation such as county (XAD.2)
				OtherDesignation *string `json:"otherDesignation,omitempty"`

				// State State (XAD.4)
				State *string `json:"state,omitempty"`

				// Street Street (XAD.1)
				Street *string `json:"street,omitempty"`

				// Type (Epic only) Type of address (XAD.7)
				Type *string `json:"type,omitempty"`

				// Zip Zip or postal code (XAD.5)
				Zip *string `json:"zip,omitempty"`
			} `json:"addresses,omitempty"`

			// AssociatedPrimaryIdentifiers List of primary identifiers (NK1-33)
			AssociatedPrimaryIdentifiers *[]struct {
				// Id Identifier (NK1-33.1)
				Id *string `json:"id,omitempty"`

				// Type Identifier type (NK1-33.5 for Epic, NK1-33.4 for Cerner)
				Type *string `json:"type,omitempty"`
			} `json:"associatedPrimaryIdentifiers,omitempty"`

			// ContactInfo List of phone numbers or emails of the next of kin (NK1-5)
			ContactInfo *[]struct {
				// EmailAddress (Epic only) Email address (XTN.4)
				EmailAddress *string `json:"emailAddress,omitempty"`

				// EquipmentType Equipment type (XTN.2)
				EquipmentType *string `json:"equipmentType,omitempty"`

				// PhoneNumber Phone number (XTN.1)
				PhoneNumber *string `json:"phoneNumber,omitempty"`

				// UnformattedPhoneNumber (Epic only) Unformatted phone number (XTN.12)
				UnformattedPhoneNumber *string `json:"unformattedPhoneNumber,omitempty"`
			} `json:"contactInfo,omitempty"`

			// ContactRole Contact role (NK1-7.1)
			ContactRole *string `json:"contactRole,omitempty"`

			// JobStatus Job Status (NK1-34)
			JobStatus *map[string]interface{} `json:"jobStatus,omitempty"`

			// Names List of names of the next of kin (NK1-2)
			Names *[]struct {
				// FamilyName Family name (XPN.1)
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Given name (XPN.2)
				GivenName *string `json:"givenName,omitempty"`

				// MiddleName Second and further given names or initials thereof (XPN.3)
				MiddleName *string `json:"middleName,omitempty"`
			} `json:"names,omitempty"`

			// PrimaryLanguage Primary language (NK1-20)
			PrimaryLanguage *string `json:"primaryLanguage,omitempty"`

			// Relationship Relationship with the patient (NK1-3)
			Relationship *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"relationship,omitempty"`
		} `json:"nextOfKin,omitempty"`

		// OperatorId Operator Id (EVN-5)
		OperatorId *struct {
			// Id Operator Id (EVN-5.1)
			Id *string `json:"id,omitempty"`

			// Type (Cerner only) Operator Id Type (EVN-5.9)
			Type *string `json:"type,omitempty"`
		} `json:"operatorId,omitempty"`

		// PatientClass Patient Class (PV1-2)
		PatientClass *string `json:"patientClass,omitempty"`

		// PatientDeathIndicator Patient Death Indicator (PID-30)
		PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

		// PatientIdList Patient identifier list (PID-3)
		PatientIdList *[]struct {
			// Id Patient identifier (PID-3.1)
			Id *string `json:"id,omitempty"`

			// Type (PID-3.5 for Epic; PID-3.4 for Cerner)
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientLevelPersonnel (Epic only) List of patient level care team personnel information (ROL segments after PID)
		PatientLevelPersonnel *[]struct {
			// PersonnelName List of names for this provider (ROL-4)
			PersonnelName *[]struct {
				// FamilyName Provider last name (XCN.2)
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name (XCN.3)
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number (XCN.1)
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"personnelName,omitempty"`

			// PersonnelRole Provider role (ROL-3)
			PersonnelRole *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"personnelRole,omitempty"`

			// ProviderType Provider type (ROL-9)
			ProviderType *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"providerType,omitempty"`

			// RoleBeginDate Treatment/Care team assignment start date (ROL-5)
			RoleBeginDate *time.Time `json:"roleBeginDate,omitempty"`

			// RoleEndDate Treatment/Care team assignment end date (ROL-6)
			RoleEndDate *time.Time `json:"roleEndDate,omitempty"`
		} `json:"patientLevelPersonnel,omitempty"`

		// PatientType Patient type (PV1-18)
		PatientType *string `json:"patientType,omitempty"`

		// PriorPatientLocation Prior Patient Location (PV1-6). Cerner-specific note: Each field in this structure may not be considered unique except within the context of the hierarchy it is part of.
		PriorPatientLocation *struct {
			// Building Object defining an identifier set describing an entity in either a local or universal context
			Building *struct {
				// NamespaceId A locally unique identifier
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId An identifier that is universally unique within a given context
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType A code describing the context in which the universal id is unique
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"building,omitempty"`

			// Department Object defining an identifier set describing an entity in either a local or universal context
			Department *struct {
				// NamespaceId A locally unique identifier
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId An identifier that is universally unique within a given context
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType A code describing the context in which the universal id is unique
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"department,omitempty"`

			// Facility Object defining an identifier set describing an entity in either a local or universal context
			Facility *struct {
				// NamespaceId A locally unique identifier
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId An identifier that is universally unique within a given context
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType A code describing the context in which the universal id is unique
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"facility,omitempty"`
		} `json:"priorPatientLocation,omitempty"`

		// Procedures (Epic only) List of procedures (PR1). Also note: what is populated here is likely to vary greatly between health systems.
		Procedures *[]struct {
			// AssociatedDiagnosisCode Associated diagnosis code (PR1-15)
			AssociatedDiagnosisCode *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"associatedDiagnosisCode,omitempty"`

			// ProcedureCode Procedure code (PR1-3)
			ProcedureCode *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"procedureCode,omitempty"`

			// ProcedureCodingMethod Procedure coding method (PR1-2)
			ProcedureCodingMethod *string `json:"procedureCodingMethod,omitempty"`

			// ProcedureDateTime Procedure date/time (PR1-5)
			ProcedureDateTime *string `json:"procedureDateTime,omitempty"`

			// ProcedureDescription Procedure description (PR1-4)
			ProcedureDescription *string `json:"procedureDescription,omitempty"`
		} `json:"procedures,omitempty"`

		// ReferringProvider A list of provider identifiers for the referring provider (PV1-8)
		ReferringProvider *[]struct {
			// FamilyName Provider last name (XCN.2)
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name (XCN.3)
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number (XCN.1)
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"referringProvider,omitempty"`

		// TriggerEvent ADT Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`

		// VisitId Visit Id (PV1-19 for Epic, PID-18 for Cerner)
		VisitId *struct {
			// Id Visit Id (PV1-19.1 for Epic, PID-18.1 for Cerner)
			Id *string `json:"id,omitempty"`

			// Type Visit Id Type ('CSN' for Epic, PID-18.4 for Cerner)
			Type *string `json:"type,omitempty"`
		} `json:"visitId,omitempty"`

		// VisitLevelPersonnel (Epic only) List of encounter level treatment team personnel information (ROL segments after PVI/PV2)
		VisitLevelPersonnel *[]struct {
			// PersonnelName List of names for this provider (ROL-4)
			PersonnelName *[]struct {
				// FamilyName Provider last name (XCN.2)
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name (XCN.3)
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number (XCN.1)
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"personnelName,omitempty"`

			// PersonnelRole Provider role (ROL-3)
			PersonnelRole *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"personnelRole,omitempty"`

			// ProviderType Provider type (ROL-9)
			ProviderType *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"providerType,omitempty"`

			// RoleBeginDate Treatment/Care team assignment start date (ROL-5)
			RoleBeginDate *time.Time `json:"roleBeginDate,omitempty"`

			// RoleEndDate Treatment/Care team assignment end date (ROL-6)
			RoleEndDate *time.Time `json:"roleEndDate,omitempty"`
		} `json:"visitLevelPersonnel,omitempty"`
	} `json:"admitDischargeTransferV1,omitempty"`

	// AppointmentOrderV1 HL7 SIU appointment data The appointmentOrderV1 dataset supports Epic only. Subscribers who want to receive this dataset from Cerner should use the appointmentOrderV2 dataset
	AppointmentOrderV1 *struct {
		// AdmitDateTime Admit Date/Time (PV1-45)
		AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

		// AdmittingProvider List of admitting provider (PV1-17)
		AdmittingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"admittingProvider,omitempty"`

		// AlternateVisitId Alternate Visit ID (PV1-50)
		AlternateVisitId *string `json:"alternateVisitId,omitempty"`

		// AppointmentDuration Appointment Duration (SCH-9)
		AppointmentDuration *float32 `json:"appointmentDuration,omitempty"`

		// AppointmentDurationUnit Appointment Duration Units (SCH-10)
		AppointmentDurationUnit *string `json:"appointmentDurationUnit,omitempty"`

		// AppointmentInformation List of appointment information
		AppointmentInformation *[]struct {
			// AppointmentLocation Object defining appointment location (RGS-3.X)
			AppointmentLocation *struct {
				// ResourceGroupId Resource group id (RGS-3.1)
				ResourceGroupId *string `json:"resourceGroupId,omitempty"`

				// ResourceGroupName Resource group name (RGS-3.2)
				ResourceGroupName *string `json:"resourceGroupName,omitempty"`
			} `json:"appointmentLocation,omitempty"`
			PersonnelProvider *[]struct {
				// Id Personnel id
				Id *string `json:"id,omitempty"`

				// Providers List of personnel provider
				Providers *[]struct {
					// FamilyName Provider last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"providers,omitempty"`

				// Text Personnel description
				Text *string `json:"text,omitempty"`
			} `json:"personnelProvider,omitempty"`

			// Services List of appointment services
			Services *[]struct {
				// DateTimeOfService Date time of appointment (AIS-4)
				DateTimeOfService *time.Time `json:"dateTimeOfService,omitempty"`

				// Service List of appointment service details
				Service *[]struct {
					// UniversalServiceIdentifierId Universal service identifier id | Epic: AIS-3.1 | Cerner: SCH-7.1
					UniversalServiceIdentifierId *string `json:"universalServiceIdentifierId,omitempty"`

					// UniversalServiceIdentifierText Universal service identifier text | Epic AIS-3.2 | Cerner: SCH-7.2
					UniversalServiceIdentifierText *string `json:"universalServiceIdentifierText,omitempty"`
				} `json:"service,omitempty"`
			} `json:"services,omitempty"`
		} `json:"appointmentInformation,omitempty"`

		// AppointmentStartDateTime Date/Time of Appointment (SCH-11.4)
		AppointmentStartDateTime *time.Time `json:"appointmentStartDateTime,omitempty"`

		// AssignedPatientLocation Hospital Location abbreviation (PV1-3.4)
		AssignedPatientLocation *struct {
			// NamespaceId Namespace id
			NamespaceId *string `json:"namespaceId,omitempty"`

			// UniversalId Universal id
			UniversalId *string `json:"universalId,omitempty"`

			// UniversalIdType Universal id type
			UniversalIdType *string `json:"universalIdType,omitempty"`
		} `json:"assignedPatientLocation,omitempty"`

		// AttendingProvider List of attending provider (PV1-7)
		AttendingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"attendingProvider,omitempty"`

		// CancelReason Cancel Reason (SCH-6)
		CancelReason *string `json:"cancelReason,omitempty"`

		// ConsultingProvider List of consulting provider (PV1-9)
		ConsultingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"consultingProvider,omitempty"`

		// DischargeDateTime Discharge Date/Time (PV1-45)
		DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

		// DischargeDisposition Discharge disposition (PV1-36)
		DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

		// FillerAppointmentId Appointment Serial Number (SCH-2)
		FillerAppointmentId *string `json:"fillerAppointmentId,omitempty"`

		// Handicap Handicap (PD1-6)
		Handicap *string `json:"handicap,omitempty"`

		// HospitalService Hospital service (PV1-10)
		HospitalService *string `json:"hospitalService,omitempty"`

		// MessageType SIU Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`
		Notes       *[]struct {
			// Comments Comment (NTE-3.3)
			Comments *[]string `json:"comments,omitempty"`

			// SetId Set Id  (NTE-3.1)
			SetId *string `json:"setId,omitempty"`

			// SourceOfComment Source of comment (NTE-3.2)
			SourceOfComment *string `json:"sourceOfComment,omitempty"`
		} `json:"notes,omitempty"`

		// PatientAccountNumber Patient Account Number OR CSN (PID-18)
		PatientAccountNumber *string `json:"patientAccountNumber,omitempty"`

		// PatientClass Patient class (PV1-2)
		PatientClass *string `json:"patientClass,omitempty"`

		// PatientDeathIndicator Patient Death Indicator (PID-30)
		PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

		// PatientIdList Patient identifier list (PID-3.1/PID-3.5)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientType Patient type (PV1-18)
		PatientType *string `json:"patientType,omitempty"`

		// PrimaryCareProvider List of primary care provider (PD1-4)
		PrimaryCareProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"primaryCareProvider,omitempty"`

		// ReferringProvider List of referring provider (PV1-8)
		ReferringProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"referringProvider,omitempty"`

		// SchedulingStatusId Appointment Status ID (SCH-25.1)
		SchedulingStatusId *string `json:"schedulingStatusId,omitempty"`

		// SchedulingStatusText Appointment Status Text (SCH-25.2)
		SchedulingStatusText *string `json:"schedulingStatusText,omitempty"`

		// TriggerEvent SIU Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`

		// VisitNumber Visit number (PV1-19)
		VisitNumber *string `json:"visitNumber,omitempty"`
	} `json:"appointmentOrderV1,omitempty"`

	// AppointmentOrderV2 HL7 SIU appointment data agnostic to ehr vendor (cerner/epic)
	AppointmentOrderV2 *struct {
		// AdmitDateTime Admit Date/Time (PV1-44)
		AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

		// AdmittingProvider List of admitting provider (PV1-17) | identifierTypeCode - Epic (PV1-17.13) | Cerner (PV1-17.9)
		AdmittingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"admittingProvider,omitempty"`

		// AlternateVisitId Alternate Visit ID (PV1-50)
		AlternateVisitId *string `json:"alternateVisitId,omitempty"`

		// AppointmentDuration Appointment Duration (SCH-9)
		AppointmentDuration *float32 `json:"appointmentDuration,omitempty"`

		// AppointmentDurationUnit Appointment Duration Units (SCH-10)
		AppointmentDurationUnit *string `json:"appointmentDurationUnit,omitempty"`

		// AppointmentId Appointment Identifier | Epic (SCH-2) | Cerner (SCH-1)
		AppointmentId *string `json:"appointmentId,omitempty"`

		// AppointmentInformation List of appointment information
		AppointmentInformation *[]struct {
			// AppointmentLocation Object defining appointment location - CERNER ONLY
			AppointmentLocation *struct {
				// Building Building AIL-3.7
				Building *struct {
					// NamespaceId Namespace id
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId Universal id
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType Universal id type
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"building,omitempty"`

				// Department Department AIL-3.1
				Department *struct {
					// NamespaceId Namespace id
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId Universal id
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType Universal id type
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"department,omitempty"`

				// Facility Facility AIL-3.4
				Facility *struct {
					// NamespaceId Namespace id
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId Universal id
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType Universal id type
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"facility,omitempty"`
			} `json:"appointmentLocation,omitempty"`

			// DepartmentId Epic RGS-3.1 | Cerner - Not supported (use AppointmentLocation)
			DepartmentId *string `json:"departmentId,omitempty"`

			// DepartmentName Epic RGS-3.2 | Cerner - Not supported (use AppointmentLocation)
			DepartmentName *string `json:"departmentName,omitempty"`

			// PersonnelProvider List of Personnel Provider
			PersonnelProvider *[]struct {
				// Providers List of personnel provider | identifierTypeCode - Epic AIP-3.13 | Cerner AIP-3.9
				Providers *[]struct {
					// FamilyName Provider last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"providers,omitempty"`
				ResourceRole *struct {
					// Identifier Personnel id AIP-4.1
					Identifier *string `json:"identifier,omitempty"`

					// Text Personnel description AIP-4.2
					Text *string `json:"text,omitempty"`
				} `json:"resourceRole,omitempty"`
			} `json:"personnelProvider,omitempty"`

			// Services List of appointment services
			Services *[]struct {
				// Service List of appointment service details
				Service *[]struct {
					// UniversalServiceIdentifierId Universal service identifier id | Epic: AIS-3.1 | Cerner: SCH-7.1
					UniversalServiceIdentifierId *string `json:"universalServiceIdentifierId,omitempty"`

					// UniversalServiceIdentifierText Universal service identifier text | Epic AIS-3.2 | Cerner: SCH-7.2
					UniversalServiceIdentifierText *string `json:"universalServiceIdentifierText,omitempty"`
				} `json:"service,omitempty"`

				// StartDateTime Date time of appointment (AIS-4)
				StartDateTime *time.Time `json:"startDateTime,omitempty"`
			} `json:"services,omitempty"`
		} `json:"appointmentInformation,omitempty"`

		// AppointmentStartDateTime Date/Time of Appointment (SCH-11.4)
		AppointmentStartDateTime *time.Time `json:"appointmentStartDateTime,omitempty"`

		// AssignedPatientLocation Appointment Patient Location (PV1-3)
		AssignedPatientLocation *struct {
			// Building Building (PV1-3.7) - (often not populated)
			Building *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"building,omitempty"`

			// Department Department (PV1-3.1)
			Department *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"department,omitempty"`

			// Facility Facility (PV1-3.4)
			Facility *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"facility,omitempty"`
		} `json:"assignedPatientLocation,omitempty"`

		// AttendingProvider List of attending provider (PV1-7) | identifierTypeCode - Epic (PV1-7.13) | Cerner (PV1-7.9)
		AttendingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"attendingProvider,omitempty"`

		// CancelReason Cancel Reason (SCH-6)
		CancelReason *string `json:"cancelReason,omitempty"`

		// ConsultingProvider List of consulting provider (PV1-9) | identifierTypeCode - Epic (PV1-9.13) | Cerner (PV1-9.9)
		ConsultingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"consultingProvider,omitempty"`

		// DischargeDateTime Discharge Date/Time (PV1-45)
		DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

		// DischargeDisposition Discharge disposition (PV1-36)
		DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

		// Handicap Handicap (PD1-6)
		Handicap *string `json:"handicap,omitempty"`

		// HospitalService Hospital service (PV1-10)
		HospitalService *string `json:"hospitalService,omitempty"`

		// MessageType SIU Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`
		Notes       *[]struct {
			// Comments Comment (NTE-3.3)
			Comments *[]string `json:"comments,omitempty"`

			// SetId Set Id  (NTE-3.1)
			SetId *string `json:"setId,omitempty"`

			// SourceOfComment Source of comment (NTE-3.2)
			SourceOfComment *string `json:"sourceOfComment,omitempty"`
		} `json:"notes,omitempty"`

		// PatientClass Patient class (PV1-2)
		PatientClass *string `json:"patientClass,omitempty"`

		// PatientDeathIndicator Patient Death Indicator (PID-30)
		PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

		// PatientIdList Patient identifier list | Epic (PID-3.1/PID-3.5) | Cerner (PID-3.1/PID-3.4)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientType Patient type (PV1-18)
		PatientType *string `json:"patientType,omitempty"`

		// PrimaryCareProvider List of primary care provider (PD1-4) | identifierTypeCode - Epic (PD1-4.13) | Cerner (PD1-4.9)
		PrimaryCareProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"primaryCareProvider,omitempty"`

		// ReferringProvider List of referring provider (PV1-8) | identifierTypeCode - Epic (PV1-8.13) | Cerner (PV1-8.9)
		ReferringProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"referringProvider,omitempty"`

		// SchedulingStatusId Appointment Status ID (SCH-25.1)
		SchedulingStatusId *string `json:"schedulingStatusId,omitempty"`

		// SchedulingStatusText Appointment Status Text (SCH-25.2)
		SchedulingStatusText *string `json:"schedulingStatusText,omitempty"`

		// TriggerEvent SIU Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`

		// VisitId Epic (PV1-19/CSN); CSN is Hardcoded | Cerner (PID-18.1/PID-18.4); PID 18.4 is alias of the alias pool
		VisitId *struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"visitId,omitempty"`
	} `json:"appointmentOrderV2,omitempty"`

	// CoverageV1 Visit level coverage data. The dataset will include the latest insurance information we have received which was associated with the same visit as the order. The coverageV1 dataset is sourced exclusively from HL7 messages via the IN1 segment in ADT A03, A04, and A08 messages
	CoverageV1 *[]struct {
		// CompanyPlanCode Company Plan Code (IN1-35)
		CompanyPlanCode *string `json:"companyPlanCode,omitempty"`

		// CoverageType Coverage Type (IN1-47)
		CoverageType *string `json:"coverageType,omitempty"`

		// FilingOrder Coord Of Ben. Priority (IN1-22)
		FilingOrder *string `json:"filingOrder,omitempty"`

		// Group Object defining coverage group information
		Group *struct {
			// GroupEmployerName Cerner ONLY - Insured's Group Emp Organization Name (IN1-11.0.1)
			GroupEmployerName *string `json:"groupEmployerName,omitempty"`

			// GroupName Insured's Group Name (IN1-9.0.1)
			GroupName *[]string `json:"groupName,omitempty"`

			// GroupNumber Group Number (IN1-8.1)
			GroupNumber *string `json:"groupNumber,omitempty"`
		} `json:"group,omitempty"`

		// InsuredIndividual Object defining coverage insured individual information
		InsuredIndividual *struct {
			// AdministrativeSex Insured's Administrative Sex (IN1-43)
			AdministrativeSex *string `json:"administrativeSex,omitempty"`

			// EmploymentStatus Insured's Employment Status (IN1-42.1)
			EmploymentStatus *string `json:"employmentStatus,omitempty"`

			// IdNumber Insured's ID Number (IN1-49)
			IdNumber *string `json:"idNumber,omitempty"`
		} `json:"insuredIndividual,omitempty"`

		// Payor Object defining coverage payor information
		Payor *struct {
			// Address Insurance Company Address (IN1-5.0)
			Address *[]struct {
				// City City name
				City *string `json:"city,omitempty"`

				// Country Country name
				Country *string `json:"country,omitempty"`

				// District District name
				District *string `json:"district,omitempty"`

				// Line List of street name, number, direction & P.O. Box etc
				Line *[]string `json:"line,omitempty"`

				// PostalCode Postal code for area
				PostalCode *string `json:"postalCode,omitempty"`

				// State State name or abbreviation
				State *string `json:"state,omitempty"`

				// Text Full address
				Text *string `json:"text,omitempty"`
			} `json:"address,omitempty"`

			// Id Insurance Company ID (IN1-3.0.1)
			Id *[]string `json:"id,omitempty"`

			// Name Insurance Company Name (IN1-4.0.1)
			Name *[]string `json:"name,omitempty"`
		} `json:"payor,omitempty"`

		// Plan Object defining coverage plan information
		Plan *struct {
			// EffectiveDate Plan Effective Date (IN1-12)
			EffectiveDate *string `json:"effectiveDate,omitempty"`

			// ExpirationDate Plan Expiration Date (IN1-13)
			ExpirationDate *string `json:"expirationDate,omitempty"`

			// Id Insurance Plan ID (IN1-2.1)
			Id *string `json:"id,omitempty"`

			// Name Insurance Plan ID Name (IN1-2.2)
			Name *string `json:"name,omitempty"`

			// Type Plan Type (IN1-15)
			Type *string `json:"type,omitempty"`
		} `json:"plan,omitempty"`

		// Subscriber Object defining coverage subscriber information
		Subscriber *struct {
			// Address Insured's Address (IN1-19.0)
			Address *[]struct {
				// City City name
				City *string `json:"city,omitempty"`

				// Country Country name
				Country *string `json:"country,omitempty"`

				// District District name
				District *string `json:"district,omitempty"`

				// Line List of street name, number, direction & P.O. Box etc
				Line *[]string `json:"line,omitempty"`

				// PostalCode Postal code for area
				PostalCode *string `json:"postalCode,omitempty"`

				// State State name or abbreviation
				State *string `json:"state,omitempty"`

				// Text Full address
				Text *string `json:"text,omitempty"`
			} `json:"address,omitempty"`

			// DateOfBirth Insured's Date Of Birth (IN1-18.1)
			DateOfBirth *string `json:"dateOfBirth,omitempty"`

			// Id Policy Number (IN1-36)
			Id *string `json:"id,omitempty"`

			// Name Name Of Insured (IN1-16.0)
			Name *[]struct {
				// FamilyName Individual last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Individual first name
				GivenName *string `json:"givenName,omitempty"`

				// NameTypeCode Individual relationship to patient
				NameTypeCode *string `json:"nameTypeCode,omitempty"`
			} `json:"name,omitempty"`

			// RelationshipToPatient Insured's Relationship To Patient (IN1-17.1)
			RelationshipToPatient *string `json:"relationshipToPatient,omitempty"`
		} `json:"subscriber,omitempty"`

		// VerificationStatus Verification Status (IN1-45)
		VerificationStatus *string `json:"verificationStatus,omitempty"`
	} `json:"coverageV1,omitempty"`

	// DemographicsV1 Patient demographics data
	DemographicsV1 *struct {
		Address *[]struct {
			// City City name
			City *string `json:"city,omitempty"`

			// Country Country name
			Country *string `json:"country,omitempty"`

			// District District name
			District *string `json:"district,omitempty"`

			// Line List of street name, number, direction & P.O. Box etc
			Line *[]string `json:"line,omitempty"`

			// PostalCode Postal code for area
			PostalCode *string `json:"postalCode,omitempty"`

			// State State name or abbreviation
			State *string `json:"state,omitempty"`

			// Text Full address
			Text *string `json:"text,omitempty"`
		} `json:"address,omitempty"`

		// BirthDate Date of birth
		BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

		// DeceasedBoolean Indicates whether individual is deceased or not
		DeceasedBoolean *bool `json:"deceasedBoolean,omitempty"`

		// Gender Current assigned sex
		Gender *DataSetsDemographicsV1Gender `json:"gender,omitempty"`

		// HistoricalIds List of the historical identifiers related to the patient
		HistoricalIds *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"historicalIds,omitempty"`

		// Ids List of the current identifiers related to the patient
		Ids *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"ids,omitempty"`

		// Name Object naming the individual
		Name *struct {
			// Family List of last name
			Family *[]string `json:"family,omitempty"`

			// Given List of first name
			Given *[]string `json:"given,omitempty"`

			// Prefix List of Prefix or title
			Prefix *[]string `json:"prefix,omitempty"`

			// Suffix List of suffix or post-nominal
			Suffix *[]string `json:"suffix,omitempty"`

			// Text Full name
			Text *string `json:"text,omitempty"`

			// Use Patients are set to ‘usual’ and providers set to ‘official’
			Use *DataSetsDemographicsV1NameUse `json:"use,omitempty"`
		} `json:"name,omitempty"`

		// NameList List of names associated with the patient
		NameList *[]struct {
			// Family List of last name
			Family *[]string `json:"family,omitempty"`

			// Given List of first name
			Given *[]string `json:"given,omitempty"`

			// Prefix List of Prefix or title
			Prefix *[]string `json:"prefix,omitempty"`

			// Suffix List of suffix or post-nominal
			Suffix *[]string `json:"suffix,omitempty"`

			// Text Full name
			Text *string `json:"text,omitempty"`

			// Use The iteration where use is set to "official" is the patient's legal name. The iteration where use is set to "usual"  contains the patient's preferred name if returned by the source EHR. If no iteration with a use set to "usual" is present, no preferred name was returned by the source EHR.
			Use *DataSetsDemographicsV1NameListUse `json:"use,omitempty"`
		} `json:"nameList,omitempty"`

		// PreferredLanguage Patient's abbreviated preferred language as defined by the EHR
		PreferredLanguage *string `json:"preferredLanguage,omitempty"`

		// PreferredLanguageTitle Patient's preferred language as defined by the EHR
		PreferredLanguageTitle *string `json:"preferredLanguageTitle,omitempty"`
		Telecom                *[]struct {
			// Rank Preferred order of use (1 = highest)
			Rank *float32 `json:"rank,omitempty"`

			// System Contact method
			System *DataSetsDemographicsV1TelecomSystem `json:"system,omitempty"`

			// Use Contact purpose
			Use *DataSetsDemographicsV1TelecomUse `json:"use,omitempty"`

			// Value Contact detail
			Value *string `json:"value,omitempty"`
		} `json:"telecom,omitempty"`
	} `json:"demographicsV1,omitempty"`

	// DischargeV1 HL7 ADT discharge data. Note: this dataset is Epic-only. It is recommended that new integrations utilize the admitDischargeTransferV1 dataset instead, as it supports Cerner as well.
	DischargeV1 *struct {
		// AdditionalDemographics Object defining additional demographic information
		AdditionalDemographics *struct {
			// Handicap Handicap (PD1-6)
			Handicap *string `json:"handicap,omitempty"`

			// PrimaryCareProvider List of patient's primary care providers (PD1-4)
			PrimaryCareProvider *[]struct {
				// AssigningAuthority Assigning authority
				AssigningAuthority *string `json:"assigningAuthority,omitempty"`

				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"primaryCareProvider,omitempty"`
		} `json:"additionalDemographics,omitempty"`

		// DiagnosisInformation List of diagnosis information
		DiagnosisInformation *[]struct {
			// Code A reference to a code defined by a terminology system
			Code *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"code,omitempty"`

			// CodingMethod Diagnosis coding method (DG1-2)
			CodingMethod *string `json:"codingMethod,omitempty"`

			// DateTime Diagnosis date/time (DG1-5)
			DateTime *time.Time `json:"dateTime,omitempty"`

			// Description Diagnosis description (DG1-4)
			Description *string `json:"description,omitempty"`

			// PresentOnAdmission Diagnosis present on admission (DG1-26)
			PresentOnAdmission *string `json:"presentOnAdmission,omitempty"`
		} `json:"diagnosisInformation,omitempty"`

		// GuarantorInformation List of guarantor information
		GuarantorInformation *[]struct {
			// EmployerName Guarantor employer name (GT1-16)
			EmployerName *string `json:"employerName,omitempty"`

			// Name Object defining individual
			Name *struct {
				// FamilyName Individual last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Individual first name
				GivenName *string `json:"givenName,omitempty"`

				// NameTypeCode Individual relationship to patient
				NameTypeCode *string `json:"nameTypeCode,omitempty"`
			} `json:"name,omitempty"`

			// Relationship Guarantor relationship to patient (GT1-11)
			Relationship *string `json:"relationship,omitempty"`

			// Type Guarantor type (GT1-10)
			Type *string `json:"type,omitempty"`
		} `json:"guarantorInformation,omitempty"`

		// MessageType ADT Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`

		// PatientIdList Patient identifier list (PID-3.1/PID-3.5)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientIdentificationAdditionalInformation Object defining additional patient information (ZPD-X)
		PatientIdentificationAdditionalInformation *struct {
			// ExpectedDeliveryDate Expected delivery date
			ExpectedDeliveryDate *string `json:"expectedDeliveryDate,omitempty"`

			// MultipleBirthTotal Multiple birth indicator (ZPD-3)
			MultipleBirthTotal *string `json:"multipleBirthTotal,omitempty"`

			// MyChartStatus MyChart activation status (ZPD-4)
			MyChartStatus *string `json:"myChartStatus,omitempty"`

			// PreferredCommunicationMethod List of patient preferred communication method (ZPD-2)
			PreferredCommunicationMethod *[]string `json:"preferredCommunicationMethod,omitempty"`

			// PregnancyFlag Pregnancy flag (ZPD-7)
			PregnancyFlag *string `json:"pregnancyFlag,omitempty"`

			// TransplantPatientFlag Transplant patient flag
			TransplantPatientFlag *string `json:"transplantPatientFlag,omitempty"`
		} `json:"patientIdentificationAdditionalInformation,omitempty"`

		// PatientLevelPersonnel List of patient level care team personnel information (ROL segments after PID)
		PatientLevelPersonnel *[]struct {
			// PersonnelName Object defining provider information
			PersonnelName *struct {
				// AssigningAuthority Assigning authority
				AssigningAuthority *string `json:"assigningAuthority,omitempty"`

				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"personnelName,omitempty"`

			// PersonnelRole A reference to a code defined by a terminology system
			PersonnelRole *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"personnelRole,omitempty"`

			// ProviderType A reference to a code defined by a terminology system
			ProviderType *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"providerType,omitempty"`

			// RoleBeginDate Treatment/Care team assignment start date
			RoleBeginDate *time.Time `json:"roleBeginDate,omitempty"`

			// RoleEndDate Treatment/Care team assignment end date
			RoleEndDate *time.Time `json:"roleEndDate,omitempty"`
		} `json:"patientLevelPersonnel,omitempty"`

		// PatientVisit Object defining patient visit information (PV1-X)
		PatientVisit *struct {
			// AdmitDateTime Admit date/time (PV1-44)
			AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

			// AdmittingDoctor List of admitting providers (PV1-17)
			AdmittingDoctor *[]struct {
				// AssigningAuthority Assigning authority
				AssigningAuthority *string `json:"assigningAuthority,omitempty"`

				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"admittingDoctor,omitempty"`

			// AssignedPatientLocation Hospital location abbreviation (PV1-3.4)
			AssignedPatientLocation *string `json:"assignedPatientLocation,omitempty"`

			// AttendingDoctor List of attending providers (PV1-7)
			AttendingDoctor *[]struct {
				// AssigningAuthority Assigning authority
				AssigningAuthority *string `json:"assigningAuthority,omitempty"`

				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"attendingDoctor,omitempty"`

			// DischargeDateTime Discharge date/time (PV1-45)
			DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

			// DischargeDestination Discharge destination (PV1-37)
			DischargeDestination *string `json:"dischargeDestination,omitempty"`

			// DischargeDisposition Discharge disposition (PV1-36)
			DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

			// HospitalService Hospital service (PV1-10)
			HospitalService *string `json:"hospitalService,omitempty"`

			// PatientClass Patient class (PV1-2)
			PatientClass *string `json:"patientClass,omitempty"`

			// PatientDeathIndicator Patient death indicator (PID-30)
			PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

			// VipIndicator VIP indicator (PV1-16)
			VipIndicator *string `json:"vipIndicator,omitempty"`

			// VisitNumber Visit number
			VisitNumber *string `json:"visitNumber,omitempty"`
		} `json:"patientVisit,omitempty"`

		// PatientVisitAdditionalInformation Object defining additional patient visit information (PV2-3)
		PatientVisitAdditionalInformation *struct {
			// AdmitReason A reference to a code defined by a terminology system
			AdmitReason *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"admitReason,omitempty"`

			// LastMenstrualPeroid Last menstrual period (ZPV-6)
			LastMenstrualPeroid *string `json:"lastMenstrualPeroid,omitempty"`
		} `json:"patientVisitAdditionalInformation,omitempty"`

		// TriggerEvent ADT Trigger Event ID (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`

		// VisitLevelPersonnel List of encounter level treatment team personnel information (ROL segments after PVI/PV2)
		VisitLevelPersonnel *[]struct {
			// PersonnelName Object defining provider information
			PersonnelName *struct {
				// AssigningAuthority Assigning authority
				AssigningAuthority *string `json:"assigningAuthority,omitempty"`

				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"personnelName,omitempty"`

			// PersonnelRole A reference to a code defined by a terminology system
			PersonnelRole *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"personnelRole,omitempty"`

			// ProviderType A reference to a code defined by a terminology system
			ProviderType *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"providerType,omitempty"`

			// RoleBeginDate Treatment/Care team assignment start date
			RoleBeginDate *time.Time `json:"roleBeginDate,omitempty"`

			// RoleEndDate Treatment/Care team assignment end date
			RoleEndDate *time.Time `json:"roleEndDate,omitempty"`
		} `json:"visitLevelPersonnel,omitempty"`
	} `json:"dischargeV1,omitempty"`

	// EhrUserV1 EHR user currently initiating the activity within Xealth
	EhrUserV1 *struct {
		// FirstName First name
		FirstName *string `json:"firstName,omitempty"`

		// LastName Last name
		LastName *string `json:"lastName,omitempty"`

		// ProviderId EHR provider record (SER .1)
		ProviderId *string `json:"providerId,omitempty"`

		// ProviderNPI National Provider Identifer
		ProviderNPI *string `json:"providerNPI,omitempty"`

		// ProviderType EHR provider record type (SER 1040)
		ProviderType *string `json:"providerType,omitempty"`

		// SystemLogin Login identifier (EMP 45)
		SystemLogin *string `json:"systemLogin,omitempty"`

		// UserId EHR identifer (EMP .1)
		UserId *string `json:"userId,omitempty"`
	} `json:"ehrUserV1,omitempty"`

	// EncounterLocationV1 Location tied to the Encounter
	EncounterLocationV1 *struct {
		// Display Location full name
		Display *string `json:"display,omitempty"`

		// FhirId Location FHIR identifier
		FhirId *string `json:"fhirId,omitempty"`
	} `json:"encounterLocationV1,omitempty"`

	// EncounterV1 Encounter level data
	EncounterV1 *struct {
		// AttendingProvider Object defining practitioner information
		AttendingProvider *struct {
			// Identifier List of practitioner identifiers
			Identifier *[]struct {
				// Type Description of identifier
				Type *struct {
					// Text Plain text representation of the identifier
					Text *string `json:"text,omitempty"`
				} `json:"type,omitempty"`

				// Value Unique identifier value
				Value *string `json:"value,omitempty"`
			} `json:"identifier,omitempty"`

			// Name List of practitioner names
			Name *[]struct {
				// Family List of last name
				Family *[]string `json:"family,omitempty"`

				// Given List of first name
				Given *[]string `json:"given,omitempty"`

				// Prefix List of Prefix or title
				Prefix *[]string `json:"prefix,omitempty"`

				// Suffix List of suffix or post-nominal
				Suffix *[]string `json:"suffix,omitempty"`

				// Text Full name
				Text *string `json:"text,omitempty"`

				// Use Patients are set to ‘usual’ and providers set to ‘official’
				Use *DataSetsEncounterV1AttendingProviderNameUse `json:"use,omitempty"`
			} `json:"name,omitempty"`
		} `json:"attendingProvider,omitempty"`

		// EncounterLocation Location tied to the Encounter
		EncounterLocation *struct {
			// Display Location full name
			Display *string `json:"display,omitempty"`

			// FhirId Location FHIR identifier
			FhirId *string `json:"fhirId,omitempty"`
		} `json:"encounterLocation,omitempty"`

		// EncounterPointOfCare Object defining ‘department’ Epic or 'unit' in Cerner
		EncounterPointOfCare *struct {
			// Address Object defining address information
			Address *struct {
				// City City name
				City *string `json:"city,omitempty"`

				// Country Country name
				Country *string `json:"country,omitempty"`

				// District District name
				District *string `json:"district,omitempty"`

				// Line List of street name, number, direction & P.O. Box etc
				Line *[]string `json:"line,omitempty"`

				// PostalCode Postal code for area
				PostalCode *string `json:"postalCode,omitempty"`

				// State State name or abbreviation
				State *string `json:"state,omitempty"`

				// Text Full address
				Text *string `json:"text,omitempty"`
			} `json:"address,omitempty"`

			// Alias List of aliases of department or unit
			Alias *[]string `json:"alias,omitempty"`

			// Identifier List of department or unit identifiers
			Identifier *[]struct {
				// Type Description of identifier
				Type *struct {
					// Text Plain text representation of the identifier
					Text *string `json:"text,omitempty"`
				} `json:"type,omitempty"`

				// Value Unique identifier value
				Value *string `json:"value,omitempty"`
			} `json:"identifier,omitempty"`

			// Name Name of department or unit
			Name *string `json:"name,omitempty"`

			// Telecom List of contact information of department or unit
			Telecom *[]struct {
				// Rank Preferred order of use (1 = highest)
				Rank *float32 `json:"rank,omitempty"`

				// System Contact method
				System *DataSetsEncounterV1EncounterPointOfCareTelecomSystem `json:"system,omitempty"`

				// Use Contact purpose
				Use *DataSetsEncounterV1EncounterPointOfCareTelecomUse `json:"use,omitempty"`

				// Value Contact detail
				Value *string `json:"value,omitempty"`
			} `json:"telecom,omitempty"`
		} `json:"encounterPointOfCare,omitempty"`

		// VisitId Object defining visit identifier; only intended to be used for manual orders
		VisitId *struct {
			// Id CSN for the visit for Epic | FIN NBR for the visit for Cerner
			Id *string `json:"id,omitempty"`

			// Type 'CSN' is hardcoded for Epic | OID of the alias pool associated with the FIN for Cerner
			Type *string `json:"type,omitempty"`
		} `json:"visitId,omitempty"`
	} `json:"encounterV1,omitempty"`

	// MaternityPregnancyCernerV1 Cerner maternity information
	MaternityPregnancyCernerV1 *struct {
		// EstimatedDeliveryDates List of estimated delivery dates
		EstimatedDeliveryDates *[]struct {
			// Category Object defining a codeable concept information
			Category *struct {
				// Coding List of codes defined by a terminology system
				Coding *[]struct {
					// Code Symbol in syntax defined by the system
					Code *string `json:"code,omitempty"`

					// Extension Object defining optional extension elements
					Extension *struct {
						// Url Identifies the meaning of the extension
						Url *string `json:"url,omitempty"`

						// ValueCode Value of extension
						ValueCode *string `json:"valueCode,omitempty"`
					} `json:"extension,omitempty"`

					// System Identity of the terminology system
					System *string `json:"system,omitempty"`
				} `json:"coding,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"category,omitempty"`

			// Code Object defining a codeable concept information
			Code *struct {
				// Coding List of codes defined by a terminology system
				Coding *[]struct {
					// Code Symbol in syntax defined by the system
					Code *string `json:"code,omitempty"`

					// Extension Object defining optional extension elements
					Extension *struct {
						// Url Identifies the meaning of the extension
						Url *string `json:"url,omitempty"`

						// ValueCode Value of extension
						ValueCode *string `json:"valueCode,omitempty"`
					} `json:"extension,omitempty"`

					// System Identity of the terminology system
					System *string `json:"system,omitempty"`
				} `json:"coding,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"code,omitempty"`

			// EffectiveDateTime Clinically relevant time/time-period for observation
			EffectiveDateTime *string `json:"effectiveDateTime,omitempty"`

			// ValueDateTime Actual date/time of the estimated delivery date
			ValueDateTime *time.Time `json:"valueDateTime,omitempty"`
		} `json:"estimatedDeliveryDates,omitempty"`
	} `json:"maternityPregnancyCernerV1,omitempty"`

	// MaternityPregnancyEpicV1 Epic maternity information
	MaternityPregnancyEpicV1 *struct {
		// Children List of children associated with the patient
		Children *[]struct {
			// Ids List of the current identifiers related to the child
			Ids *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"ids,omitempty"`

			// Name Object naming the individual
			Name *struct {
				// Family List of last name
				Family *[]string `json:"family,omitempty"`

				// Given List of first name
				Given *[]string `json:"given,omitempty"`

				// Prefix List of Prefix or title
				Prefix *[]string `json:"prefix,omitempty"`

				// Suffix List of suffix or post-nominal
				Suffix *[]string `json:"suffix,omitempty"`

				// Text Full name
				Text *string `json:"text,omitempty"`

				// Use Patients are set to ‘usual’ and providers set to ‘official’
				Use *DataSetsMaternityPregnancyEpicV1ChildrenNameUse `json:"use,omitempty"`
			} `json:"name,omitempty"`

			// ProxyExpiration Date proxy relationship ends
			ProxyExpiration *openapi_types.Date `json:"proxyExpiration,omitempty"`

			// ProxyRelationship Defines proxy relationship
			ProxyRelationship *string `json:"proxyRelationship,omitempty"`

			// Type Defines relationship between patient and child
			Type *DataSetsMaternityPregnancyEpicV1ChildrenType `json:"type,omitempty"`
		} `json:"children,omitempty"`

		// Pregnant Indicates whether patient is currently pregnant
		Pregnant *DataSetsMaternityPregnancyEpicV1Pregnant `json:"pregnant,omitempty"`
	} `json:"maternityPregnancyEpicV1,omitempty"`

	// MaternityPregnancyV2 Universal maternity information (applies to Health Systems using either Cerner or Epic AppOrchard)
	MaternityPregnancyV2 *struct {
		// EstimatedDeliveryDates List of estimated delivery dates (sourced from Observation.Search (STU2) for Cerner and Observation.Search (Obstetric Details) (R4) for Epic)
		EstimatedDeliveryDates *[]struct {
			// Category Object defining a codeable concept information
			Category *struct {
				// Coding List of codes defined by a terminology system
				Coding *[]struct {
					// Code Symbol in syntax defined by the system
					Code *string `json:"code,omitempty"`

					// Extension Object defining optional extension elements
					Extension *struct {
						// Url Identifies the meaning of the extension
						Url *string `json:"url,omitempty"`

						// ValueCode Value of extension
						ValueCode *string `json:"valueCode,omitempty"`
					} `json:"extension,omitempty"`

					// System Identity of the terminology system
					System *string `json:"system,omitempty"`
				} `json:"coding,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"category,omitempty"`

			// Code Object defining a codeable concept information
			Code *struct {
				// Coding List of codes defined by a terminology system
				Coding *[]struct {
					// Code Symbol in syntax defined by the system
					Code *string `json:"code,omitempty"`

					// Extension Object defining optional extension elements
					Extension *struct {
						// Url Identifies the meaning of the extension
						Url *string `json:"url,omitempty"`

						// ValueCode Value of extension
						ValueCode *string `json:"valueCode,omitempty"`
					} `json:"extension,omitempty"`

					// System Identity of the terminology system
					System *string `json:"system,omitempty"`
				} `json:"coding,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"code,omitempty"`

			// EffectiveDateTime Clinically relevant time/time-period for observation
			EffectiveDateTime *string `json:"effectiveDateTime,omitempty"`

			// ValueDateTime Actual date/time of the estimated delivery date
			ValueDateTime *time.Time `json:"valueDateTime,omitempty"`
		} `json:"estimatedDeliveryDates,omitempty"`
	} `json:"maternityPregnancyV2,omitempty"`

	// ProblemListV1 Patient problem information
	ProblemListV1 *struct {
		// Problems List of problems
		Problems *[]struct {
			// Code Object defining condition or problem
			Code *struct {
				// Code Symbol in syntax defined by the system
				Code *string `json:"code,omitempty"`

				// System Identity of the terminology system
				System *string `json:"system,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"code,omitempty"`

			// OnsetPeriod Estimated date, date-time, or partial date the problem began and/or ceased.
			OnsetPeriod *struct {
				// End End of the time period, inclusive boundary. If end is missing, then the period is ongoing.
				End *time.Time `json:"end,omitempty"`

				// Start Start of the time period, inclusive boundary.
				Start *time.Time `json:"start,omitempty"`
			} `json:"onsetPeriod,omitempty"`

			// RecordedDate Date the problem was first recorded. Epic: Supported (Not recommended, use recordedDateTime instead); Cerner: Not Supported
			RecordedDate *openapi_types.Date `json:"recordedDate,omitempty"`

			// RecordedDateTime Date, date-time, or partial date the problem was first recorded.
			RecordedDateTime *time.Time `json:"recordedDateTime,omitempty"`
		} `json:"problems,omitempty"`
	} `json:"problemListV1,omitempty"`

	// SocialHistoryV1 Patient social history (smoking status)
	SocialHistoryV1 *struct {
		// SmokingStatus Object defining observation information
		SmokingStatus *struct {
			// Category Object defining condition or problem
			Category *struct {
				// Code Symbol in syntax defined by the system
				Code *string `json:"code,omitempty"`

				// System Identity of the terminology system
				System *string `json:"system,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"category,omitempty"`

			// Value Object defining condition or problem
			Value *struct {
				// Code Symbol in syntax defined by the system
				Code *string `json:"code,omitempty"`

				// System Identity of the terminology system
				System *string `json:"system,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"value,omitempty"`
		} `json:"smokingStatus,omitempty"`
	} `json:"socialHistoryV1,omitempty"`

	// SurgicalCaseEventV1 HL7 SIU surgery data
	SurgicalCaseEventV1 *struct {
		// CancelReason Cancel Reason (SCH-6)
		CancelReason *string `json:"cancelReason,omitempty"`

		// CaseNumber Case/Log number (SCH-2)
		CaseNumber *string `json:"caseNumber,omitempty"`

		// CaseProgressStatusId Case progress status ID (SCH-25.4)
		CaseProgressStatusId *string `json:"caseProgressStatusId,omitempty"`

		// CaseProgressStatusText Case progress status text (SCH-25.5)
		CaseProgressStatusText *string `json:"caseProgressStatusText,omitempty"`

		// CaseSchedulingStatusId Case scheduling status ID (SCH-25.1)
		CaseSchedulingStatusId *string `json:"caseSchedulingStatusId,omitempty"`

		// CaseSchedulingStatusText Case scheduling status text (SCH-25.2)
		CaseSchedulingStatusText *string `json:"caseSchedulingStatusText,omitempty"`

		// ContactSerialNumber Visit number (PV1-19)
		ContactSerialNumber *string `json:"contactSerialNumber,omitempty"`

		// DateTimeOfSurgery Date/Time of surgery (SCH-11.4)
		DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

		// HospitalLocationAbbreviation Hospital location abbreviation (PV1-3.4)
		HospitalLocationAbbreviation *string `json:"hospitalLocationAbbreviation,omitempty"`

		// Laterality Laterality (AIS-12)
		Laterality *string `json:"laterality,omitempty"`

		// MessageType SIU Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`

		// OriginalCaseNumber Original case/log number (SCH-24)
		OriginalCaseNumber *string `json:"originalCaseNumber,omitempty"`

		// PatientIdList Patient identifier list (PID-3.1/PID-3.5)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientType Patient type (PV1-2)
		PatientType *string `json:"patientType,omitempty"`

		// SurgicalProcedureLocations List of surgical procedure location information
		SurgicalProcedureLocations *[]struct {
			// LocationId Case location ID (AIL-3.2)
			LocationId *string `json:"locationId,omitempty"`

			// LocationName Case location name (AIL-3.4)
			LocationName *string `json:"locationName,omitempty"`
		} `json:"surgicalProcedureLocations,omitempty"`

		// SurgicalProcedures List of surgical procedure information
		SurgicalProcedures *[]struct {
			// DateTimeOfSurgery Date/Time of surgery (AIS-4)
			DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

			// SurgicalProcedureId Surgical procedure ID (AIS-3.1)
			SurgicalProcedureId *string `json:"surgicalProcedureId,omitempty"`

			// SurgicalProcedureName Surgical procedure name (AIS-3.2)
			SurgicalProcedureName *string `json:"surgicalProcedureName,omitempty"`
		} `json:"surgicalProcedures,omitempty"`

		// SurgicalService Surgical service (PV1-10)
		SurgicalService *string `json:"surgicalService,omitempty"`

		// SurgicalStaffPersonnel List of surgical staff personnel information
		SurgicalStaffPersonnel *[]struct {
			// PersonnelId List of provider identifiers (AIP-3.1)
			PersonnelId *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"personnelId,omitempty"`

			// PersonnelName Name of provider
			PersonnelName *struct {
				// Family Provider last name (AIP-3.2)
				Family *string `json:"family,omitempty"`

				// Given Provider first name (AIP-3.3)
				Given *string `json:"given,omitempty"`
			} `json:"personnelName,omitempty"`

			// PersonnelRole Provider role (AIP-4.2)
			PersonnelRole *string `json:"personnelRole,omitempty"`
		} `json:"surgicalStaffPersonnel,omitempty"`

		// TriggerEvent SIU Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`
	} `json:"surgicalCaseEventV1,omitempty"`

	// SurgicalCaseEventV2 HL7 SIU surgery data
	SurgicalCaseEventV2 *struct {
		// CancelReason Cancel Reason (SCH-6)
		CancelReason *string `json:"cancelReason,omitempty"`

		// CaseNumber Case/Log number (SCH-2)
		CaseNumber *string `json:"caseNumber,omitempty"`

		// CaseProgressStatusId Case progress status ID (SCH-25.4)
		CaseProgressStatusId *string `json:"caseProgressStatusId,omitempty"`

		// CaseProgressStatusText Case progress status text (SCH-25.5)
		CaseProgressStatusText *string `json:"caseProgressStatusText,omitempty"`

		// CaseSchedulingStatusId Case scheduling status ID (SCH-25.1)
		CaseSchedulingStatusId *string `json:"caseSchedulingStatusId,omitempty"`

		// CaseSchedulingStatusText Case scheduling status text (SCH-25.2)
		CaseSchedulingStatusText *string `json:"caseSchedulingStatusText,omitempty"`

		// ContactSerialNumber Visit number (PV1-19)
		ContactSerialNumber *string `json:"contactSerialNumber,omitempty"`

		// DateTimeOfSurgery Date/Time of surgery (SCH-11.4)
		DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

		// HospitalLocationAbbreviation Hospital location abbreviation (PV1-3.4)
		HospitalLocationAbbreviation *string `json:"hospitalLocationAbbreviation,omitempty"`

		// MessageType SIU Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`

		// OriginalCaseNumber Original case/log number (SCH-24)
		OriginalCaseNumber *string `json:"originalCaseNumber,omitempty"`

		// PatientIdList Patient identifier list (PID-3.1/PID-3.5)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientType Patient type (PV1-2)
		PatientType *string `json:"patientType,omitempty"`

		// ResourceGroups Resource group list
		ResourceGroups *[]struct {
			// SurgicalProcedureLocations List of surgical procedure location information
			SurgicalProcedureLocations *[]struct {
				// LocationId Case location ID (AIL-3.2)
				LocationId *string `json:"locationId,omitempty"`

				// LocationName Case location name (AIL-3.4)
				LocationName *string `json:"locationName,omitempty"`
			} `json:"surgicalProcedureLocations,omitempty"`

			// SurgicalProcedures List of surgical procedure information
			SurgicalProcedures *[]struct {
				// DateTimeOfSurgery Date/Time of surgery (AIS-4), only expected for Epic
				DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

				// LateralityText Laterality text description (AIS-12.2), not supported by Cerner
				LateralityText *string `json:"lateralityText,omitempty"`

				// LateralityValue Laterality code value (AIS-12.1), not supported by Cerner
				LateralityValue *string `json:"lateralityValue,omitempty"`

				// Procedure List of surgical procedure detail information
				Procedure *[]struct {
					// SurgicalProcedureId Surgical procedure ID (AIS-3.1)
					SurgicalProcedureId *string `json:"surgicalProcedureId,omitempty"`

					// SurgicalProcedureName Surgical procedure name (AIS-3.2)
					SurgicalProcedureName *string `json:"surgicalProcedureName,omitempty"`
				} `json:"procedure,omitempty"`
			} `json:"surgicalProcedures,omitempty"`

			// SurgicalStaffPersonnel List of surgical staff personnel information
			SurgicalStaffPersonnel *[]struct {
				// PersonnelId List of provider identifiers (AIP-3.1)
				PersonnelId *[]struct {
					// Id Value of the identifier for the individual
					Id *string `json:"id,omitempty"`

					// Type Defines the type of identifier associated with the id
					Type *string `json:"type,omitempty"`
				} `json:"personnelId,omitempty"`

				// PersonnelName Name of provider
				PersonnelName *struct {
					// Family Provider last name (AIP-3.2)
					Family *string `json:"family,omitempty"`

					// Given Provider first name (AIP-3.3)
					Given *string `json:"given,omitempty"`
				} `json:"personnelName,omitempty"`

				// PersonnelRole Provider role (AIP-4.2)
				PersonnelRole *string `json:"personnelRole,omitempty"`
			} `json:"surgicalStaffPersonnel,omitempty"`
		} `json:"resourceGroups,omitempty"`

		// SurgicalService Surgical service (PV1-10)
		SurgicalService *string `json:"surgicalService,omitempty"`

		// TriggerEvent SIU Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`
	} `json:"surgicalCaseEventV2,omitempty"`

	// SurgicalCaseEventV3 HL7 SIU surgery data agnostic to EHR vendor (Cerner/Epic). For Cerner, this dataset can't be sent on an Update partner notification type. This is because Cerner does not support S14 update messages.
	SurgicalCaseEventV3 *struct {
		// AssignedPatientLocation Assigned patient location
		AssignedPatientLocation *struct {
			Building *struct {
				// NamespaceId Building (PV1-3.7)
				NamespaceId *string `json:"namespaceId,omitempty"`
			} `json:"building,omitempty"`
			Department *struct {
				// NamespaceId Department (PV1-3.1)
				NamespaceId *string `json:"namespaceId,omitempty"`
			} `json:"department,omitempty"`
			Facility *struct {
				// NamespaceId Facility namespace ID (PV1-3.4.1)
				NamespaceId *string `json:"namespaceId,omitempty"`
			} `json:"facility,omitempty"`
		} `json:"assignedPatientLocation,omitempty"`

		// CancelReason Cancel Reason (SCH-6)
		CancelReason *string `json:"cancelReason,omitempty"`

		// CaseId Case/Log number (SCH-2.1)
		CaseId *string `json:"caseId,omitempty"`

		// CaseProgressStatusId Case progress status ID (SCH-25.4), only expected for Epic
		CaseProgressStatusId *string `json:"caseProgressStatusId,omitempty"`

		// CaseProgressStatusText Case progress status text (SCH-25.5), only expected for Epic
		CaseProgressStatusText *string `json:"caseProgressStatusText,omitempty"`

		// CaseSchedulingStatusId Case scheduling status ID (SCH-25.1), only expected for Epic
		CaseSchedulingStatusId *string `json:"caseSchedulingStatusId,omitempty"`

		// CaseSchedulingStatusText Case scheduling status text (SCH-25.2), only expected for Epic
		CaseSchedulingStatusText *string `json:"caseSchedulingStatusText,omitempty"`

		// DateTimeOfSurgery Date/Time of surgery (SCH-11.4)
		DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

		// MessageType SIU Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`

		// OriginalCaseId Original case/log number (SCH-24), only expected for Epic
		OriginalCaseId *string `json:"originalCaseId,omitempty"`

		// PatientIdList Patient identifier list (Epic: PID-3.1/PID-3.5, Cerner: PID-3.1/PID-3.4)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientType Patient type (PV1-2)
		PatientType *string `json:"patientType,omitempty"`

		// PlacerId Case/Log number (SCH-1.1), only expected for Cerner
		PlacerId *string `json:"placerId,omitempty"`

		// ResourceGroups Resource group list
		ResourceGroups *[]struct {
			// SurgicalProcedureLocations List of surgical procedure location information
			SurgicalProcedureLocations *[]struct {
				Department *struct {
					// NamespaceId Department (AIL-3.1)
					NamespaceId *string `json:"namespaceId,omitempty"`
				} `json:"department,omitempty"`
				Facility *struct {
					// NamespaceId Facility namespace ID (AIL-3.4.1)
					NamespaceId *string `json:"namespaceId,omitempty"`
				} `json:"facility,omitempty"`
				OperatingRoom *struct {
					// NamespaceId Operating Room (AIL-3.2)
					NamespaceId *string `json:"namespaceId,omitempty"`
				} `json:"operatingRoom,omitempty"`
			} `json:"surgicalProcedureLocations,omitempty"`

			// SurgicalProcedures List of surgical procedure information
			SurgicalProcedures *[]struct {
				// DateTimeOfSurgery Date/Time of surgery (AIS-4), only expected for Epic
				DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

				// LateralityText Laterality text description (AIS-12.2), not supported by Cerner
				LateralityText *string `json:"lateralityText,omitempty"`

				// LateralityValue Laterality code value (AIS-12.1), not supported by Cerner
				LateralityValue *string `json:"lateralityValue,omitempty"`

				// Procedure List of surgical procedure detail information
				Procedure *[]struct {
					// SurgicalProcedureId Surgical procedure ID (AIS-3.1)
					SurgicalProcedureId *string `json:"surgicalProcedureId,omitempty"`

					// SurgicalProcedureName Surgical procedure name (AIS-3.2)
					SurgicalProcedureName *string `json:"surgicalProcedureName,omitempty"`
				} `json:"procedure,omitempty"`
			} `json:"surgicalProcedures,omitempty"`

			// SurgicalStaffPersonnel List of surgical staff personnel information
			SurgicalStaffPersonnel *[]struct {
				// PersonnelId List of provider identifiers (AIP-3.1) and their ID types (Epic: AIP-3.13 / Cerner: AIP-3.9.1)
				PersonnelId *[]struct {
					// Id Value of the identifier for the individual
					Id *string `json:"id,omitempty"`

					// Type Defines the type of identifier associated with the id
					Type *string `json:"type,omitempty"`
				} `json:"personnelId,omitempty"`

				// PersonnelName Name of provider
				PersonnelName *struct {
					// Family Provider last name (AIP-3.2)
					Family *string `json:"family,omitempty"`

					// Given Provider first name (AIP-3.3)
					Given *string `json:"given,omitempty"`
				} `json:"personnelName,omitempty"`

				// ResourceRole Resource role object (AIP-4.1/AIP-4.2)
				ResourceRole *struct {
					// PersonnelId Personnel Id (AIP-4.1)
					PersonnelId *string `json:"personnelId,omitempty"`

					// PersonnelRole Personnel role (Epic: AIP-4.2 / Cerner: Hardcoded as 'Primary')
					PersonnelRole *string `json:"personnelRole,omitempty"`
				} `json:"resourceRole,omitempty"`
			} `json:"surgicalStaffPersonnel,omitempty"`
		} `json:"resourceGroups,omitempty"`

		// SurgicalService Surgical service (PV1-10)
		SurgicalService *string `json:"surgicalService,omitempty"`

		// TriggerEvent SIU Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`

		// VisitId Object defining visit identifier
		VisitId *struct {
			// Id Visit Id (Epic: PV1-19 / Cerner: PID-18.1)
			Id *string `json:"id,omitempty"`

			// Type Visit Id type (Epic: Hardcoded as 'CSN' / Cerner: PID-18.4, expected for S13 only)
			Type *string `json:"type,omitempty"`
		} `json:"visitId,omitempty"`
	} `json:"surgicalCaseEventV3,omitempty"`

	// UnsolicitedOrderV1 HL7 Unsolicited Order Message (ORM) data agnostic to ehr vendor (cerner/epic)
	UnsolicitedOrderV1 *struct {
		// AdmitDateTime Admit Date/Time (PV1-44)
		AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

		// AdmittingProvider List of admitting provider (PV1-17)
		AdmittingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"admittingProvider,omitempty"`

		// AlternateVisitId Alternate Visit ID (PV1-50)
		AlternateVisitId *string `json:"alternateVisitId,omitempty"`

		// AssignedPatientLocation Appointment Patient Location (PV1-3)
		AssignedPatientLocation *struct {
			// Building Building (PV1-3.7) - (often not populated)
			Building *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"building,omitempty"`

			// Department Department (PV1-3.1)
			Department *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"department,omitempty"`

			// Facility Facility (PV1-3.4)
			Facility *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"facility,omitempty"`
		} `json:"assignedPatientLocation,omitempty"`

		// AttendingProvider List of attending provider (PV1-7)
		AttendingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"attendingProvider,omitempty"`

		// CommonOrder List of objects describing fields common to all orders
		CommonOrder *[]struct {
			// EnteredBy Identity of person who keyed the order request (ORC-10)
			EnteredBy *struct {
				// FamilyName ORC-10.3
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName ORC-10.2
				GivenName *string `json:"givenName,omitempty"`

				// Id ORC-10.1
				Id *string `json:"id,omitempty"`
			} `json:"enteredBy,omitempty"`

			// OrderControl Function of order segment (ORC-1)
			OrderControl *string `json:"orderControl,omitempty"`

			// OrderingProvider List of ordering provider (ORC-12) | identifierTypeCode - Epic (ORC-12.13) | Cerner (ORC-12.9)
			OrderingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"orderingProvider,omitempty"`

			// PlacerOrderNumber Placer application's order number (ORC-2.1)
			PlacerOrderNumber *string `json:"placerOrderNumber,omitempty"`

			// PlacerOrderNumberNamespaceId Placer application's order number namespace id (ORC-2.2)
			PlacerOrderNumberNamespaceId *string `json:"placerOrderNumberNamespaceId,omitempty"`

			// QuantityTiming Timing of order (ORC-7 for Epic, OBR-27.7 for Cerner)
			QuantityTiming *struct {
				// Condition Epic: Not Supported; Cerner: OBR-27.7
				Condition *string `json:"condition,omitempty"`

				// EndDate Epic: ORC-7.5; Cerner: OBR-27.5
				EndDate *time.Time `json:"endDate,omitempty"`

				// Interval Epic: ORC-7.2; Cerner: OBR-27.2
				Interval *string `json:"interval,omitempty"`

				// OrderType Epic: ORC-7.8; Cerner: Not Supported
				OrderType *string `json:"orderType,omitempty"`

				// Priority Epic: ORC-7.6; Cerner: OBR-27.6
				Priority *string `json:"priority,omitempty"`

				// Quantity Epic: ORC-7.1; Cerner: OBR-27.1
				Quantity *string `json:"quantity,omitempty"`

				// QuantityTotal Epic: ORC-7.12; Cerner: Not Supported
				QuantityTotal *string `json:"quantityTotal,omitempty"`

				// StartDate Epic: ORC-7.4; Cerner: OBR-27.4
				StartDate *time.Time `json:"startDate,omitempty"`
			} `json:"quantityTiming,omitempty"`

			// TransactionDateTime Date and time of transaction reflected in ORC-1 (ORC-9)
			TransactionDateTime *time.Time `json:"transactionDateTime,omitempty"`
		} `json:"commonOrder,omitempty"`

		// ConsultingProvider List of consulting provider (PV1-9)
		ConsultingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"consultingProvider,omitempty"`

		// DischargeDateTime Discharge Date/Time (PV1-45)
		DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

		// DischargeDisposition Discharge disposition (PV1-36)
		DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

		// Handicap Handicap (PD1-6)
		Handicap *string `json:"handicap,omitempty"`

		// HospitalService Hospital service (PV1-10)
		HospitalService *string `json:"hospitalService,omitempty"`

		// MessageType ORM Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`
		Notes       *[]struct {
			// Comments Comment (NTE-3.3)
			Comments *[]string `json:"comments,omitempty"`

			// SetId Set Id  (NTE-3.1)
			SetId *string `json:"setId,omitempty"`

			// SourceOfComment Source of comment (NTE-3.2)
			SourceOfComment *string `json:"sourceOfComment,omitempty"`
		} `json:"notes,omitempty"`

		// ObservationRequest List of objects of information specific to an order for a diagnostic study or observation
		ObservationRequest *[]struct {
			// DiagnosticServiceSectionId Section of diagnostic service where observation was performed (OBR-24)
			DiagnosticServiceSectionId *string `json:"diagnosticServiceSectionId,omitempty"`

			// ObservationDateTime Clinically relevant observation date time (OBR-7)
			ObservationDateTime *time.Time `json:"observationDateTime,omitempty"`

			// OrderingProvider List of ordering provider (OBR-16) | identifierTypeCode - Epic (OBR-16.13) | Cerner (OBR-16.9)
			OrderingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"orderingProvider,omitempty"`

			// PlacerOrderNumber Placer order number (OBR-2.1)
			PlacerOrderNumber *string `json:"placerOrderNumber,omitempty"`

			// PlacerOrderNumberNamespaceId Placer order number namespace id (OBR-2.2)
			PlacerOrderNumberNamespaceId *string `json:"placerOrderNumberNamespaceId,omitempty"`

			// RequestedDateTime Requested date time (OBR-6)
			RequestedDateTime *time.Time `json:"requestedDateTime,omitempty"`

			// ScheduledDateTime Date time filler scheduled an observation (OBR-36)
			ScheduledDateTime *time.Time `json:"scheduledDateTime,omitempty"`

			// Service Actual service/content being ordered (OBR-4)
			Service *struct {
				// AlternateText Alternate text (OBR-4.5)
				AlternateText *string `json:"alternateText,omitempty"`

				// CodingSystemName Coding system name (OBR-4.3)
				CodingSystemName *string `json:"codingSystemName,omitempty"`

				// UniversalServiceIdentifierId Universal id (OBR-4.1)
				UniversalServiceIdentifierId *string `json:"universalServiceIdentifierId,omitempty"`

				// UniversalServiceIdentifierText Universal id text (OBR-4.2)
				UniversalServiceIdentifierText *string `json:"universalServiceIdentifierText,omitempty"`
			} `json:"service,omitempty"`
		} `json:"observationRequest,omitempty"`

		// OrderBasedQuestions List of objects of observation report information
		OrderBasedQuestions *[]struct {
			// Identifier Typically represents a question asked on order entry (OBX-3)
			Identifier *struct {
				// CodingSystemName OBX-3.3
				CodingSystemName *string `json:"codingSystemName,omitempty"`

				// Id OBX-3.1
				Id *string `json:"id,omitempty"`

				// Name OBX-3.2
				Name *string `json:"name,omitempty"`
			} `json:"identifier,omitempty"`

			// ResultStatus Observation result status (OBX-11)
			ResultStatus *string `json:"resultStatus,omitempty"`

			// SetId Sequence number (OBX-1)
			SetId *string `json:"setId,omitempty"`

			// Units Unit of observation value (OBX-6.1)
			Units *string `json:"units,omitempty"`

			// Value Typically represents answer(s) to question asked on order entry. This field's length and format may vary depending on the data type provided by the EHR for this segment. (OBX-5.1)
			Value *[]string `json:"value,omitempty"`

			// ValueType Defines data type of OBX-5 (OBX-2.1)
			ValueType *string `json:"valueType,omitempty"`
		} `json:"orderBasedQuestions,omitempty"`

		// PatientClass Patient class (PV1-2)
		PatientClass *string `json:"patientClass,omitempty"`

		// PatientDeathIndicator Patient Death Indicator (PID-30)
		PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

		// PatientIdList Patient identifier list (PID-3.1/PID-3.5 for Epic; PID-3.4 for Cerner)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientType Patient type (PV1-18)
		PatientType *string `json:"patientType,omitempty"`

		// PrimaryCareProvider List of primary care provider (PD1-4) | identifierTypeCode - Epic (PD1-4.13) | Cerner (PD1-4.9)
		PrimaryCareProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"primaryCareProvider,omitempty"`

		// ReferringProvider List of referring provider (PV1-8)
		ReferringProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"referringProvider,omitempty"`

		// TriggerEvent ORM Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`

		// VisitId Epic (PV1-19/CSN); CSN is Hardcoded | Cerner (PID-18.1/PID-18.4); PID 18.4 is alias of the alias pool
		VisitId *struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"visitId,omitempty"`
	} `json:"unsolicitedOrderV1,omitempty"`
}

// DataSetsDemographicsV1Gender Current assigned sex
type DataSetsDemographicsV1Gender string

// DataSetsDemographicsV1NameUse Patients are set to ‘usual’ and providers set to ‘official’
type DataSetsDemographicsV1NameUse string

// DataSetsDemographicsV1NameListUse The iteration where use is set to "official" is the patient's legal name. The iteration where use is set to "usual"  contains the patient's preferred name if returned by the source EHR. If no iteration with a use set to "usual" is present, no preferred name was returned by the source EHR.
type DataSetsDemographicsV1NameListUse string

// DataSetsDemographicsV1TelecomSystem Contact method
type DataSetsDemographicsV1TelecomSystem string

// DataSetsDemographicsV1TelecomUse Contact purpose
type DataSetsDemographicsV1TelecomUse string

// DataSetsEncounterV1AttendingProviderNameUse Patients are set to ‘usual’ and providers set to ‘official’
type DataSetsEncounterV1AttendingProviderNameUse string

// DataSetsEncounterV1EncounterPointOfCareTelecomSystem Contact method
type DataSetsEncounterV1EncounterPointOfCareTelecomSystem string

// DataSetsEncounterV1EncounterPointOfCareTelecomUse Contact purpose
type DataSetsEncounterV1EncounterPointOfCareTelecomUse string

// DataSetsMaternityPregnancyEpicV1ChildrenNameUse Patients are set to ‘usual’ and providers set to ‘official’
type DataSetsMaternityPregnancyEpicV1ChildrenNameUse string

// DataSetsMaternityPregnancyEpicV1ChildrenType Defines relationship between patient and child
type DataSetsMaternityPregnancyEpicV1ChildrenType string

// DataSetsMaternityPregnancyEpicV1Pregnant Indicates whether patient is currently pregnant
type DataSetsMaternityPregnancyEpicV1Pregnant string

// DocumentReferenceRequest defines model for DocumentReferenceRequest.
type DocumentReferenceRequest struct {
	Content []struct {
		Attachment struct {
			ContentType string    `json:"contentType"`
			Creation    time.Time `json:"creation"`
			Data        string    `json:"data"`
			Title       string    `json:"title"`
		} `json:"attachment"`
	} `json:"content"`
	Context struct {
		Related []struct {
			Reference string `json:"reference"`
		} `json:"related"`
	} `json:"context"`
	Date      string `json:"date"`
	DocStatus string `json:"docStatus"`
	Meta      struct {
		Profile []string `json:"profile"`
	} `json:"meta"`
	ResourceType string `json:"resourceType"`
	Status       string `json:"status"`
	Type         struct {
		Coding []struct {
			Code    string `json:"code"`
			Display string `json:"display"`
			System  string `json:"system"`
		} `json:"coding"`
	} `json:"type"`
}

// Error defines model for Error.
type Error struct {
	Error string `json:"error"`
}

// EventNotification Detail information related to notification event
type EventNotification struct {
	// Deployment The Xealth-defined ID of the Health System
	Deployment string `json:"deployment"`

	// EventContext Indicates the reason for the event notification
	EventContext EventNotificationEventContext `json:"eventContext"`

	// EventId Xealth-generated value that uniquely identifies the notification event
	EventId string `json:"eventId"`

	// EventTimeStamp Indicates when the event was created
	EventTimeStamp time.Time `json:"eventTimeStamp"`

	// EventType Indicates the type of event related to the notification
	EventType EventNotificationEventType `json:"eventType"`

	// OrderId Xealth-generated value that uniquely identifies the order
	OrderId string `json:"orderId"`

	// PartnerId Xealth-generated value that uniquely identifies the partner
	PartnerId string `json:"partnerId"`

	// PatientIdentity Object identifying the patient
	PatientIdentity struct {
		// HistoricalIds List of the historical identifiers related to the patient
		HistoricalIds *[]struct {
			// Id Value of the identifier for the patient
			Id string `json:"id"`

			// Origin Defines the originating system from which the id value was sourced
			Origin EventNotificationPatientIdentityHistoricalIdsOrigin `json:"origin"`

			// Type Defines the type of identifier associated with the id
			Type string `json:"type"`
		} `json:"historicalIds,omitempty"`

		// Ids List of the current identifiers related to the patient
		Ids []struct {
			// Id Value of the identifier for the patient
			Id string `json:"id"`

			// Origin Defines the originating system from which the id value was sourced
			Origin EventNotificationPatientIdentityIdsOrigin `json:"origin"`

			// Type Defines the type of identifier associated with the id
			Type string `json:"type"`
		} `json:"ids"`
	} `json:"patientIdentity"`

	// ProgramId Xealth-generated value that identifies the digital content
	ProgramId string `json:"programId"`
}

// EventNotificationEventContext Indicates the reason for the event notification
type EventNotificationEventContext string

// EventNotificationEventType Indicates the type of event related to the notification
type EventNotificationEventType string

// EventNotificationPatientIdentityHistoricalIdsOrigin Defines the originating system from which the id value was sourced
type EventNotificationPatientIdentityHistoricalIdsOrigin string

// EventNotificationPatientIdentityIdsOrigin Defines the originating system from which the id value was sourced
type EventNotificationPatientIdentityIdsOrigin string

// EventNotificationRequest defines model for EventNotificationRequest.
type EventNotificationRequest struct {
	// EndDate End of date range for event notification search (range must be set to a 7 days or less)
	EndDate time.Time `json:"endDate"`

	// EventType Indicates the type of event related to the notification
	EventType *EventNotificationRequestEventType `json:"eventType,omitempty"`

	// StartDate Start of date range for event notification search (range must be set to a 7 days or less)
	StartDate time.Time `json:"startDate"`

	// Status Status of the event notification
	Status *EventNotificationRequestStatus `json:"status,omitempty"`
}

// EventNotificationRequestEventType Indicates the type of event related to the notification
type EventNotificationRequestEventType string

// EventNotificationRequestStatus Status of the event notification
type EventNotificationRequestStatus string

// EventNotificationResponse defines model for EventNotificationResponse.
type EventNotificationResponse struct {
	// EventNotifications Event notifications for the subscriber
	EventNotifications *[]struct {
		// Deployment The Xealth-defined ID of the Health System
		Deployment string `json:"deployment"`

		// EventContext Indicates the reason for the event notification
		EventContext EventNotificationResponseEventNotificationsEventContext `json:"eventContext"`

		// EventId Xealth-generated value that uniquely identifies the notification event
		EventId string `json:"eventId"`

		// EventTimeStamp Indicates when the event was created
		EventTimeStamp time.Time `json:"eventTimeStamp"`

		// EventType Indicates the type of event related to the notification
		EventType EventNotificationResponseEventNotificationsEventType `json:"eventType"`

		// OrderId Xealth-generated value that uniquely identifies the order
		OrderId string `json:"orderId"`

		// PartnerId Xealth-generated value that uniquely identifies the partner
		PartnerId string `json:"partnerId"`

		// PatientIdentity Object identifying the patient
		PatientIdentity struct {
			// HistoricalIds List of the historical identifiers related to the patient
			HistoricalIds *[]struct {
				// Id Value of the identifier for the patient
				Id string `json:"id"`

				// Origin Defines the originating system from which the id value was sourced
				Origin EventNotificationResponseEventNotificationsPatientIdentityHistoricalIdsOrigin `json:"origin"`

				// Type Defines the type of identifier associated with the id
				Type string `json:"type"`
			} `json:"historicalIds,omitempty"`

			// Ids List of the current identifiers related to the patient
			Ids []struct {
				// Id Value of the identifier for the patient
				Id string `json:"id"`

				// Origin Defines the originating system from which the id value was sourced
				Origin EventNotificationResponseEventNotificationsPatientIdentityIdsOrigin `json:"origin"`

				// Type Defines the type of identifier associated with the id
				Type string `json:"type"`
			} `json:"ids"`
		} `json:"patientIdentity"`

		// ProgramId Xealth-generated value that identifies the digital content
		ProgramId string `json:"programId"`
	} `json:"eventNotifications,omitempty"`

	// NumberOfEvents Identifies the number of events being returned
	NumberOfEvents float32 `json:"numberOfEvents"`
}

// EventNotificationResponseEventNotificationsEventContext Indicates the reason for the event notification
type EventNotificationResponseEventNotificationsEventContext string

// EventNotificationResponseEventNotificationsEventType Indicates the type of event related to the notification
type EventNotificationResponseEventNotificationsEventType string

// EventNotificationResponseEventNotificationsPatientIdentityHistoricalIdsOrigin Defines the originating system from which the id value was sourced
type EventNotificationResponseEventNotificationsPatientIdentityHistoricalIdsOrigin string

// EventNotificationResponseEventNotificationsPatientIdentityIdsOrigin Defines the originating system from which the id value was sourced
type EventNotificationResponseEventNotificationsPatientIdentityIdsOrigin string

// EventType Indicates the type of event related to the notification
type EventType string

// GeneralDatasets Health system data configured for the subscriber sourced via webservice or FHIR requests.
type GeneralDatasets struct {
	// DemographicsV1 Patient demographics data
	DemographicsV1 *struct {
		Address *[]struct {
			// City City name
			City *string `json:"city,omitempty"`

			// Country Country name
			Country *string `json:"country,omitempty"`

			// District District name
			District *string `json:"district,omitempty"`

			// Line List of street name, number, direction & P.O. Box etc
			Line *[]string `json:"line,omitempty"`

			// PostalCode Postal code for area
			PostalCode *string `json:"postalCode,omitempty"`

			// State State name or abbreviation
			State *string `json:"state,omitempty"`

			// Text Full address
			Text *string `json:"text,omitempty"`
		} `json:"address,omitempty"`

		// BirthDate Date of birth
		BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

		// DeceasedBoolean Indicates whether individual is deceased or not
		DeceasedBoolean *bool `json:"deceasedBoolean,omitempty"`

		// Gender Current assigned sex
		Gender *GeneralDatasetsDemographicsV1Gender `json:"gender,omitempty"`

		// HistoricalIds List of the historical identifiers related to the patient
		HistoricalIds *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"historicalIds,omitempty"`

		// Ids List of the current identifiers related to the patient
		Ids *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"ids,omitempty"`

		// Name Object naming the individual
		Name *struct {
			// Family List of last name
			Family *[]string `json:"family,omitempty"`

			// Given List of first name
			Given *[]string `json:"given,omitempty"`

			// Prefix List of Prefix or title
			Prefix *[]string `json:"prefix,omitempty"`

			// Suffix List of suffix or post-nominal
			Suffix *[]string `json:"suffix,omitempty"`

			// Text Full name
			Text *string `json:"text,omitempty"`

			// Use Patients are set to ‘usual’ and providers set to ‘official’
			Use *GeneralDatasetsDemographicsV1NameUse `json:"use,omitempty"`
		} `json:"name,omitempty"`

		// NameList List of names associated with the patient
		NameList *[]struct {
			// Family List of last name
			Family *[]string `json:"family,omitempty"`

			// Given List of first name
			Given *[]string `json:"given,omitempty"`

			// Prefix List of Prefix or title
			Prefix *[]string `json:"prefix,omitempty"`

			// Suffix List of suffix or post-nominal
			Suffix *[]string `json:"suffix,omitempty"`

			// Text Full name
			Text *string `json:"text,omitempty"`

			// Use The iteration where use is set to "official" is the patient's legal name. The iteration where use is set to "usual"  contains the patient's preferred name if returned by the source EHR. If no iteration with a use set to "usual" is present, no preferred name was returned by the source EHR.
			Use *GeneralDatasetsDemographicsV1NameListUse `json:"use,omitempty"`
		} `json:"nameList,omitempty"`

		// PreferredLanguage Patient's abbreviated preferred language as defined by the EHR
		PreferredLanguage *string `json:"preferredLanguage,omitempty"`

		// PreferredLanguageTitle Patient's preferred language as defined by the EHR
		PreferredLanguageTitle *string `json:"preferredLanguageTitle,omitempty"`
		Telecom                *[]struct {
			// Rank Preferred order of use (1 = highest)
			Rank *float32 `json:"rank,omitempty"`

			// System Contact method
			System *GeneralDatasetsDemographicsV1TelecomSystem `json:"system,omitempty"`

			// Use Contact purpose
			Use *GeneralDatasetsDemographicsV1TelecomUse `json:"use,omitempty"`

			// Value Contact detail
			Value *string `json:"value,omitempty"`
		} `json:"telecom,omitempty"`
	} `json:"demographicsV1,omitempty"`

	// EhrUserV1 EHR user currently initiating the activity within Xealth
	EhrUserV1 *struct {
		// FirstName First name
		FirstName *string `json:"firstName,omitempty"`

		// LastName Last name
		LastName *string `json:"lastName,omitempty"`

		// ProviderId EHR provider record (SER .1)
		ProviderId *string `json:"providerId,omitempty"`

		// ProviderNPI National Provider Identifer
		ProviderNPI *string `json:"providerNPI,omitempty"`

		// ProviderType EHR provider record type (SER 1040)
		ProviderType *string `json:"providerType,omitempty"`

		// SystemLogin Login identifier (EMP 45)
		SystemLogin *string `json:"systemLogin,omitempty"`

		// UserId EHR identifer (EMP .1)
		UserId *string `json:"userId,omitempty"`
	} `json:"ehrUserV1,omitempty"`

	// EncounterLocationV1 Location tied to the Encounter
	EncounterLocationV1 *struct {
		// Display Location full name
		Display *string `json:"display,omitempty"`

		// FhirId Location FHIR identifier
		FhirId *string `json:"fhirId,omitempty"`
	} `json:"encounterLocationV1,omitempty"`

	// EncounterV1 Encounter level data
	EncounterV1 *struct {
		// AttendingProvider Object defining practitioner information
		AttendingProvider *struct {
			// Identifier List of practitioner identifiers
			Identifier *[]struct {
				// Type Description of identifier
				Type *struct {
					// Text Plain text representation of the identifier
					Text *string `json:"text,omitempty"`
				} `json:"type,omitempty"`

				// Value Unique identifier value
				Value *string `json:"value,omitempty"`
			} `json:"identifier,omitempty"`

			// Name List of practitioner names
			Name *[]struct {
				// Family List of last name
				Family *[]string `json:"family,omitempty"`

				// Given List of first name
				Given *[]string `json:"given,omitempty"`

				// Prefix List of Prefix or title
				Prefix *[]string `json:"prefix,omitempty"`

				// Suffix List of suffix or post-nominal
				Suffix *[]string `json:"suffix,omitempty"`

				// Text Full name
				Text *string `json:"text,omitempty"`

				// Use Patients are set to ‘usual’ and providers set to ‘official’
				Use *GeneralDatasetsEncounterV1AttendingProviderNameUse `json:"use,omitempty"`
			} `json:"name,omitempty"`
		} `json:"attendingProvider,omitempty"`

		// EncounterLocation Location tied to the Encounter
		EncounterLocation *struct {
			// Display Location full name
			Display *string `json:"display,omitempty"`

			// FhirId Location FHIR identifier
			FhirId *string `json:"fhirId,omitempty"`
		} `json:"encounterLocation,omitempty"`

		// EncounterPointOfCare Object defining ‘department’ Epic or 'unit' in Cerner
		EncounterPointOfCare *struct {
			// Address Object defining address information
			Address *struct {
				// City City name
				City *string `json:"city,omitempty"`

				// Country Country name
				Country *string `json:"country,omitempty"`

				// District District name
				District *string `json:"district,omitempty"`

				// Line List of street name, number, direction & P.O. Box etc
				Line *[]string `json:"line,omitempty"`

				// PostalCode Postal code for area
				PostalCode *string `json:"postalCode,omitempty"`

				// State State name or abbreviation
				State *string `json:"state,omitempty"`

				// Text Full address
				Text *string `json:"text,omitempty"`
			} `json:"address,omitempty"`

			// Alias List of aliases of department or unit
			Alias *[]string `json:"alias,omitempty"`

			// Identifier List of department or unit identifiers
			Identifier *[]struct {
				// Type Description of identifier
				Type *struct {
					// Text Plain text representation of the identifier
					Text *string `json:"text,omitempty"`
				} `json:"type,omitempty"`

				// Value Unique identifier value
				Value *string `json:"value,omitempty"`
			} `json:"identifier,omitempty"`

			// Name Name of department or unit
			Name *string `json:"name,omitempty"`

			// Telecom List of contact information of department or unit
			Telecom *[]struct {
				// Rank Preferred order of use (1 = highest)
				Rank *float32 `json:"rank,omitempty"`

				// System Contact method
				System *GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystem `json:"system,omitempty"`

				// Use Contact purpose
				Use *GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUse `json:"use,omitempty"`

				// Value Contact detail
				Value *string `json:"value,omitempty"`
			} `json:"telecom,omitempty"`
		} `json:"encounterPointOfCare,omitempty"`

		// VisitId Object defining visit identifier; only intended to be used for manual orders
		VisitId *struct {
			// Id CSN for the visit for Epic | FIN NBR for the visit for Cerner
			Id *string `json:"id,omitempty"`

			// Type 'CSN' is hardcoded for Epic | OID of the alias pool associated with the FIN for Cerner
			Type *string `json:"type,omitempty"`
		} `json:"visitId,omitempty"`
	} `json:"encounterV1,omitempty"`

	// MaternityPregnancyCernerV1 Cerner maternity information
	MaternityPregnancyCernerV1 *struct {
		// EstimatedDeliveryDates List of estimated delivery dates
		EstimatedDeliveryDates *[]struct {
			// Category Object defining a codeable concept information
			Category *struct {
				// Coding List of codes defined by a terminology system
				Coding *[]struct {
					// Code Symbol in syntax defined by the system
					Code *string `json:"code,omitempty"`

					// Extension Object defining optional extension elements
					Extension *struct {
						// Url Identifies the meaning of the extension
						Url *string `json:"url,omitempty"`

						// ValueCode Value of extension
						ValueCode *string `json:"valueCode,omitempty"`
					} `json:"extension,omitempty"`

					// System Identity of the terminology system
					System *string `json:"system,omitempty"`
				} `json:"coding,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"category,omitempty"`

			// Code Object defining a codeable concept information
			Code *struct {
				// Coding List of codes defined by a terminology system
				Coding *[]struct {
					// Code Symbol in syntax defined by the system
					Code *string `json:"code,omitempty"`

					// Extension Object defining optional extension elements
					Extension *struct {
						// Url Identifies the meaning of the extension
						Url *string `json:"url,omitempty"`

						// ValueCode Value of extension
						ValueCode *string `json:"valueCode,omitempty"`
					} `json:"extension,omitempty"`

					// System Identity of the terminology system
					System *string `json:"system,omitempty"`
				} `json:"coding,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"code,omitempty"`

			// EffectiveDateTime Clinically relevant time/time-period for observation
			EffectiveDateTime *string `json:"effectiveDateTime,omitempty"`

			// ValueDateTime Actual date/time of the estimated delivery date
			ValueDateTime *time.Time `json:"valueDateTime,omitempty"`
		} `json:"estimatedDeliveryDates,omitempty"`
	} `json:"maternityPregnancyCernerV1,omitempty"`

	// MaternityPregnancyEpicV1 Epic maternity information
	MaternityPregnancyEpicV1 *struct {
		// Children List of children associated with the patient
		Children *[]struct {
			// Ids List of the current identifiers related to the child
			Ids *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"ids,omitempty"`

			// Name Object naming the individual
			Name *struct {
				// Family List of last name
				Family *[]string `json:"family,omitempty"`

				// Given List of first name
				Given *[]string `json:"given,omitempty"`

				// Prefix List of Prefix or title
				Prefix *[]string `json:"prefix,omitempty"`

				// Suffix List of suffix or post-nominal
				Suffix *[]string `json:"suffix,omitempty"`

				// Text Full name
				Text *string `json:"text,omitempty"`

				// Use Patients are set to ‘usual’ and providers set to ‘official’
				Use *GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUse `json:"use,omitempty"`
			} `json:"name,omitempty"`

			// ProxyExpiration Date proxy relationship ends
			ProxyExpiration *openapi_types.Date `json:"proxyExpiration,omitempty"`

			// ProxyRelationship Defines proxy relationship
			ProxyRelationship *string `json:"proxyRelationship,omitempty"`

			// Type Defines relationship between patient and child
			Type *GeneralDatasetsMaternityPregnancyEpicV1ChildrenType `json:"type,omitempty"`
		} `json:"children,omitempty"`

		// Pregnant Indicates whether patient is currently pregnant
		Pregnant *GeneralDatasetsMaternityPregnancyEpicV1Pregnant `json:"pregnant,omitempty"`
	} `json:"maternityPregnancyEpicV1,omitempty"`

	// MaternityPregnancyV2 Universal maternity information (applies to Health Systems using either Cerner or Epic AppOrchard)
	MaternityPregnancyV2 *struct {
		// EstimatedDeliveryDates List of estimated delivery dates (sourced from Observation.Search (STU2) for Cerner and Observation.Search (Obstetric Details) (R4) for Epic)
		EstimatedDeliveryDates *[]struct {
			// Category Object defining a codeable concept information
			Category *struct {
				// Coding List of codes defined by a terminology system
				Coding *[]struct {
					// Code Symbol in syntax defined by the system
					Code *string `json:"code,omitempty"`

					// Extension Object defining optional extension elements
					Extension *struct {
						// Url Identifies the meaning of the extension
						Url *string `json:"url,omitempty"`

						// ValueCode Value of extension
						ValueCode *string `json:"valueCode,omitempty"`
					} `json:"extension,omitempty"`

					// System Identity of the terminology system
					System *string `json:"system,omitempty"`
				} `json:"coding,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"category,omitempty"`

			// Code Object defining a codeable concept information
			Code *struct {
				// Coding List of codes defined by a terminology system
				Coding *[]struct {
					// Code Symbol in syntax defined by the system
					Code *string `json:"code,omitempty"`

					// Extension Object defining optional extension elements
					Extension *struct {
						// Url Identifies the meaning of the extension
						Url *string `json:"url,omitempty"`

						// ValueCode Value of extension
						ValueCode *string `json:"valueCode,omitempty"`
					} `json:"extension,omitempty"`

					// System Identity of the terminology system
					System *string `json:"system,omitempty"`
				} `json:"coding,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"code,omitempty"`

			// EffectiveDateTime Clinically relevant time/time-period for observation
			EffectiveDateTime *string `json:"effectiveDateTime,omitempty"`

			// ValueDateTime Actual date/time of the estimated delivery date
			ValueDateTime *time.Time `json:"valueDateTime,omitempty"`
		} `json:"estimatedDeliveryDates,omitempty"`
	} `json:"maternityPregnancyV2,omitempty"`

	// ProblemListV1 Patient problem information
	ProblemListV1 *struct {
		// Problems List of problems
		Problems *[]struct {
			// Code Object defining condition or problem
			Code *struct {
				// Code Symbol in syntax defined by the system
				Code *string `json:"code,omitempty"`

				// System Identity of the terminology system
				System *string `json:"system,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"code,omitempty"`

			// OnsetPeriod Estimated date, date-time, or partial date the problem began and/or ceased.
			OnsetPeriod *struct {
				// End End of the time period, inclusive boundary. If end is missing, then the period is ongoing.
				End *time.Time `json:"end,omitempty"`

				// Start Start of the time period, inclusive boundary.
				Start *time.Time `json:"start,omitempty"`
			} `json:"onsetPeriod,omitempty"`

			// RecordedDate Date the problem was first recorded. Epic: Supported (Not recommended, use recordedDateTime instead); Cerner: Not Supported
			RecordedDate *openapi_types.Date `json:"recordedDate,omitempty"`

			// RecordedDateTime Date, date-time, or partial date the problem was first recorded.
			RecordedDateTime *time.Time `json:"recordedDateTime,omitempty"`
		} `json:"problems,omitempty"`
	} `json:"problemListV1,omitempty"`

	// SocialHistoryV1 Patient social history (smoking status)
	SocialHistoryV1 *struct {
		// SmokingStatus Object defining observation information
		SmokingStatus *struct {
			// Category Object defining condition or problem
			Category *struct {
				// Code Symbol in syntax defined by the system
				Code *string `json:"code,omitempty"`

				// System Identity of the terminology system
				System *string `json:"system,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"category,omitempty"`

			// Value Object defining condition or problem
			Value *struct {
				// Code Symbol in syntax defined by the system
				Code *string `json:"code,omitempty"`

				// System Identity of the terminology system
				System *string `json:"system,omitempty"`

				// Text Plain text representation of the concept
				Text *string `json:"text,omitempty"`
			} `json:"value,omitempty"`
		} `json:"smokingStatus,omitempty"`
	} `json:"socialHistoryV1,omitempty"`
}

// GeneralDatasetsDemographicsV1Gender Current assigned sex
type GeneralDatasetsDemographicsV1Gender string

// GeneralDatasetsDemographicsV1NameUse Patients are set to ‘usual’ and providers set to ‘official’
type GeneralDatasetsDemographicsV1NameUse string

// GeneralDatasetsDemographicsV1NameListUse The iteration where use is set to "official" is the patient's legal name. The iteration where use is set to "usual"  contains the patient's preferred name if returned by the source EHR. If no iteration with a use set to "usual" is present, no preferred name was returned by the source EHR.
type GeneralDatasetsDemographicsV1NameListUse string

// GeneralDatasetsDemographicsV1TelecomSystem Contact method
type GeneralDatasetsDemographicsV1TelecomSystem string

// GeneralDatasetsDemographicsV1TelecomUse Contact purpose
type GeneralDatasetsDemographicsV1TelecomUse string

// GeneralDatasetsEncounterV1AttendingProviderNameUse Patients are set to ‘usual’ and providers set to ‘official’
type GeneralDatasetsEncounterV1AttendingProviderNameUse string

// GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystem Contact method
type GeneralDatasetsEncounterV1EncounterPointOfCareTelecomSystem string

// GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUse Contact purpose
type GeneralDatasetsEncounterV1EncounterPointOfCareTelecomUse string

// GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUse Patients are set to ‘usual’ and providers set to ‘official’
type GeneralDatasetsMaternityPregnancyEpicV1ChildrenNameUse string

// GeneralDatasetsMaternityPregnancyEpicV1ChildrenType Defines relationship between patient and child
type GeneralDatasetsMaternityPregnancyEpicV1ChildrenType string

// GeneralDatasetsMaternityPregnancyEpicV1Pregnant Indicates whether patient is currently pregnant
type GeneralDatasetsMaternityPregnancyEpicV1Pregnant string

// GetProgramUrlRequest Detail information related to notification event
type GetProgramUrlRequest struct {
	// Datasets Health system data configured for the subscriber sourced via webservice or FHIR requests.
	Datasets *GeneralDatasets `json:"datasets,omitempty"`

	// Deployment The Xealth-defined ID of the Health System
	Deployment string `json:"deployment"`

	// EhrView Indicates how the workflow is accessed by the EHR
	EhrView GetProgramUrlRequestEhrView `json:"ehrView"`

	// EventContext Indicates the reason for the event notification
	EventContext GetProgramUrlRequestEventContext `json:"eventContext"`

	// EventType Indicates the type of event related to the notification
	EventType GetProgramUrlRequestEventType `json:"eventType"`

	// PatientIdentity Object identifying the patient
	PatientIdentity PatientIdentity `json:"patientIdentity"`

	// ProgramId Subscriber-defined identifier for the program
	ProgramId string `json:"programId"`
}

// GetProgramUrlRequestEhrView Indicates how the workflow is accessed by the EHR
type GetProgramUrlRequestEhrView string

// GetProgramUrlRequestEventContext Indicates the reason for the event notification
type GetProgramUrlRequestEventContext string

// GetProgramUrlRequestEventType Indicates the type of event related to the notification
type GetProgramUrlRequestEventType string

// GetProgramUrlResponse defines model for GetProgramUrlResponse.
type GetProgramUrlResponse struct {
	// Url The URL that will be displayed in the EHR to render the patient's dashboard and/or digital content
	Url string `json:"url"`
}

// GetProgramsRequest Detail information related to notification event
type GetProgramsRequest struct {
	// Datasets Health system data configured for the subscriber sourced via webservice or FHIR requests.
	Datasets *GeneralDatasets `json:"datasets,omitempty"`

	// Deployment The Xealth-defined ID of the Health System
	Deployment string `json:"deployment"`

	// EhrView Indicates how the workflow is accessed by the EHR
	EhrView GetProgramsRequestEhrView `json:"ehrView"`

	// EventContext Indicates the reason for the event notification
	EventContext GetProgramsRequestEventContext `json:"eventContext"`

	// EventType Indicates the type of event related to the notification
	EventType GetProgramsRequestEventType `json:"eventType"`

	// PatientIdentity Object identifying the patient
	PatientIdentity PatientIdentity `json:"patientIdentity"`
}

// GetProgramsRequestEhrView Indicates how the workflow is accessed by the EHR
type GetProgramsRequestEhrView string

// GetProgramsRequestEventContext Indicates the reason for the event notification
type GetProgramsRequestEventContext string

// GetProgramsRequestEventType Indicates the type of event related to the notification
type GetProgramsRequestEventType string

// GetProgramsResponse defines model for GetProgramsResponse.
type GetProgramsResponse struct {
	union json.RawMessage
}

// GetProgramsResponse0 defines model for .
type GetProgramsResponse0 struct {
	// Present Indicates if any programs are present for the patient
	Present bool `json:"present"`

	// Programs Array of objects defining programs the patient is enrolled in
	Programs []struct {
		// Description Description of the enrolled program
		Description *string `json:"description,omitempty"`

		// EnrolledDate Date when the patient was enrolled into this program. (Format is YYYY-MM-DD)
		EnrolledDate *string `json:"enrolledDate,omitempty"`

		// HasStatusView Indicates whether or not a subscriber dashboard exists for this patient. Setting this field to false will disable the ability for getProgramUrl request to be made for this program
		HasStatusView *bool `json:"hasStatusView,omitempty"`

		// HasAlert Indicates if new information is available for this patient. If true, Xealth will highlight the program in Monitor view to alert the user
		HasAlert *bool `json:"has_alert,omitempty"`

		// ProgramId Subscriber-defined identifier for the program
		ProgramId *string `json:"programId,omitempty"`

		// Status Patient's current enrollment status in the program
		Status *string `json:"status,omitempty"`

		// Title Title of the enrolled program
		Title *string `json:"title,omitempty"`
	} `json:"programs"`
}

// GetProgramsResponse1 defines model for .
type GetProgramsResponse1 struct {
	// Present Indicates if any programs are present for the patient
	Present bool `json:"present"`
}

// HL7Datasets Object used to better organize HL7 datasets
type HL7Datasets struct {
	// AdmitDischargeTransferV1 HL7 ADT encounter data. This dataset supports Epic and Cerner. The data expected to be populated varies based on what trigger event the dataset is generated from: A01 (Admit), A02 (Transfer), A03 (Discharge), to list a few examples.
	AdmitDischargeTransferV1 *struct {
		// AdditionalDemographics Additional patient demographics (PD1)
		AdditionalDemographics *struct {
			// Handicap Handicap (PD1-6)
			Handicap *string `json:"handicap,omitempty"`

			// PrimaryCareProvider List of identifiers of primary care provider (PD1-4)
			PrimaryCareProvider *[]struct {
				// FamilyName Provider last name (XCN.2)
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name (XCN.3)
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number (XCN.1)
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"primaryCareProvider,omitempty"`
		} `json:"additionalDemographics,omitempty"`

		// AdmissionSource Admission Source (PV1-14)
		AdmissionSource *string `json:"admissionSource,omitempty"`

		// AdmissionType Admission Type (PV1-4)
		AdmissionType *string `json:"admissionType,omitempty"`

		// AdmitDateTime Admit Date/Time (PV1-45)
		AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

		// AdmitReason Admit reason (PV2-3)
		AdmitReason *struct {
			// Identifier Symbol in syntax defined by the system
			Identifier *string `json:"identifier,omitempty"`

			// NameOfCodingSystem Identity of the terminology system
			NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

			// Text Representation defined by the system
			Text *string `json:"text,omitempty"`
		} `json:"admitReason,omitempty"`

		// AdmittingProvider A list of provider identifiers for the admitting provider (PV1-17)
		AdmittingProvider *[]struct {
			// FamilyName Provider last name (XCN.2)
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name (XCN.3)
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number (XCN.1)
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"admittingProvider,omitempty"`

		// AlternateVisitId Alternate Visit Id (PV1-50)
		AlternateVisitId *struct {
			// Id Alternate visit id (PV1-50.1)
			Id *string `json:"id,omitempty"`
		} `json:"alternateVisitId,omitempty"`

		// AssignedPatientLocation Assigned Patient Location (PV1-3). Cerner-specific note: Each field in this structure may not be considered unique except within the context of the hierarchy it is part of.
		AssignedPatientLocation *struct {
			// Building Object defining an identifier set describing an entity in either a local or universal context
			Building *struct {
				// NamespaceId A locally unique identifier
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId An identifier that is universally unique within a given context
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType A code describing the context in which the universal id is unique
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"building,omitempty"`

			// Department Object defining an identifier set describing an entity in either a local or universal context
			Department *struct {
				// NamespaceId A locally unique identifier
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId An identifier that is universally unique within a given context
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType A code describing the context in which the universal id is unique
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"department,omitempty"`

			// Facility Object defining an identifier set describing an entity in either a local or universal context
			Facility *struct {
				// NamespaceId A locally unique identifier
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId An identifier that is universally unique within a given context
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType A code describing the context in which the universal id is unique
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"facility,omitempty"`
		} `json:"assignedPatientLocation,omitempty"`

		// AttendingProvider A list of provider identifiers for the attending provider (PV1-7)
		AttendingProvider *[]struct {
			// FamilyName Provider last name (XCN.2)
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name (XCN.3)
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number (XCN.1)
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"attendingProvider,omitempty"`

		// ConsultingProvider A list of provider identifiers for the consulting provider (PV1-9)
		ConsultingProvider *[]struct {
			// FamilyName Provider last name (XCN.2)
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name (XCN.3)
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number (XCN.1)
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"consultingProvider,omitempty"`

		// DischargeDateTime Discharge Date/Time (PV1-45)
		DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

		// DischargeDestination Discharge destination (PV1-37)
		DischargeDestination *string `json:"dischargeDestination,omitempty"`

		// DischargeDisposition Discharge disposition (PV1-36)
		DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

		// EncounterDiagnosis List of encounter diagnoses (DG1)
		EncounterDiagnosis *[]struct {
			// DiagnosisCode Diagnosis code (DG1-3)
			DiagnosisCode *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"diagnosisCode,omitempty"`

			// DiagnosisDateTime Diagnosis date/time (DG1-5)
			DiagnosisDateTime *time.Time `json:"diagnosisDateTime,omitempty"`

			// DiagnosisDescription Diagnosis description (DG1-4)
			DiagnosisDescription *string `json:"diagnosisDescription,omitempty"`

			// DiagnosisType Diagnosis type (DG1-6)
			DiagnosisType *string `json:"diagnosisType,omitempty"`
		} `json:"encounterDiagnosis,omitempty"`

		// EventOccurredDateTime (Epic only) Date/Time Event Occurred (EVN-6)
		EventOccurredDateTime *time.Time `json:"eventOccurredDateTime,omitempty"`

		// EventRecordedDateTime Date/Time Event Recorded (EVN-2)
		EventRecordedDateTime *time.Time `json:"eventRecordedDateTime,omitempty"`

		// EventTypeCode Event Type Code (EVN-1)
		EventTypeCode *string `json:"eventTypeCode,omitempty"`

		// HospitalService Hospital service (PV1-10)
		HospitalService *string `json:"hospitalService,omitempty"`

		// MessageType ADT Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`

		// NextOfKin List of next of kin (NK1)
		NextOfKin *[]struct {
			// Addresses List of addresses of the next of kin (NK1-4)
			Addresses *[]struct {
				// City City (XAD.3)
				City *string `json:"city,omitempty"`

				// OtherDesignation Other designation such as county (XAD.2)
				OtherDesignation *string `json:"otherDesignation,omitempty"`

				// State State (XAD.4)
				State *string `json:"state,omitempty"`

				// Street Street (XAD.1)
				Street *string `json:"street,omitempty"`

				// Type (Epic only) Type of address (XAD.7)
				Type *string `json:"type,omitempty"`

				// Zip Zip or postal code (XAD.5)
				Zip *string `json:"zip,omitempty"`
			} `json:"addresses,omitempty"`

			// AssociatedPrimaryIdentifiers List of primary identifiers (NK1-33)
			AssociatedPrimaryIdentifiers *[]struct {
				// Id Identifier (NK1-33.1)
				Id *string `json:"id,omitempty"`

				// Type Identifier type (NK1-33.5 for Epic, NK1-33.4 for Cerner)
				Type *string `json:"type,omitempty"`
			} `json:"associatedPrimaryIdentifiers,omitempty"`

			// ContactInfo List of phone numbers or emails of the next of kin (NK1-5)
			ContactInfo *[]struct {
				// EmailAddress (Epic only) Email address (XTN.4)
				EmailAddress *string `json:"emailAddress,omitempty"`

				// EquipmentType Equipment type (XTN.2)
				EquipmentType *string `json:"equipmentType,omitempty"`

				// PhoneNumber Phone number (XTN.1)
				PhoneNumber *string `json:"phoneNumber,omitempty"`

				// UnformattedPhoneNumber (Epic only) Unformatted phone number (XTN.12)
				UnformattedPhoneNumber *string `json:"unformattedPhoneNumber,omitempty"`
			} `json:"contactInfo,omitempty"`

			// ContactRole Contact role (NK1-7.1)
			ContactRole *string `json:"contactRole,omitempty"`

			// JobStatus Job Status (NK1-34)
			JobStatus *map[string]interface{} `json:"jobStatus,omitempty"`

			// Names List of names of the next of kin (NK1-2)
			Names *[]struct {
				// FamilyName Family name (XPN.1)
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Given name (XPN.2)
				GivenName *string `json:"givenName,omitempty"`

				// MiddleName Second and further given names or initials thereof (XPN.3)
				MiddleName *string `json:"middleName,omitempty"`
			} `json:"names,omitempty"`

			// PrimaryLanguage Primary language (NK1-20)
			PrimaryLanguage *string `json:"primaryLanguage,omitempty"`

			// Relationship Relationship with the patient (NK1-3)
			Relationship *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"relationship,omitempty"`
		} `json:"nextOfKin,omitempty"`

		// OperatorId Operator Id (EVN-5)
		OperatorId *struct {
			// Id Operator Id (EVN-5.1)
			Id *string `json:"id,omitempty"`

			// Type (Cerner only) Operator Id Type (EVN-5.9)
			Type *string `json:"type,omitempty"`
		} `json:"operatorId,omitempty"`

		// PatientClass Patient Class (PV1-2)
		PatientClass *string `json:"patientClass,omitempty"`

		// PatientDeathIndicator Patient Death Indicator (PID-30)
		PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

		// PatientIdList Patient identifier list (PID-3)
		PatientIdList *[]struct {
			// Id Patient identifier (PID-3.1)
			Id *string `json:"id,omitempty"`

			// Type (PID-3.5 for Epic; PID-3.4 for Cerner)
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientLevelPersonnel (Epic only) List of patient level care team personnel information (ROL segments after PID)
		PatientLevelPersonnel *[]struct {
			// PersonnelName List of names for this provider (ROL-4)
			PersonnelName *[]struct {
				// FamilyName Provider last name (XCN.2)
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name (XCN.3)
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number (XCN.1)
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"personnelName,omitempty"`

			// PersonnelRole Provider role (ROL-3)
			PersonnelRole *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"personnelRole,omitempty"`

			// ProviderType Provider type (ROL-9)
			ProviderType *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"providerType,omitempty"`

			// RoleBeginDate Treatment/Care team assignment start date (ROL-5)
			RoleBeginDate *time.Time `json:"roleBeginDate,omitempty"`

			// RoleEndDate Treatment/Care team assignment end date (ROL-6)
			RoleEndDate *time.Time `json:"roleEndDate,omitempty"`
		} `json:"patientLevelPersonnel,omitempty"`

		// PatientType Patient type (PV1-18)
		PatientType *string `json:"patientType,omitempty"`

		// PriorPatientLocation Prior Patient Location (PV1-6). Cerner-specific note: Each field in this structure may not be considered unique except within the context of the hierarchy it is part of.
		PriorPatientLocation *struct {
			// Building Object defining an identifier set describing an entity in either a local or universal context
			Building *struct {
				// NamespaceId A locally unique identifier
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId An identifier that is universally unique within a given context
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType A code describing the context in which the universal id is unique
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"building,omitempty"`

			// Department Object defining an identifier set describing an entity in either a local or universal context
			Department *struct {
				// NamespaceId A locally unique identifier
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId An identifier that is universally unique within a given context
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType A code describing the context in which the universal id is unique
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"department,omitempty"`

			// Facility Object defining an identifier set describing an entity in either a local or universal context
			Facility *struct {
				// NamespaceId A locally unique identifier
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId An identifier that is universally unique within a given context
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType A code describing the context in which the universal id is unique
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"facility,omitempty"`
		} `json:"priorPatientLocation,omitempty"`

		// Procedures (Epic only) List of procedures (PR1). Also note: what is populated here is likely to vary greatly between health systems.
		Procedures *[]struct {
			// AssociatedDiagnosisCode Associated diagnosis code (PR1-15)
			AssociatedDiagnosisCode *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"associatedDiagnosisCode,omitempty"`

			// ProcedureCode Procedure code (PR1-3)
			ProcedureCode *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"procedureCode,omitempty"`

			// ProcedureCodingMethod Procedure coding method (PR1-2)
			ProcedureCodingMethod *string `json:"procedureCodingMethod,omitempty"`

			// ProcedureDateTime Procedure date/time (PR1-5)
			ProcedureDateTime *string `json:"procedureDateTime,omitempty"`

			// ProcedureDescription Procedure description (PR1-4)
			ProcedureDescription *string `json:"procedureDescription,omitempty"`
		} `json:"procedures,omitempty"`

		// ReferringProvider A list of provider identifiers for the referring provider (PV1-8)
		ReferringProvider *[]struct {
			// FamilyName Provider last name (XCN.2)
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name (XCN.3)
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number (XCN.1)
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"referringProvider,omitempty"`

		// TriggerEvent ADT Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`

		// VisitId Visit Id (PV1-19 for Epic, PID-18 for Cerner)
		VisitId *struct {
			// Id Visit Id (PV1-19.1 for Epic, PID-18.1 for Cerner)
			Id *string `json:"id,omitempty"`

			// Type Visit Id Type ('CSN' for Epic, PID-18.4 for Cerner)
			Type *string `json:"type,omitempty"`
		} `json:"visitId,omitempty"`

		// VisitLevelPersonnel (Epic only) List of encounter level treatment team personnel information (ROL segments after PVI/PV2)
		VisitLevelPersonnel *[]struct {
			// PersonnelName List of names for this provider (ROL-4)
			PersonnelName *[]struct {
				// FamilyName Provider last name (XCN.2)
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name (XCN.3)
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number (XCN.1)
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"personnelName,omitempty"`

			// PersonnelRole Provider role (ROL-3)
			PersonnelRole *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"personnelRole,omitempty"`

			// ProviderType Provider type (ROL-9)
			ProviderType *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"providerType,omitempty"`

			// RoleBeginDate Treatment/Care team assignment start date (ROL-5)
			RoleBeginDate *time.Time `json:"roleBeginDate,omitempty"`

			// RoleEndDate Treatment/Care team assignment end date (ROL-6)
			RoleEndDate *time.Time `json:"roleEndDate,omitempty"`
		} `json:"visitLevelPersonnel,omitempty"`
	} `json:"admitDischargeTransferV1,omitempty"`

	// AppointmentOrderV1 HL7 SIU appointment data The appointmentOrderV1 dataset supports Epic only. Subscribers who want to receive this dataset from Cerner should use the appointmentOrderV2 dataset
	AppointmentOrderV1 *struct {
		// AdmitDateTime Admit Date/Time (PV1-45)
		AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

		// AdmittingProvider List of admitting provider (PV1-17)
		AdmittingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"admittingProvider,omitempty"`

		// AlternateVisitId Alternate Visit ID (PV1-50)
		AlternateVisitId *string `json:"alternateVisitId,omitempty"`

		// AppointmentDuration Appointment Duration (SCH-9)
		AppointmentDuration *float32 `json:"appointmentDuration,omitempty"`

		// AppointmentDurationUnit Appointment Duration Units (SCH-10)
		AppointmentDurationUnit *string `json:"appointmentDurationUnit,omitempty"`

		// AppointmentInformation List of appointment information
		AppointmentInformation *[]struct {
			// AppointmentLocation Object defining appointment location (RGS-3.X)
			AppointmentLocation *struct {
				// ResourceGroupId Resource group id (RGS-3.1)
				ResourceGroupId *string `json:"resourceGroupId,omitempty"`

				// ResourceGroupName Resource group name (RGS-3.2)
				ResourceGroupName *string `json:"resourceGroupName,omitempty"`
			} `json:"appointmentLocation,omitempty"`
			PersonnelProvider *[]struct {
				// Id Personnel id
				Id *string `json:"id,omitempty"`

				// Providers List of personnel provider
				Providers *[]struct {
					// FamilyName Provider last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"providers,omitempty"`

				// Text Personnel description
				Text *string `json:"text,omitempty"`
			} `json:"personnelProvider,omitempty"`

			// Services List of appointment services
			Services *[]struct {
				// DateTimeOfService Date time of appointment (AIS-4)
				DateTimeOfService *time.Time `json:"dateTimeOfService,omitempty"`

				// Service List of appointment service details
				Service *[]struct {
					// UniversalServiceIdentifierId Universal service identifier id | Epic: AIS-3.1 | Cerner: SCH-7.1
					UniversalServiceIdentifierId *string `json:"universalServiceIdentifierId,omitempty"`

					// UniversalServiceIdentifierText Universal service identifier text | Epic AIS-3.2 | Cerner: SCH-7.2
					UniversalServiceIdentifierText *string `json:"universalServiceIdentifierText,omitempty"`
				} `json:"service,omitempty"`
			} `json:"services,omitempty"`
		} `json:"appointmentInformation,omitempty"`

		// AppointmentStartDateTime Date/Time of Appointment (SCH-11.4)
		AppointmentStartDateTime *time.Time `json:"appointmentStartDateTime,omitempty"`

		// AssignedPatientLocation Hospital Location abbreviation (PV1-3.4)
		AssignedPatientLocation *struct {
			// NamespaceId Namespace id
			NamespaceId *string `json:"namespaceId,omitempty"`

			// UniversalId Universal id
			UniversalId *string `json:"universalId,omitempty"`

			// UniversalIdType Universal id type
			UniversalIdType *string `json:"universalIdType,omitempty"`
		} `json:"assignedPatientLocation,omitempty"`

		// AttendingProvider List of attending provider (PV1-7)
		AttendingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"attendingProvider,omitempty"`

		// CancelReason Cancel Reason (SCH-6)
		CancelReason *string `json:"cancelReason,omitempty"`

		// ConsultingProvider List of consulting provider (PV1-9)
		ConsultingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"consultingProvider,omitempty"`

		// DischargeDateTime Discharge Date/Time (PV1-45)
		DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

		// DischargeDisposition Discharge disposition (PV1-36)
		DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

		// FillerAppointmentId Appointment Serial Number (SCH-2)
		FillerAppointmentId *string `json:"fillerAppointmentId,omitempty"`

		// Handicap Handicap (PD1-6)
		Handicap *string `json:"handicap,omitempty"`

		// HospitalService Hospital service (PV1-10)
		HospitalService *string `json:"hospitalService,omitempty"`

		// MessageType SIU Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`
		Notes       *[]struct {
			// Comments Comment (NTE-3.3)
			Comments *[]string `json:"comments,omitempty"`

			// SetId Set Id  (NTE-3.1)
			SetId *string `json:"setId,omitempty"`

			// SourceOfComment Source of comment (NTE-3.2)
			SourceOfComment *string `json:"sourceOfComment,omitempty"`
		} `json:"notes,omitempty"`

		// PatientAccountNumber Patient Account Number OR CSN (PID-18)
		PatientAccountNumber *string `json:"patientAccountNumber,omitempty"`

		// PatientClass Patient class (PV1-2)
		PatientClass *string `json:"patientClass,omitempty"`

		// PatientDeathIndicator Patient Death Indicator (PID-30)
		PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

		// PatientIdList Patient identifier list (PID-3.1/PID-3.5)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientType Patient type (PV1-18)
		PatientType *string `json:"patientType,omitempty"`

		// PrimaryCareProvider List of primary care provider (PD1-4)
		PrimaryCareProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"primaryCareProvider,omitempty"`

		// ReferringProvider List of referring provider (PV1-8)
		ReferringProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"referringProvider,omitempty"`

		// SchedulingStatusId Appointment Status ID (SCH-25.1)
		SchedulingStatusId *string `json:"schedulingStatusId,omitempty"`

		// SchedulingStatusText Appointment Status Text (SCH-25.2)
		SchedulingStatusText *string `json:"schedulingStatusText,omitempty"`

		// TriggerEvent SIU Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`

		// VisitNumber Visit number (PV1-19)
		VisitNumber *string `json:"visitNumber,omitempty"`
	} `json:"appointmentOrderV1,omitempty"`

	// AppointmentOrderV2 HL7 SIU appointment data agnostic to ehr vendor (cerner/epic)
	AppointmentOrderV2 *struct {
		// AdmitDateTime Admit Date/Time (PV1-44)
		AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

		// AdmittingProvider List of admitting provider (PV1-17) | identifierTypeCode - Epic (PV1-17.13) | Cerner (PV1-17.9)
		AdmittingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"admittingProvider,omitempty"`

		// AlternateVisitId Alternate Visit ID (PV1-50)
		AlternateVisitId *string `json:"alternateVisitId,omitempty"`

		// AppointmentDuration Appointment Duration (SCH-9)
		AppointmentDuration *float32 `json:"appointmentDuration,omitempty"`

		// AppointmentDurationUnit Appointment Duration Units (SCH-10)
		AppointmentDurationUnit *string `json:"appointmentDurationUnit,omitempty"`

		// AppointmentId Appointment Identifier | Epic (SCH-2) | Cerner (SCH-1)
		AppointmentId *string `json:"appointmentId,omitempty"`

		// AppointmentInformation List of appointment information
		AppointmentInformation *[]struct {
			// AppointmentLocation Object defining appointment location - CERNER ONLY
			AppointmentLocation *struct {
				// Building Building AIL-3.7
				Building *struct {
					// NamespaceId Namespace id
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId Universal id
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType Universal id type
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"building,omitempty"`

				// Department Department AIL-3.1
				Department *struct {
					// NamespaceId Namespace id
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId Universal id
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType Universal id type
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"department,omitempty"`

				// Facility Facility AIL-3.4
				Facility *struct {
					// NamespaceId Namespace id
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId Universal id
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType Universal id type
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"facility,omitempty"`
			} `json:"appointmentLocation,omitempty"`

			// DepartmentId Epic RGS-3.1 | Cerner - Not supported (use AppointmentLocation)
			DepartmentId *string `json:"departmentId,omitempty"`

			// DepartmentName Epic RGS-3.2 | Cerner - Not supported (use AppointmentLocation)
			DepartmentName *string `json:"departmentName,omitempty"`

			// PersonnelProvider List of Personnel Provider
			PersonnelProvider *[]struct {
				// Providers List of personnel provider | identifierTypeCode - Epic AIP-3.13 | Cerner AIP-3.9
				Providers *[]struct {
					// FamilyName Provider last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"providers,omitempty"`
				ResourceRole *struct {
					// Identifier Personnel id AIP-4.1
					Identifier *string `json:"identifier,omitempty"`

					// Text Personnel description AIP-4.2
					Text *string `json:"text,omitempty"`
				} `json:"resourceRole,omitempty"`
			} `json:"personnelProvider,omitempty"`

			// Services List of appointment services
			Services *[]struct {
				// Service List of appointment service details
				Service *[]struct {
					// UniversalServiceIdentifierId Universal service identifier id | Epic: AIS-3.1 | Cerner: SCH-7.1
					UniversalServiceIdentifierId *string `json:"universalServiceIdentifierId,omitempty"`

					// UniversalServiceIdentifierText Universal service identifier text | Epic AIS-3.2 | Cerner: SCH-7.2
					UniversalServiceIdentifierText *string `json:"universalServiceIdentifierText,omitempty"`
				} `json:"service,omitempty"`

				// StartDateTime Date time of appointment (AIS-4)
				StartDateTime *time.Time `json:"startDateTime,omitempty"`
			} `json:"services,omitempty"`
		} `json:"appointmentInformation,omitempty"`

		// AppointmentStartDateTime Date/Time of Appointment (SCH-11.4)
		AppointmentStartDateTime *time.Time `json:"appointmentStartDateTime,omitempty"`

		// AssignedPatientLocation Appointment Patient Location (PV1-3)
		AssignedPatientLocation *struct {
			// Building Building (PV1-3.7) - (often not populated)
			Building *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"building,omitempty"`

			// Department Department (PV1-3.1)
			Department *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"department,omitempty"`

			// Facility Facility (PV1-3.4)
			Facility *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"facility,omitempty"`
		} `json:"assignedPatientLocation,omitempty"`

		// AttendingProvider List of attending provider (PV1-7) | identifierTypeCode - Epic (PV1-7.13) | Cerner (PV1-7.9)
		AttendingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"attendingProvider,omitempty"`

		// CancelReason Cancel Reason (SCH-6)
		CancelReason *string `json:"cancelReason,omitempty"`

		// ConsultingProvider List of consulting provider (PV1-9) | identifierTypeCode - Epic (PV1-9.13) | Cerner (PV1-9.9)
		ConsultingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"consultingProvider,omitempty"`

		// DischargeDateTime Discharge Date/Time (PV1-45)
		DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

		// DischargeDisposition Discharge disposition (PV1-36)
		DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

		// Handicap Handicap (PD1-6)
		Handicap *string `json:"handicap,omitempty"`

		// HospitalService Hospital service (PV1-10)
		HospitalService *string `json:"hospitalService,omitempty"`

		// MessageType SIU Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`
		Notes       *[]struct {
			// Comments Comment (NTE-3.3)
			Comments *[]string `json:"comments,omitempty"`

			// SetId Set Id  (NTE-3.1)
			SetId *string `json:"setId,omitempty"`

			// SourceOfComment Source of comment (NTE-3.2)
			SourceOfComment *string `json:"sourceOfComment,omitempty"`
		} `json:"notes,omitempty"`

		// PatientClass Patient class (PV1-2)
		PatientClass *string `json:"patientClass,omitempty"`

		// PatientDeathIndicator Patient Death Indicator (PID-30)
		PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

		// PatientIdList Patient identifier list | Epic (PID-3.1/PID-3.5) | Cerner (PID-3.1/PID-3.4)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientType Patient type (PV1-18)
		PatientType *string `json:"patientType,omitempty"`

		// PrimaryCareProvider List of primary care provider (PD1-4) | identifierTypeCode - Epic (PD1-4.13) | Cerner (PD1-4.9)
		PrimaryCareProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"primaryCareProvider,omitempty"`

		// ReferringProvider List of referring provider (PV1-8) | identifierTypeCode - Epic (PV1-8.13) | Cerner (PV1-8.9)
		ReferringProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"referringProvider,omitempty"`

		// SchedulingStatusId Appointment Status ID (SCH-25.1)
		SchedulingStatusId *string `json:"schedulingStatusId,omitempty"`

		// SchedulingStatusText Appointment Status Text (SCH-25.2)
		SchedulingStatusText *string `json:"schedulingStatusText,omitempty"`

		// TriggerEvent SIU Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`

		// VisitId Epic (PV1-19/CSN); CSN is Hardcoded | Cerner (PID-18.1/PID-18.4); PID 18.4 is alias of the alias pool
		VisitId *struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"visitId,omitempty"`
	} `json:"appointmentOrderV2,omitempty"`

	// CoverageV1 Visit level coverage data. The dataset will include the latest insurance information we have received which was associated with the same visit as the order. The coverageV1 dataset is sourced exclusively from HL7 messages via the IN1 segment in ADT A03, A04, and A08 messages
	CoverageV1 *[]struct {
		// CompanyPlanCode Company Plan Code (IN1-35)
		CompanyPlanCode *string `json:"companyPlanCode,omitempty"`

		// CoverageType Coverage Type (IN1-47)
		CoverageType *string `json:"coverageType,omitempty"`

		// FilingOrder Coord Of Ben. Priority (IN1-22)
		FilingOrder *string `json:"filingOrder,omitempty"`

		// Group Object defining coverage group information
		Group *struct {
			// GroupEmployerName Cerner ONLY - Insured's Group Emp Organization Name (IN1-11.0.1)
			GroupEmployerName *string `json:"groupEmployerName,omitempty"`

			// GroupName Insured's Group Name (IN1-9.0.1)
			GroupName *[]string `json:"groupName,omitempty"`

			// GroupNumber Group Number (IN1-8.1)
			GroupNumber *string `json:"groupNumber,omitempty"`
		} `json:"group,omitempty"`

		// InsuredIndividual Object defining coverage insured individual information
		InsuredIndividual *struct {
			// AdministrativeSex Insured's Administrative Sex (IN1-43)
			AdministrativeSex *string `json:"administrativeSex,omitempty"`

			// EmploymentStatus Insured's Employment Status (IN1-42.1)
			EmploymentStatus *string `json:"employmentStatus,omitempty"`

			// IdNumber Insured's ID Number (IN1-49)
			IdNumber *string `json:"idNumber,omitempty"`
		} `json:"insuredIndividual,omitempty"`

		// Payor Object defining coverage payor information
		Payor *struct {
			// Address Insurance Company Address (IN1-5.0)
			Address *[]struct {
				// City City name
				City *string `json:"city,omitempty"`

				// Country Country name
				Country *string `json:"country,omitempty"`

				// District District name
				District *string `json:"district,omitempty"`

				// Line List of street name, number, direction & P.O. Box etc
				Line *[]string `json:"line,omitempty"`

				// PostalCode Postal code for area
				PostalCode *string `json:"postalCode,omitempty"`

				// State State name or abbreviation
				State *string `json:"state,omitempty"`

				// Text Full address
				Text *string `json:"text,omitempty"`
			} `json:"address,omitempty"`

			// Id Insurance Company ID (IN1-3.0.1)
			Id *[]string `json:"id,omitempty"`

			// Name Insurance Company Name (IN1-4.0.1)
			Name *[]string `json:"name,omitempty"`
		} `json:"payor,omitempty"`

		// Plan Object defining coverage plan information
		Plan *struct {
			// EffectiveDate Plan Effective Date (IN1-12)
			EffectiveDate *string `json:"effectiveDate,omitempty"`

			// ExpirationDate Plan Expiration Date (IN1-13)
			ExpirationDate *string `json:"expirationDate,omitempty"`

			// Id Insurance Plan ID (IN1-2.1)
			Id *string `json:"id,omitempty"`

			// Name Insurance Plan ID Name (IN1-2.2)
			Name *string `json:"name,omitempty"`

			// Type Plan Type (IN1-15)
			Type *string `json:"type,omitempty"`
		} `json:"plan,omitempty"`

		// Subscriber Object defining coverage subscriber information
		Subscriber *struct {
			// Address Insured's Address (IN1-19.0)
			Address *[]struct {
				// City City name
				City *string `json:"city,omitempty"`

				// Country Country name
				Country *string `json:"country,omitempty"`

				// District District name
				District *string `json:"district,omitempty"`

				// Line List of street name, number, direction & P.O. Box etc
				Line *[]string `json:"line,omitempty"`

				// PostalCode Postal code for area
				PostalCode *string `json:"postalCode,omitempty"`

				// State State name or abbreviation
				State *string `json:"state,omitempty"`

				// Text Full address
				Text *string `json:"text,omitempty"`
			} `json:"address,omitempty"`

			// DateOfBirth Insured's Date Of Birth (IN1-18.1)
			DateOfBirth *string `json:"dateOfBirth,omitempty"`

			// Id Policy Number (IN1-36)
			Id *string `json:"id,omitempty"`

			// Name Name Of Insured (IN1-16.0)
			Name *[]struct {
				// FamilyName Individual last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Individual first name
				GivenName *string `json:"givenName,omitempty"`

				// NameTypeCode Individual relationship to patient
				NameTypeCode *string `json:"nameTypeCode,omitempty"`
			} `json:"name,omitempty"`

			// RelationshipToPatient Insured's Relationship To Patient (IN1-17.1)
			RelationshipToPatient *string `json:"relationshipToPatient,omitempty"`
		} `json:"subscriber,omitempty"`

		// VerificationStatus Verification Status (IN1-45)
		VerificationStatus *string `json:"verificationStatus,omitempty"`
	} `json:"coverageV1,omitempty"`

	// DischargeV1 HL7 ADT discharge data. Note: this dataset is Epic-only. It is recommended that new integrations utilize the admitDischargeTransferV1 dataset instead, as it supports Cerner as well.
	DischargeV1 *struct {
		// AdditionalDemographics Object defining additional demographic information
		AdditionalDemographics *struct {
			// Handicap Handicap (PD1-6)
			Handicap *string `json:"handicap,omitempty"`

			// PrimaryCareProvider List of patient's primary care providers (PD1-4)
			PrimaryCareProvider *[]struct {
				// AssigningAuthority Assigning authority
				AssigningAuthority *string `json:"assigningAuthority,omitempty"`

				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"primaryCareProvider,omitempty"`
		} `json:"additionalDemographics,omitempty"`

		// DiagnosisInformation List of diagnosis information
		DiagnosisInformation *[]struct {
			// Code A reference to a code defined by a terminology system
			Code *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"code,omitempty"`

			// CodingMethod Diagnosis coding method (DG1-2)
			CodingMethod *string `json:"codingMethod,omitempty"`

			// DateTime Diagnosis date/time (DG1-5)
			DateTime *time.Time `json:"dateTime,omitempty"`

			// Description Diagnosis description (DG1-4)
			Description *string `json:"description,omitempty"`

			// PresentOnAdmission Diagnosis present on admission (DG1-26)
			PresentOnAdmission *string `json:"presentOnAdmission,omitempty"`
		} `json:"diagnosisInformation,omitempty"`

		// GuarantorInformation List of guarantor information
		GuarantorInformation *[]struct {
			// EmployerName Guarantor employer name (GT1-16)
			EmployerName *string `json:"employerName,omitempty"`

			// Name Object defining individual
			Name *struct {
				// FamilyName Individual last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Individual first name
				GivenName *string `json:"givenName,omitempty"`

				// NameTypeCode Individual relationship to patient
				NameTypeCode *string `json:"nameTypeCode,omitempty"`
			} `json:"name,omitempty"`

			// Relationship Guarantor relationship to patient (GT1-11)
			Relationship *string `json:"relationship,omitempty"`

			// Type Guarantor type (GT1-10)
			Type *string `json:"type,omitempty"`
		} `json:"guarantorInformation,omitempty"`

		// MessageType ADT Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`

		// PatientIdList Patient identifier list (PID-3.1/PID-3.5)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientIdentificationAdditionalInformation Object defining additional patient information (ZPD-X)
		PatientIdentificationAdditionalInformation *struct {
			// ExpectedDeliveryDate Expected delivery date
			ExpectedDeliveryDate *string `json:"expectedDeliveryDate,omitempty"`

			// MultipleBirthTotal Multiple birth indicator (ZPD-3)
			MultipleBirthTotal *string `json:"multipleBirthTotal,omitempty"`

			// MyChartStatus MyChart activation status (ZPD-4)
			MyChartStatus *string `json:"myChartStatus,omitempty"`

			// PreferredCommunicationMethod List of patient preferred communication method (ZPD-2)
			PreferredCommunicationMethod *[]string `json:"preferredCommunicationMethod,omitempty"`

			// PregnancyFlag Pregnancy flag (ZPD-7)
			PregnancyFlag *string `json:"pregnancyFlag,omitempty"`

			// TransplantPatientFlag Transplant patient flag
			TransplantPatientFlag *string `json:"transplantPatientFlag,omitempty"`
		} `json:"patientIdentificationAdditionalInformation,omitempty"`

		// PatientLevelPersonnel List of patient level care team personnel information (ROL segments after PID)
		PatientLevelPersonnel *[]struct {
			// PersonnelName Object defining provider information
			PersonnelName *struct {
				// AssigningAuthority Assigning authority
				AssigningAuthority *string `json:"assigningAuthority,omitempty"`

				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"personnelName,omitempty"`

			// PersonnelRole A reference to a code defined by a terminology system
			PersonnelRole *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"personnelRole,omitempty"`

			// ProviderType A reference to a code defined by a terminology system
			ProviderType *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"providerType,omitempty"`

			// RoleBeginDate Treatment/Care team assignment start date
			RoleBeginDate *time.Time `json:"roleBeginDate,omitempty"`

			// RoleEndDate Treatment/Care team assignment end date
			RoleEndDate *time.Time `json:"roleEndDate,omitempty"`
		} `json:"patientLevelPersonnel,omitempty"`

		// PatientVisit Object defining patient visit information (PV1-X)
		PatientVisit *struct {
			// AdmitDateTime Admit date/time (PV1-44)
			AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

			// AdmittingDoctor List of admitting providers (PV1-17)
			AdmittingDoctor *[]struct {
				// AssigningAuthority Assigning authority
				AssigningAuthority *string `json:"assigningAuthority,omitempty"`

				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"admittingDoctor,omitempty"`

			// AssignedPatientLocation Hospital location abbreviation (PV1-3.4)
			AssignedPatientLocation *string `json:"assignedPatientLocation,omitempty"`

			// AttendingDoctor List of attending providers (PV1-7)
			AttendingDoctor *[]struct {
				// AssigningAuthority Assigning authority
				AssigningAuthority *string `json:"assigningAuthority,omitempty"`

				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"attendingDoctor,omitempty"`

			// DischargeDateTime Discharge date/time (PV1-45)
			DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

			// DischargeDestination Discharge destination (PV1-37)
			DischargeDestination *string `json:"dischargeDestination,omitempty"`

			// DischargeDisposition Discharge disposition (PV1-36)
			DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

			// HospitalService Hospital service (PV1-10)
			HospitalService *string `json:"hospitalService,omitempty"`

			// PatientClass Patient class (PV1-2)
			PatientClass *string `json:"patientClass,omitempty"`

			// PatientDeathIndicator Patient death indicator (PID-30)
			PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

			// VipIndicator VIP indicator (PV1-16)
			VipIndicator *string `json:"vipIndicator,omitempty"`

			// VisitNumber Visit number
			VisitNumber *string `json:"visitNumber,omitempty"`
		} `json:"patientVisit,omitempty"`

		// PatientVisitAdditionalInformation Object defining additional patient visit information (PV2-3)
		PatientVisitAdditionalInformation *struct {
			// AdmitReason A reference to a code defined by a terminology system
			AdmitReason *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"admitReason,omitempty"`

			// LastMenstrualPeroid Last menstrual period (ZPV-6)
			LastMenstrualPeroid *string `json:"lastMenstrualPeroid,omitempty"`
		} `json:"patientVisitAdditionalInformation,omitempty"`

		// TriggerEvent ADT Trigger Event ID (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`

		// VisitLevelPersonnel List of encounter level treatment team personnel information (ROL segments after PVI/PV2)
		VisitLevelPersonnel *[]struct {
			// PersonnelName Object defining provider information
			PersonnelName *struct {
				// AssigningAuthority Assigning authority
				AssigningAuthority *string `json:"assigningAuthority,omitempty"`

				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"personnelName,omitempty"`

			// PersonnelRole A reference to a code defined by a terminology system
			PersonnelRole *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"personnelRole,omitempty"`

			// ProviderType A reference to a code defined by a terminology system
			ProviderType *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"providerType,omitempty"`

			// RoleBeginDate Treatment/Care team assignment start date
			RoleBeginDate *time.Time `json:"roleBeginDate,omitempty"`

			// RoleEndDate Treatment/Care team assignment end date
			RoleEndDate *time.Time `json:"roleEndDate,omitempty"`
		} `json:"visitLevelPersonnel,omitempty"`
	} `json:"dischargeV1,omitempty"`

	// SurgicalCaseEventV1 HL7 SIU surgery data
	SurgicalCaseEventV1 *struct {
		// CancelReason Cancel Reason (SCH-6)
		CancelReason *string `json:"cancelReason,omitempty"`

		// CaseNumber Case/Log number (SCH-2)
		CaseNumber *string `json:"caseNumber,omitempty"`

		// CaseProgressStatusId Case progress status ID (SCH-25.4)
		CaseProgressStatusId *string `json:"caseProgressStatusId,omitempty"`

		// CaseProgressStatusText Case progress status text (SCH-25.5)
		CaseProgressStatusText *string `json:"caseProgressStatusText,omitempty"`

		// CaseSchedulingStatusId Case scheduling status ID (SCH-25.1)
		CaseSchedulingStatusId *string `json:"caseSchedulingStatusId,omitempty"`

		// CaseSchedulingStatusText Case scheduling status text (SCH-25.2)
		CaseSchedulingStatusText *string `json:"caseSchedulingStatusText,omitempty"`

		// ContactSerialNumber Visit number (PV1-19)
		ContactSerialNumber *string `json:"contactSerialNumber,omitempty"`

		// DateTimeOfSurgery Date/Time of surgery (SCH-11.4)
		DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

		// HospitalLocationAbbreviation Hospital location abbreviation (PV1-3.4)
		HospitalLocationAbbreviation *string `json:"hospitalLocationAbbreviation,omitempty"`

		// Laterality Laterality (AIS-12)
		Laterality *string `json:"laterality,omitempty"`

		// MessageType SIU Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`

		// OriginalCaseNumber Original case/log number (SCH-24)
		OriginalCaseNumber *string `json:"originalCaseNumber,omitempty"`

		// PatientIdList Patient identifier list (PID-3.1/PID-3.5)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientType Patient type (PV1-2)
		PatientType *string `json:"patientType,omitempty"`

		// SurgicalProcedureLocations List of surgical procedure location information
		SurgicalProcedureLocations *[]struct {
			// LocationId Case location ID (AIL-3.2)
			LocationId *string `json:"locationId,omitempty"`

			// LocationName Case location name (AIL-3.4)
			LocationName *string `json:"locationName,omitempty"`
		} `json:"surgicalProcedureLocations,omitempty"`

		// SurgicalProcedures List of surgical procedure information
		SurgicalProcedures *[]struct {
			// DateTimeOfSurgery Date/Time of surgery (AIS-4)
			DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

			// SurgicalProcedureId Surgical procedure ID (AIS-3.1)
			SurgicalProcedureId *string `json:"surgicalProcedureId,omitempty"`

			// SurgicalProcedureName Surgical procedure name (AIS-3.2)
			SurgicalProcedureName *string `json:"surgicalProcedureName,omitempty"`
		} `json:"surgicalProcedures,omitempty"`

		// SurgicalService Surgical service (PV1-10)
		SurgicalService *string `json:"surgicalService,omitempty"`

		// SurgicalStaffPersonnel List of surgical staff personnel information
		SurgicalStaffPersonnel *[]struct {
			// PersonnelId List of provider identifiers (AIP-3.1)
			PersonnelId *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"personnelId,omitempty"`

			// PersonnelName Name of provider
			PersonnelName *struct {
				// Family Provider last name (AIP-3.2)
				Family *string `json:"family,omitempty"`

				// Given Provider first name (AIP-3.3)
				Given *string `json:"given,omitempty"`
			} `json:"personnelName,omitempty"`

			// PersonnelRole Provider role (AIP-4.2)
			PersonnelRole *string `json:"personnelRole,omitempty"`
		} `json:"surgicalStaffPersonnel,omitempty"`

		// TriggerEvent SIU Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`
	} `json:"surgicalCaseEventV1,omitempty"`

	// SurgicalCaseEventV2 HL7 SIU surgery data
	SurgicalCaseEventV2 *struct {
		// CancelReason Cancel Reason (SCH-6)
		CancelReason *string `json:"cancelReason,omitempty"`

		// CaseNumber Case/Log number (SCH-2)
		CaseNumber *string `json:"caseNumber,omitempty"`

		// CaseProgressStatusId Case progress status ID (SCH-25.4)
		CaseProgressStatusId *string `json:"caseProgressStatusId,omitempty"`

		// CaseProgressStatusText Case progress status text (SCH-25.5)
		CaseProgressStatusText *string `json:"caseProgressStatusText,omitempty"`

		// CaseSchedulingStatusId Case scheduling status ID (SCH-25.1)
		CaseSchedulingStatusId *string `json:"caseSchedulingStatusId,omitempty"`

		// CaseSchedulingStatusText Case scheduling status text (SCH-25.2)
		CaseSchedulingStatusText *string `json:"caseSchedulingStatusText,omitempty"`

		// ContactSerialNumber Visit number (PV1-19)
		ContactSerialNumber *string `json:"contactSerialNumber,omitempty"`

		// DateTimeOfSurgery Date/Time of surgery (SCH-11.4)
		DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

		// HospitalLocationAbbreviation Hospital location abbreviation (PV1-3.4)
		HospitalLocationAbbreviation *string `json:"hospitalLocationAbbreviation,omitempty"`

		// MessageType SIU Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`

		// OriginalCaseNumber Original case/log number (SCH-24)
		OriginalCaseNumber *string `json:"originalCaseNumber,omitempty"`

		// PatientIdList Patient identifier list (PID-3.1/PID-3.5)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientType Patient type (PV1-2)
		PatientType *string `json:"patientType,omitempty"`

		// ResourceGroups Resource group list
		ResourceGroups *[]struct {
			// SurgicalProcedureLocations List of surgical procedure location information
			SurgicalProcedureLocations *[]struct {
				// LocationId Case location ID (AIL-3.2)
				LocationId *string `json:"locationId,omitempty"`

				// LocationName Case location name (AIL-3.4)
				LocationName *string `json:"locationName,omitempty"`
			} `json:"surgicalProcedureLocations,omitempty"`

			// SurgicalProcedures List of surgical procedure information
			SurgicalProcedures *[]struct {
				// DateTimeOfSurgery Date/Time of surgery (AIS-4), only expected for Epic
				DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

				// LateralityText Laterality text description (AIS-12.2), not supported by Cerner
				LateralityText *string `json:"lateralityText,omitempty"`

				// LateralityValue Laterality code value (AIS-12.1), not supported by Cerner
				LateralityValue *string `json:"lateralityValue,omitempty"`

				// Procedure List of surgical procedure detail information
				Procedure *[]struct {
					// SurgicalProcedureId Surgical procedure ID (AIS-3.1)
					SurgicalProcedureId *string `json:"surgicalProcedureId,omitempty"`

					// SurgicalProcedureName Surgical procedure name (AIS-3.2)
					SurgicalProcedureName *string `json:"surgicalProcedureName,omitempty"`
				} `json:"procedure,omitempty"`
			} `json:"surgicalProcedures,omitempty"`

			// SurgicalStaffPersonnel List of surgical staff personnel information
			SurgicalStaffPersonnel *[]struct {
				// PersonnelId List of provider identifiers (AIP-3.1)
				PersonnelId *[]struct {
					// Id Value of the identifier for the individual
					Id *string `json:"id,omitempty"`

					// Type Defines the type of identifier associated with the id
					Type *string `json:"type,omitempty"`
				} `json:"personnelId,omitempty"`

				// PersonnelName Name of provider
				PersonnelName *struct {
					// Family Provider last name (AIP-3.2)
					Family *string `json:"family,omitempty"`

					// Given Provider first name (AIP-3.3)
					Given *string `json:"given,omitempty"`
				} `json:"personnelName,omitempty"`

				// PersonnelRole Provider role (AIP-4.2)
				PersonnelRole *string `json:"personnelRole,omitempty"`
			} `json:"surgicalStaffPersonnel,omitempty"`
		} `json:"resourceGroups,omitempty"`

		// SurgicalService Surgical service (PV1-10)
		SurgicalService *string `json:"surgicalService,omitempty"`

		// TriggerEvent SIU Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`
	} `json:"surgicalCaseEventV2,omitempty"`

	// SurgicalCaseEventV3 HL7 SIU surgery data agnostic to EHR vendor (Cerner/Epic). For Cerner, this dataset can't be sent on an Update partner notification type. This is because Cerner does not support S14 update messages.
	SurgicalCaseEventV3 *struct {
		// AssignedPatientLocation Assigned patient location
		AssignedPatientLocation *struct {
			Building *struct {
				// NamespaceId Building (PV1-3.7)
				NamespaceId *string `json:"namespaceId,omitempty"`
			} `json:"building,omitempty"`
			Department *struct {
				// NamespaceId Department (PV1-3.1)
				NamespaceId *string `json:"namespaceId,omitempty"`
			} `json:"department,omitempty"`
			Facility *struct {
				// NamespaceId Facility namespace ID (PV1-3.4.1)
				NamespaceId *string `json:"namespaceId,omitempty"`
			} `json:"facility,omitempty"`
		} `json:"assignedPatientLocation,omitempty"`

		// CancelReason Cancel Reason (SCH-6)
		CancelReason *string `json:"cancelReason,omitempty"`

		// CaseId Case/Log number (SCH-2.1)
		CaseId *string `json:"caseId,omitempty"`

		// CaseProgressStatusId Case progress status ID (SCH-25.4), only expected for Epic
		CaseProgressStatusId *string `json:"caseProgressStatusId,omitempty"`

		// CaseProgressStatusText Case progress status text (SCH-25.5), only expected for Epic
		CaseProgressStatusText *string `json:"caseProgressStatusText,omitempty"`

		// CaseSchedulingStatusId Case scheduling status ID (SCH-25.1), only expected for Epic
		CaseSchedulingStatusId *string `json:"caseSchedulingStatusId,omitempty"`

		// CaseSchedulingStatusText Case scheduling status text (SCH-25.2), only expected for Epic
		CaseSchedulingStatusText *string `json:"caseSchedulingStatusText,omitempty"`

		// DateTimeOfSurgery Date/Time of surgery (SCH-11.4)
		DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

		// MessageType SIU Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`

		// OriginalCaseId Original case/log number (SCH-24), only expected for Epic
		OriginalCaseId *string `json:"originalCaseId,omitempty"`

		// PatientIdList Patient identifier list (Epic: PID-3.1/PID-3.5, Cerner: PID-3.1/PID-3.4)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientType Patient type (PV1-2)
		PatientType *string `json:"patientType,omitempty"`

		// PlacerId Case/Log number (SCH-1.1), only expected for Cerner
		PlacerId *string `json:"placerId,omitempty"`

		// ResourceGroups Resource group list
		ResourceGroups *[]struct {
			// SurgicalProcedureLocations List of surgical procedure location information
			SurgicalProcedureLocations *[]struct {
				Department *struct {
					// NamespaceId Department (AIL-3.1)
					NamespaceId *string `json:"namespaceId,omitempty"`
				} `json:"department,omitempty"`
				Facility *struct {
					// NamespaceId Facility namespace ID (AIL-3.4.1)
					NamespaceId *string `json:"namespaceId,omitempty"`
				} `json:"facility,omitempty"`
				OperatingRoom *struct {
					// NamespaceId Operating Room (AIL-3.2)
					NamespaceId *string `json:"namespaceId,omitempty"`
				} `json:"operatingRoom,omitempty"`
			} `json:"surgicalProcedureLocations,omitempty"`

			// SurgicalProcedures List of surgical procedure information
			SurgicalProcedures *[]struct {
				// DateTimeOfSurgery Date/Time of surgery (AIS-4), only expected for Epic
				DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

				// LateralityText Laterality text description (AIS-12.2), not supported by Cerner
				LateralityText *string `json:"lateralityText,omitempty"`

				// LateralityValue Laterality code value (AIS-12.1), not supported by Cerner
				LateralityValue *string `json:"lateralityValue,omitempty"`

				// Procedure List of surgical procedure detail information
				Procedure *[]struct {
					// SurgicalProcedureId Surgical procedure ID (AIS-3.1)
					SurgicalProcedureId *string `json:"surgicalProcedureId,omitempty"`

					// SurgicalProcedureName Surgical procedure name (AIS-3.2)
					SurgicalProcedureName *string `json:"surgicalProcedureName,omitempty"`
				} `json:"procedure,omitempty"`
			} `json:"surgicalProcedures,omitempty"`

			// SurgicalStaffPersonnel List of surgical staff personnel information
			SurgicalStaffPersonnel *[]struct {
				// PersonnelId List of provider identifiers (AIP-3.1) and their ID types (Epic: AIP-3.13 / Cerner: AIP-3.9.1)
				PersonnelId *[]struct {
					// Id Value of the identifier for the individual
					Id *string `json:"id,omitempty"`

					// Type Defines the type of identifier associated with the id
					Type *string `json:"type,omitempty"`
				} `json:"personnelId,omitempty"`

				// PersonnelName Name of provider
				PersonnelName *struct {
					// Family Provider last name (AIP-3.2)
					Family *string `json:"family,omitempty"`

					// Given Provider first name (AIP-3.3)
					Given *string `json:"given,omitempty"`
				} `json:"personnelName,omitempty"`

				// ResourceRole Resource role object (AIP-4.1/AIP-4.2)
				ResourceRole *struct {
					// PersonnelId Personnel Id (AIP-4.1)
					PersonnelId *string `json:"personnelId,omitempty"`

					// PersonnelRole Personnel role (Epic: AIP-4.2 / Cerner: Hardcoded as 'Primary')
					PersonnelRole *string `json:"personnelRole,omitempty"`
				} `json:"resourceRole,omitempty"`
			} `json:"surgicalStaffPersonnel,omitempty"`
		} `json:"resourceGroups,omitempty"`

		// SurgicalService Surgical service (PV1-10)
		SurgicalService *string `json:"surgicalService,omitempty"`

		// TriggerEvent SIU Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`

		// VisitId Object defining visit identifier
		VisitId *struct {
			// Id Visit Id (Epic: PV1-19 / Cerner: PID-18.1)
			Id *string `json:"id,omitempty"`

			// Type Visit Id type (Epic: Hardcoded as 'CSN' / Cerner: PID-18.4, expected for S13 only)
			Type *string `json:"type,omitempty"`
		} `json:"visitId,omitempty"`
	} `json:"surgicalCaseEventV3,omitempty"`

	// UnsolicitedOrderV1 HL7 Unsolicited Order Message (ORM) data agnostic to ehr vendor (cerner/epic)
	UnsolicitedOrderV1 *struct {
		// AdmitDateTime Admit Date/Time (PV1-44)
		AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

		// AdmittingProvider List of admitting provider (PV1-17)
		AdmittingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"admittingProvider,omitempty"`

		// AlternateVisitId Alternate Visit ID (PV1-50)
		AlternateVisitId *string `json:"alternateVisitId,omitempty"`

		// AssignedPatientLocation Appointment Patient Location (PV1-3)
		AssignedPatientLocation *struct {
			// Building Building (PV1-3.7) - (often not populated)
			Building *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"building,omitempty"`

			// Department Department (PV1-3.1)
			Department *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"department,omitempty"`

			// Facility Facility (PV1-3.4)
			Facility *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"facility,omitempty"`
		} `json:"assignedPatientLocation,omitempty"`

		// AttendingProvider List of attending provider (PV1-7)
		AttendingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"attendingProvider,omitempty"`

		// CommonOrder List of objects describing fields common to all orders
		CommonOrder *[]struct {
			// EnteredBy Identity of person who keyed the order request (ORC-10)
			EnteredBy *struct {
				// FamilyName ORC-10.3
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName ORC-10.2
				GivenName *string `json:"givenName,omitempty"`

				// Id ORC-10.1
				Id *string `json:"id,omitempty"`
			} `json:"enteredBy,omitempty"`

			// OrderControl Function of order segment (ORC-1)
			OrderControl *string `json:"orderControl,omitempty"`

			// OrderingProvider List of ordering provider (ORC-12) | identifierTypeCode - Epic (ORC-12.13) | Cerner (ORC-12.9)
			OrderingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"orderingProvider,omitempty"`

			// PlacerOrderNumber Placer application's order number (ORC-2.1)
			PlacerOrderNumber *string `json:"placerOrderNumber,omitempty"`

			// PlacerOrderNumberNamespaceId Placer application's order number namespace id (ORC-2.2)
			PlacerOrderNumberNamespaceId *string `json:"placerOrderNumberNamespaceId,omitempty"`

			// QuantityTiming Timing of order (ORC-7 for Epic, OBR-27.7 for Cerner)
			QuantityTiming *struct {
				// Condition Epic: Not Supported; Cerner: OBR-27.7
				Condition *string `json:"condition,omitempty"`

				// EndDate Epic: ORC-7.5; Cerner: OBR-27.5
				EndDate *time.Time `json:"endDate,omitempty"`

				// Interval Epic: ORC-7.2; Cerner: OBR-27.2
				Interval *string `json:"interval,omitempty"`

				// OrderType Epic: ORC-7.8; Cerner: Not Supported
				OrderType *string `json:"orderType,omitempty"`

				// Priority Epic: ORC-7.6; Cerner: OBR-27.6
				Priority *string `json:"priority,omitempty"`

				// Quantity Epic: ORC-7.1; Cerner: OBR-27.1
				Quantity *string `json:"quantity,omitempty"`

				// QuantityTotal Epic: ORC-7.12; Cerner: Not Supported
				QuantityTotal *string `json:"quantityTotal,omitempty"`

				// StartDate Epic: ORC-7.4; Cerner: OBR-27.4
				StartDate *time.Time `json:"startDate,omitempty"`
			} `json:"quantityTiming,omitempty"`

			// TransactionDateTime Date and time of transaction reflected in ORC-1 (ORC-9)
			TransactionDateTime *time.Time `json:"transactionDateTime,omitempty"`
		} `json:"commonOrder,omitempty"`

		// ConsultingProvider List of consulting provider (PV1-9)
		ConsultingProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"consultingProvider,omitempty"`

		// DischargeDateTime Discharge Date/Time (PV1-45)
		DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

		// DischargeDisposition Discharge disposition (PV1-36)
		DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

		// Handicap Handicap (PD1-6)
		Handicap *string `json:"handicap,omitempty"`

		// HospitalService Hospital service (PV1-10)
		HospitalService *string `json:"hospitalService,omitempty"`

		// MessageType ORM Message Type (MSH-9.1)
		MessageType *string `json:"messageType,omitempty"`
		Notes       *[]struct {
			// Comments Comment (NTE-3.3)
			Comments *[]string `json:"comments,omitempty"`

			// SetId Set Id  (NTE-3.1)
			SetId *string `json:"setId,omitempty"`

			// SourceOfComment Source of comment (NTE-3.2)
			SourceOfComment *string `json:"sourceOfComment,omitempty"`
		} `json:"notes,omitempty"`

		// ObservationRequest List of objects of information specific to an order for a diagnostic study or observation
		ObservationRequest *[]struct {
			// DiagnosticServiceSectionId Section of diagnostic service where observation was performed (OBR-24)
			DiagnosticServiceSectionId *string `json:"diagnosticServiceSectionId,omitempty"`

			// ObservationDateTime Clinically relevant observation date time (OBR-7)
			ObservationDateTime *time.Time `json:"observationDateTime,omitempty"`

			// OrderingProvider List of ordering provider (OBR-16) | identifierTypeCode - Epic (OBR-16.13) | Cerner (OBR-16.9)
			OrderingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"orderingProvider,omitempty"`

			// PlacerOrderNumber Placer order number (OBR-2.1)
			PlacerOrderNumber *string `json:"placerOrderNumber,omitempty"`

			// PlacerOrderNumberNamespaceId Placer order number namespace id (OBR-2.2)
			PlacerOrderNumberNamespaceId *string `json:"placerOrderNumberNamespaceId,omitempty"`

			// RequestedDateTime Requested date time (OBR-6)
			RequestedDateTime *time.Time `json:"requestedDateTime,omitempty"`

			// ScheduledDateTime Date time filler scheduled an observation (OBR-36)
			ScheduledDateTime *time.Time `json:"scheduledDateTime,omitempty"`

			// Service Actual service/content being ordered (OBR-4)
			Service *struct {
				// AlternateText Alternate text (OBR-4.5)
				AlternateText *string `json:"alternateText,omitempty"`

				// CodingSystemName Coding system name (OBR-4.3)
				CodingSystemName *string `json:"codingSystemName,omitempty"`

				// UniversalServiceIdentifierId Universal id (OBR-4.1)
				UniversalServiceIdentifierId *string `json:"universalServiceIdentifierId,omitempty"`

				// UniversalServiceIdentifierText Universal id text (OBR-4.2)
				UniversalServiceIdentifierText *string `json:"universalServiceIdentifierText,omitempty"`
			} `json:"service,omitempty"`
		} `json:"observationRequest,omitempty"`

		// OrderBasedQuestions List of objects of observation report information
		OrderBasedQuestions *[]struct {
			// Identifier Typically represents a question asked on order entry (OBX-3)
			Identifier *struct {
				// CodingSystemName OBX-3.3
				CodingSystemName *string `json:"codingSystemName,omitempty"`

				// Id OBX-3.1
				Id *string `json:"id,omitempty"`

				// Name OBX-3.2
				Name *string `json:"name,omitempty"`
			} `json:"identifier,omitempty"`

			// ResultStatus Observation result status (OBX-11)
			ResultStatus *string `json:"resultStatus,omitempty"`

			// SetId Sequence number (OBX-1)
			SetId *string `json:"setId,omitempty"`

			// Units Unit of observation value (OBX-6.1)
			Units *string `json:"units,omitempty"`

			// Value Typically represents answer(s) to question asked on order entry. This field's length and format may vary depending on the data type provided by the EHR for this segment. (OBX-5.1)
			Value *[]string `json:"value,omitempty"`

			// ValueType Defines data type of OBX-5 (OBX-2.1)
			ValueType *string `json:"valueType,omitempty"`
		} `json:"orderBasedQuestions,omitempty"`

		// PatientClass Patient class (PV1-2)
		PatientClass *string `json:"patientClass,omitempty"`

		// PatientDeathIndicator Patient Death Indicator (PID-30)
		PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

		// PatientIdList Patient identifier list (PID-3.1/PID-3.5 for Epic; PID-3.4 for Cerner)
		PatientIdList *[]struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"patientIdList,omitempty"`

		// PatientType Patient type (PV1-18)
		PatientType *string `json:"patientType,omitempty"`

		// PrimaryCareProvider List of primary care provider (PD1-4) | identifierTypeCode - Epic (PD1-4.13) | Cerner (PD1-4.9)
		PrimaryCareProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"primaryCareProvider,omitempty"`

		// ReferringProvider List of referring provider (PV1-8)
		ReferringProvider *[]struct {
			// FamilyName Provider last name
			FamilyName *string `json:"familyName,omitempty"`

			// GivenName Provider first name
			GivenName *string `json:"givenName,omitempty"`

			// IdNumber Provider id number
			IdNumber *string `json:"idNumber,omitempty"`

			// IdentifierTypeCode Provider id type
			IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
		} `json:"referringProvider,omitempty"`

		// TriggerEvent ORM Trigger Event (MSH-9.2)
		TriggerEvent *string `json:"triggerEvent,omitempty"`

		// VisitId Epic (PV1-19/CSN); CSN is Hardcoded | Cerner (PID-18.1/PID-18.4); PID 18.4 is alias of the alias pool
		VisitId *struct {
			// Id Value of the identifier for the individual
			Id *string `json:"id,omitempty"`

			// Type Defines the type of identifier associated with the id
			Type *string `json:"type,omitempty"`
		} `json:"visitId,omitempty"`
	} `json:"unsolicitedOrderV1,omitempty"`
}

// HsCreateOrderRequest defines model for HsCreateOrderRequest.
type HsCreateOrderRequest struct {
	// OrderType Identifies the type of order being created
	OrderType HsCreateOrderRequestOrderType `json:"orderType"`

	// PartnerId Value that uniquely identifies the partner associated with the order
	PartnerId string `json:"partnerId"`
	PatientId struct {
		// Id Value of the identifier for the patient
		Id string `json:"id"`

		// Origin Defines the originating system from which the id value was sourced
		Origin HsCreateOrderRequestPatientIdOrigin `json:"origin"`

		// Type Defines the type of identifier associated with the id
		Type string `json:"type"`
	} `json:"patientId"`

	// ProgramId Value that identifies the digital content associated with the order
	ProgramId string `json:"programId"`

	// ProgramTitle Value that describes the digital content associated with the order
	ProgramTitle string `json:"programTitle"`
}

// HsCreateOrderRequestOrderType Identifies the type of order being created
type HsCreateOrderRequestOrderType string

// HsCreateOrderRequestPatientIdOrigin Defines the originating system from which the id value was sourced
type HsCreateOrderRequestPatientIdOrigin string

// OrderInfo Detail information related to the order
type OrderInfo struct {
	// ContentTag Tags defining the type of digital content associated with the order
	ContentTag *[]string `json:"contentTag,omitempty"`

	// Deployment The Xealth-defined ID of the Health System
	Deployment string `json:"deployment"`

	// OrderCreationDateTime Indicates when the order was created
	OrderCreationDateTime time.Time `json:"orderCreationDateTime"`

	// OrderId Xealth-generated value that uniquely identifies the order
	OrderId string `json:"orderId"`

	// OrderSource Indicates the source system used to generate the order
	OrderSource OrderInfoOrderSource `json:"orderSource"`

	// OrderUpdateDateTime Indicates when the order was last updated
	OrderUpdateDateTime time.Time `json:"orderUpdateDateTime"`

	// PartnerId Xealth-generated value that uniquely identifies the partner associated with the order
	PartnerId string `json:"partnerId"`

	// ProgramId Xealth-generated value that identifies the digital content associated with the order
	ProgramId string `json:"programId"`
}

// OrderInfoOrderSource Indicates the source system used to generate the order
type OrderInfoOrderSource string

// PartnerCreateOrderRequest defines model for PartnerCreateOrderRequest.
type PartnerCreateOrderRequest struct {
	// OrderType Identifies the type of order being created
	OrderType PartnerCreateOrderRequestOrderType `json:"orderType"`

	// PartnerId Value that uniquely identifies the partner associated with the enrollment
	PartnerId string `json:"partnerId"`
	PatientId struct {
		// Id Value of the identifier for the patient
		Id string `json:"id"`

		// Origin Defines the originating system from which the id value was sourced
		Origin PartnerCreateOrderRequestPatientIdOrigin `json:"origin"`

		// Type Defines the type of identifier associated with the id
		Type string `json:"type"`
	} `json:"patientId"`

	// ProgramId Value that identifies the digital content associated with the enrollment
	ProgramId string `json:"programId"`

	// ProgramTitle Value that describes the digital content associated with the order
	ProgramTitle string `json:"programTitle"`
}

// PartnerCreateOrderRequestOrderType Identifies the type of order being created
type PartnerCreateOrderRequestOrderType string

// PartnerCreateOrderRequestPatientIdOrigin Defines the originating system from which the id value was sourced
type PartnerCreateOrderRequestPatientIdOrigin string

// PatientCardActionResponse defines model for PatientCardActionResponse.
type PatientCardActionResponse struct {
	// Card All information related to the patient card
	Card *struct {
		CardActions *[]struct {
			// Action Indicates the action to be invoked for this cardAction
			Action PatientCardActionResponseCardCardActionsAction `json:"action"`

			// ActionType Indicates how the cardAction should be presented to the patient
			ActionType PatientCardActionResponseCardCardActionsActionType `json:"actionType"`

			// Description Description of the card action
			Description *string `json:"description,omitempty"`

			// Label Text that should be presented to the patient for this cardAction
			Label *string `json:"label,omitempty"`

			// Path Request path to Xealth API when the cardAction is invoked
			Path *string `json:"path,omitempty"`

			// Url URL opened when the cardAction is invoked
			Url *string `json:"url,omitempty"`
		} `json:"cardActions,omitempty"`

		// CardMeta Detail information related to the card
		CardMeta struct {
			// CardCreationDateTime Indicates when the card was created
			CardCreationDateTime time.Time `json:"cardCreationDateTime"`

			// CardText Text associated with the card
			CardText *string `json:"cardText,omitempty"`

			// CardTitle Title of the card
			CardTitle string `json:"cardTitle"`

			// CardType Type of digital content associated with the card
			CardType PatientCardActionResponseCardCardMetaCardType `json:"cardType"`

			// CardUpdateDateTime Indicates when the card was last updated
			CardUpdateDateTime time.Time `json:"cardUpdateDateTime"`

			// HasActivity Indicates whether or not patient interacted with the card
			HasActivity *bool `json:"hasActivity,omitempty"`

			// IsArchived Indicates whether or not the card is archived
			IsArchived bool `json:"isArchived"`

			// IsCompleted Indicates whether or not the content of the card is consumed
			IsCompleted bool `json:"isCompleted"`

			// IsPinned Indicates whether or not the card is pinned to the top of the card feed
			IsPinned *bool `json:"isPinned,omitempty"`

			// ProviderInfo Provider associated with the card
			ProviderInfo struct {
				// Name Name of the provider associated with the card
				Name *string `json:"name,omitempty"`
			} `json:"providerInfo"`

			// Thumbnail Link to a thumbnail image of the card
			Thumbnail *string `json:"thumbnail,omitempty"`
		} `json:"cardMeta"`

		// OrderInfo Detail information related to the order
		OrderInfo struct {
			// ContentTag Tags defining the type of digital content associated with the order
			ContentTag *[]string `json:"contentTag,omitempty"`

			// Deployment The Xealth-defined ID of the Health System
			Deployment string `json:"deployment"`

			// OrderCreationDateTime Indicates when the order was created
			OrderCreationDateTime time.Time `json:"orderCreationDateTime"`

			// OrderId Xealth-generated value that uniquely identifies the order
			OrderId string `json:"orderId"`

			// OrderSource Indicates the source system used to generate the order
			OrderSource PatientCardActionResponseCardOrderInfoOrderSource `json:"orderSource"`

			// OrderUpdateDateTime Indicates when the order was last updated
			OrderUpdateDateTime time.Time `json:"orderUpdateDateTime"`

			// PartnerId Xealth-generated value that uniquely identifies the partner associated with the order
			PartnerId string `json:"partnerId"`

			// ProgramId Xealth-generated value that identifies the digital content associated with the order
			ProgramId string `json:"programId"`
		} `json:"orderInfo"`

		// VideoInfo Detail information related to video data associated with the card
		VideoInfo *struct {
			// Captions Detail information related to video captions data
			Captions *[]struct {
				// Default Indicates whether or not the track should be used by default
				Default *bool `json:"default,omitempty"`

				// Kind How the text track is meant to be used
				Kind *string `json:"kind,omitempty"`

				// Src Address of the track (.vtt file)
				Src *string `json:"src,omitempty"`

				// Srclang Language of the track text data
				Srclang *string `json:"srclang,omitempty"`
			} `json:"captions,omitempty"`

			// Hlsv3 Detail information related to hlsv3 data associated with the video
			Hlsv3 *struct {
				// ContentType MIME type of the hlsv3 video
				ContentType *string `json:"contentType,omitempty"`

				// Url Link to the hlsv3 video
				Url *string `json:"url,omitempty"`
			} `json:"hlsv3,omitempty"`

			// Mp4 Detail information related to mp4 data associated with the video
			Mp4 *struct {
				// Height Height of the mp4 video
				Height *int `json:"height,omitempty"`

				// Url Link to the mp4 video
				Url *string `json:"url,omitempty"`

				// Width Width of the mp4 video
				Width *int `json:"width,omitempty"`
			} `json:"mp4,omitempty"`

			// Thumbnail Link to a thumbnail image of the video
			Thumbnail *string `json:"thumbnail,omitempty"`

			// Wistia Detail information related to Wistia player data associated with the video
			Wistia *struct {
				// OrderCode Wistia order code associated with the video
				OrderCode *string `json:"orderCode,omitempty"`

				// WistiaId Wistia identifier associated with the video
				WistiaId *string `json:"wistiaId,omitempty"`

				// WistiaTracker Wistia tracking value associated with the video
				WistiaTracker *string `json:"wistiaTracker,omitempty"`
			} `json:"wistia,omitempty"`

			// Youtube Detail information related to YouTube data associated with the video
			Youtube *struct {
				// Url Link to the YouTube video
				Url *string `json:"url,omitempty"`
			} `json:"youtube,omitempty"`
		} `json:"videoInfo,omitempty"`
	} `json:"card,omitempty"`

	// PatientIdentity Object identifying the patient
	PatientIdentity struct {
		// HistoricalIds List of the historical identifiers related to the patient
		HistoricalIds *[]struct {
			// Id Value of the identifier for the patient
			Id string `json:"id"`

			// Origin Defines the originating system from which the id value was sourced
			Origin PatientCardActionResponsePatientIdentityHistoricalIdsOrigin `json:"origin"`

			// Type Defines the type of identifier associated with the id
			Type string `json:"type"`
		} `json:"historicalIds,omitempty"`

		// Ids List of the current identifiers related to the patient
		Ids []struct {
			// Id Value of the identifier for the patient
			Id string `json:"id"`

			// Origin Defines the originating system from which the id value was sourced
			Origin PatientCardActionResponsePatientIdentityIdsOrigin `json:"origin"`

			// Type Defines the type of identifier associated with the id
			Type string `json:"type"`
		} `json:"ids"`
	} `json:"patientIdentity"`
}

// PatientCardActionResponseCardCardActionsAction Indicates the action to be invoked for this cardAction
type PatientCardActionResponseCardCardActionsAction string

// PatientCardActionResponseCardCardActionsActionType Indicates how the cardAction should be presented to the patient
type PatientCardActionResponseCardCardActionsActionType string

// PatientCardActionResponseCardCardMetaCardType Type of digital content associated with the card
type PatientCardActionResponseCardCardMetaCardType string

// PatientCardActionResponseCardOrderInfoOrderSource Indicates the source system used to generate the order
type PatientCardActionResponseCardOrderInfoOrderSource string

// PatientCardActionResponsePatientIdentityHistoricalIdsOrigin Defines the originating system from which the id value was sourced
type PatientCardActionResponsePatientIdentityHistoricalIdsOrigin string

// PatientCardActionResponsePatientIdentityIdsOrigin Defines the originating system from which the id value was sourced
type PatientCardActionResponsePatientIdentityIdsOrigin string

// PatientCardRequest defines model for PatientCardRequest.
type PatientCardRequest struct {
	// Card Detail information related to the Patient Card
	Card struct {
		// Content Information related to the patient card
		Content struct {
			// Description Text associated with the card
			Description string `json:"description"`

			// Title Title of the card
			Title string `json:"title"`

			// Url URL Associated with the card content
			Url *string `json:"url,omitempty"`
		} `json:"content"`

		// ExpiryDate A timestamp after which the content will expire and should not be shown to the patient. If this field is missing, the content has no expiry date
		ExpiryDate *time.Time `json:"expiryDate,omitempty"`

		// PriorityDate This timestamp is used by Xealth to calculate the priority of the content
		PriorityDate time.Time `json:"priorityDate"`
	} `json:"card"`
}

// PatientCardResponse defines model for PatientCardResponse.
type PatientCardResponse struct {
	// Card All information related to the patient card
	Card *struct {
		CardActions *[]struct {
			// Action Indicates the action to be invoked for this cardAction
			Action PatientCardResponseCardCardActionsAction `json:"action"`

			// ActionType Indicates how the cardAction should be presented to the patient
			ActionType PatientCardResponseCardCardActionsActionType `json:"actionType"`

			// Description Description of the card action
			Description *string `json:"description,omitempty"`

			// Label Text that should be presented to the patient for this cardAction
			Label *string `json:"label,omitempty"`

			// Path Request path to Xealth API when the cardAction is invoked
			Path *string `json:"path,omitempty"`

			// Url URL opened when the cardAction is invoked
			Url *string `json:"url,omitempty"`
		} `json:"cardActions,omitempty"`

		// CardMeta Detail information related to the card
		CardMeta struct {
			// CardCreationDateTime Indicates when the card was created
			CardCreationDateTime time.Time `json:"cardCreationDateTime"`

			// CardText Text associated with the card
			CardText *string `json:"cardText,omitempty"`

			// CardTitle Title of the card
			CardTitle string `json:"cardTitle"`

			// CardType Type of digital content associated with the card
			CardType PatientCardResponseCardCardMetaCardType `json:"cardType"`

			// CardUpdateDateTime Indicates when the card was last updated
			CardUpdateDateTime time.Time `json:"cardUpdateDateTime"`

			// HasActivity Indicates whether or not patient interacted with the card
			HasActivity *bool `json:"hasActivity,omitempty"`

			// IsArchived Indicates whether or not the card is archived
			IsArchived bool `json:"isArchived"`

			// IsCompleted Indicates whether or not the content of the card is consumed
			IsCompleted bool `json:"isCompleted"`

			// IsPinned Indicates whether or not the card is pinned to the top of the card feed
			IsPinned *bool `json:"isPinned,omitempty"`

			// ProviderInfo Provider associated with the card
			ProviderInfo struct {
				// Name Name of the provider associated with the card
				Name *string `json:"name,omitempty"`
			} `json:"providerInfo"`

			// Thumbnail Link to a thumbnail image of the card
			Thumbnail *string `json:"thumbnail,omitempty"`
		} `json:"cardMeta"`

		// OrderInfo Detail information related to the order
		OrderInfo struct {
			// ContentTag Tags defining the type of digital content associated with the order
			ContentTag *[]string `json:"contentTag,omitempty"`

			// Deployment The Xealth-defined ID of the Health System
			Deployment string `json:"deployment"`

			// OrderCreationDateTime Indicates when the order was created
			OrderCreationDateTime time.Time `json:"orderCreationDateTime"`

			// OrderId Xealth-generated value that uniquely identifies the order
			OrderId string `json:"orderId"`

			// OrderSource Indicates the source system used to generate the order
			OrderSource PatientCardResponseCardOrderInfoOrderSource `json:"orderSource"`

			// OrderUpdateDateTime Indicates when the order was last updated
			OrderUpdateDateTime time.Time `json:"orderUpdateDateTime"`

			// PartnerId Xealth-generated value that uniquely identifies the partner associated with the order
			PartnerId string `json:"partnerId"`

			// ProgramId Xealth-generated value that identifies the digital content associated with the order
			ProgramId string `json:"programId"`
		} `json:"orderInfo"`

		// VideoInfo Detail information related to video data associated with the card
		VideoInfo *struct {
			// Captions Detail information related to video captions data
			Captions *[]struct {
				// Default Indicates whether or not the track should be used by default
				Default *bool `json:"default,omitempty"`

				// Kind How the text track is meant to be used
				Kind *string `json:"kind,omitempty"`

				// Src Address of the track (.vtt file)
				Src *string `json:"src,omitempty"`

				// Srclang Language of the track text data
				Srclang *string `json:"srclang,omitempty"`
			} `json:"captions,omitempty"`

			// Hlsv3 Detail information related to hlsv3 data associated with the video
			Hlsv3 *struct {
				// ContentType MIME type of the hlsv3 video
				ContentType *string `json:"contentType,omitempty"`

				// Url Link to the hlsv3 video
				Url *string `json:"url,omitempty"`
			} `json:"hlsv3,omitempty"`

			// Mp4 Detail information related to mp4 data associated with the video
			Mp4 *struct {
				// Height Height of the mp4 video
				Height *int `json:"height,omitempty"`

				// Url Link to the mp4 video
				Url *string `json:"url,omitempty"`

				// Width Width of the mp4 video
				Width *int `json:"width,omitempty"`
			} `json:"mp4,omitempty"`

			// Thumbnail Link to a thumbnail image of the video
			Thumbnail *string `json:"thumbnail,omitempty"`

			// Wistia Detail information related to Wistia player data associated with the video
			Wistia *struct {
				// OrderCode Wistia order code associated with the video
				OrderCode *string `json:"orderCode,omitempty"`

				// WistiaId Wistia identifier associated with the video
				WistiaId *string `json:"wistiaId,omitempty"`

				// WistiaTracker Wistia tracking value associated with the video
				WistiaTracker *string `json:"wistiaTracker,omitempty"`
			} `json:"wistia,omitempty"`

			// Youtube Detail information related to YouTube data associated with the video
			Youtube *struct {
				// Url Link to the YouTube video
				Url *string `json:"url,omitempty"`
			} `json:"youtube,omitempty"`
		} `json:"videoInfo,omitempty"`
	} `json:"card,omitempty"`

	// PatientIdentity Object identifying the patient
	PatientIdentity struct {
		// HistoricalIds List of the historical identifiers related to the patient
		HistoricalIds *[]struct {
			// Id Value of the identifier for the patient
			Id string `json:"id"`

			// Origin Defines the originating system from which the id value was sourced
			Origin PatientCardResponsePatientIdentityHistoricalIdsOrigin `json:"origin"`

			// Type Defines the type of identifier associated with the id
			Type string `json:"type"`
		} `json:"historicalIds,omitempty"`

		// Ids List of the current identifiers related to the patient
		Ids []struct {
			// Id Value of the identifier for the patient
			Id string `json:"id"`

			// Origin Defines the originating system from which the id value was sourced
			Origin PatientCardResponsePatientIdentityIdsOrigin `json:"origin"`

			// Type Defines the type of identifier associated with the id
			Type string `json:"type"`
		} `json:"ids"`
	} `json:"patientIdentity"`
}

// PatientCardResponseCardCardActionsAction Indicates the action to be invoked for this cardAction
type PatientCardResponseCardCardActionsAction string

// PatientCardResponseCardCardActionsActionType Indicates how the cardAction should be presented to the patient
type PatientCardResponseCardCardActionsActionType string

// PatientCardResponseCardCardMetaCardType Type of digital content associated with the card
type PatientCardResponseCardCardMetaCardType string

// PatientCardResponseCardOrderInfoOrderSource Indicates the source system used to generate the order
type PatientCardResponseCardOrderInfoOrderSource string

// PatientCardResponsePatientIdentityHistoricalIdsOrigin Defines the originating system from which the id value was sourced
type PatientCardResponsePatientIdentityHistoricalIdsOrigin string

// PatientCardResponsePatientIdentityIdsOrigin Defines the originating system from which the id value was sourced
type PatientCardResponsePatientIdentityIdsOrigin string

// PatientCardsRequest Patient whose card feed is being requested
type PatientCardsRequest struct {
	PatientId struct {
		// Id Value of the identifier for the patient
		Id string `json:"id"`

		// Origin Defines the originating system from which the id value was sourced
		Origin PatientCardsRequestPatientIdOrigin `json:"origin"`

		// Type Defines the type of identifier associated with the id
		Type string `json:"type"`
	} `json:"patientId"`
}

// PatientCardsRequestPatientIdOrigin Defines the originating system from which the id value was sourced
type PatientCardsRequestPatientIdOrigin string

// PatientCardsResponse defines model for PatientCardsResponse.
type PatientCardsResponse struct {
	// CardFeed Card feed for the specified patient
	CardFeed []struct {
		CardActions *[]struct {
			// Action Indicates the action to be invoked for this cardAction
			Action PatientCardsResponseCardFeedCardActionsAction `json:"action"`

			// ActionType Indicates how the cardAction should be presented to the patient
			ActionType PatientCardsResponseCardFeedCardActionsActionType `json:"actionType"`

			// Description Description of the card action
			Description *string `json:"description,omitempty"`

			// Label Text that should be presented to the patient for this cardAction
			Label *string `json:"label,omitempty"`

			// Path Request path to Xealth API when the cardAction is invoked
			Path *string `json:"path,omitempty"`

			// Url URL opened when the cardAction is invoked
			Url *string `json:"url,omitempty"`
		} `json:"cardActions,omitempty"`

		// CardMeta Detail information related to the card
		CardMeta struct {
			// CardCreationDateTime Indicates when the card was created
			CardCreationDateTime time.Time `json:"cardCreationDateTime"`

			// CardText Text associated with the card
			CardText *string `json:"cardText,omitempty"`

			// CardTitle Title of the card
			CardTitle string `json:"cardTitle"`

			// CardType Type of digital content associated with the card
			CardType PatientCardsResponseCardFeedCardMetaCardType `json:"cardType"`

			// CardUpdateDateTime Indicates when the card was last updated
			CardUpdateDateTime time.Time `json:"cardUpdateDateTime"`

			// HasActivity Indicates whether or not patient interacted with the card
			HasActivity *bool `json:"hasActivity,omitempty"`

			// IsArchived Indicates whether or not the card is archived
			IsArchived bool `json:"isArchived"`

			// IsCompleted Indicates whether or not the content of the card is consumed
			IsCompleted bool `json:"isCompleted"`

			// IsPinned Indicates whether or not the card is pinned to the top of the card feed
			IsPinned *bool `json:"isPinned,omitempty"`

			// ProviderInfo Provider associated with the card
			ProviderInfo struct {
				// Name Name of the provider associated with the card
				Name *string `json:"name,omitempty"`
			} `json:"providerInfo"`

			// Thumbnail Link to a thumbnail image of the card
			Thumbnail *string `json:"thumbnail,omitempty"`
		} `json:"cardMeta"`

		// OrderInfo Detail information related to the order
		OrderInfo struct {
			// ContentTag Tags defining the type of digital content associated with the order
			ContentTag *[]string `json:"contentTag,omitempty"`

			// Deployment The Xealth-defined ID of the Health System
			Deployment string `json:"deployment"`

			// OrderCreationDateTime Indicates when the order was created
			OrderCreationDateTime time.Time `json:"orderCreationDateTime"`

			// OrderId Xealth-generated value that uniquely identifies the order
			OrderId string `json:"orderId"`

			// OrderSource Indicates the source system used to generate the order
			OrderSource PatientCardsResponseCardFeedOrderInfoOrderSource `json:"orderSource"`

			// OrderUpdateDateTime Indicates when the order was last updated
			OrderUpdateDateTime time.Time `json:"orderUpdateDateTime"`

			// PartnerId Xealth-generated value that uniquely identifies the partner associated with the order
			PartnerId string `json:"partnerId"`

			// ProgramId Xealth-generated value that identifies the digital content associated with the order
			ProgramId string `json:"programId"`
		} `json:"orderInfo"`

		// VideoInfo Detail information related to video data associated with the card
		VideoInfo *struct {
			// Captions Detail information related to video captions data
			Captions *[]struct {
				// Default Indicates whether or not the track should be used by default
				Default *bool `json:"default,omitempty"`

				// Kind How the text track is meant to be used
				Kind *string `json:"kind,omitempty"`

				// Src Address of the track (.vtt file)
				Src *string `json:"src,omitempty"`

				// Srclang Language of the track text data
				Srclang *string `json:"srclang,omitempty"`
			} `json:"captions,omitempty"`

			// Hlsv3 Detail information related to hlsv3 data associated with the video
			Hlsv3 *struct {
				// ContentType MIME type of the hlsv3 video
				ContentType *string `json:"contentType,omitempty"`

				// Url Link to the hlsv3 video
				Url *string `json:"url,omitempty"`
			} `json:"hlsv3,omitempty"`

			// Mp4 Detail information related to mp4 data associated with the video
			Mp4 *struct {
				// Height Height of the mp4 video
				Height *int `json:"height,omitempty"`

				// Url Link to the mp4 video
				Url *string `json:"url,omitempty"`

				// Width Width of the mp4 video
				Width *int `json:"width,omitempty"`
			} `json:"mp4,omitempty"`

			// Thumbnail Link to a thumbnail image of the video
			Thumbnail *string `json:"thumbnail,omitempty"`

			// Wistia Detail information related to Wistia player data associated with the video
			Wistia *struct {
				// OrderCode Wistia order code associated with the video
				OrderCode *string `json:"orderCode,omitempty"`

				// WistiaId Wistia identifier associated with the video
				WistiaId *string `json:"wistiaId,omitempty"`

				// WistiaTracker Wistia tracking value associated with the video
				WistiaTracker *string `json:"wistiaTracker,omitempty"`
			} `json:"wistia,omitempty"`

			// Youtube Detail information related to YouTube data associated with the video
			Youtube *struct {
				// Url Link to the YouTube video
				Url *string `json:"url,omitempty"`
			} `json:"youtube,omitempty"`
		} `json:"videoInfo,omitempty"`
	} `json:"cardFeed"`

	// CardFeedLength Identifies the number of cards being returned in the cardFeed
	CardFeedLength float32 `json:"cardFeedLength"`

	// PatientIdentity Object identifying the patient
	PatientIdentity struct {
		// HistoricalIds List of the historical identifiers related to the patient
		HistoricalIds *[]struct {
			// Id Value of the identifier for the patient
			Id string `json:"id"`

			// Origin Defines the originating system from which the id value was sourced
			Origin PatientCardsResponsePatientIdentityHistoricalIdsOrigin `json:"origin"`

			// Type Defines the type of identifier associated with the id
			Type string `json:"type"`
		} `json:"historicalIds,omitempty"`

		// Ids List of the current identifiers related to the patient
		Ids []struct {
			// Id Value of the identifier for the patient
			Id string `json:"id"`

			// Origin Defines the originating system from which the id value was sourced
			Origin PatientCardsResponsePatientIdentityIdsOrigin `json:"origin"`

			// Type Defines the type of identifier associated with the id
			Type string `json:"type"`
		} `json:"ids"`
	} `json:"patientIdentity"`
}

// PatientCardsResponseCardFeedCardActionsAction Indicates the action to be invoked for this cardAction
type PatientCardsResponseCardFeedCardActionsAction string

// PatientCardsResponseCardFeedCardActionsActionType Indicates how the cardAction should be presented to the patient
type PatientCardsResponseCardFeedCardActionsActionType string

// PatientCardsResponseCardFeedCardMetaCardType Type of digital content associated with the card
type PatientCardsResponseCardFeedCardMetaCardType string

// PatientCardsResponseCardFeedOrderInfoOrderSource Indicates the source system used to generate the order
type PatientCardsResponseCardFeedOrderInfoOrderSource string

// PatientCardsResponsePatientIdentityHistoricalIdsOrigin Defines the originating system from which the id value was sourced
type PatientCardsResponsePatientIdentityHistoricalIdsOrigin string

// PatientCardsResponsePatientIdentityIdsOrigin Defines the originating system from which the id value was sourced
type PatientCardsResponsePatientIdentityIdsOrigin string

// PatientId defines model for PatientId.
type PatientId struct {
	// Id Value of the identifier for the patient
	Id string `json:"id"`

	// Origin Defines the originating system from which the id value was sourced
	Origin PatientIdOrigin `json:"origin"`

	// Type Defines the type of identifier associated with the id
	Type string `json:"type"`
}

// PatientIdOrigin Defines the originating system from which the id value was sourced
type PatientIdOrigin string

// PatientIdentity Object identifying the patient
type PatientIdentity struct {
	// HistoricalIds List of the historical identifiers related to the patient
	HistoricalIds *[]struct {
		// Id Value of the identifier for the patient
		Id string `json:"id"`

		// Origin Defines the originating system from which the id value was sourced
		Origin PatientIdentityHistoricalIdsOrigin `json:"origin"`

		// Type Defines the type of identifier associated with the id
		Type string `json:"type"`
	} `json:"historicalIds,omitempty"`

	// Ids List of the current identifiers related to the patient
	Ids []struct {
		// Id Value of the identifier for the patient
		Id string `json:"id"`

		// Origin Defines the originating system from which the id value was sourced
		Origin PatientIdentityIdsOrigin `json:"origin"`

		// Type Defines the type of identifier associated with the id
		Type string `json:"type"`
	} `json:"ids"`
}

// PatientIdentityHistoricalIdsOrigin Defines the originating system from which the id value was sourced
type PatientIdentityHistoricalIdsOrigin string

// PatientIdentityIdsOrigin Defines the originating system from which the id value was sourced
type PatientIdentityIdsOrigin string

// PatientOutreachRequest defines model for PatientOutreachRequest.
type PatientOutreachRequest struct {
	// PartnerContent Information related to the patient outreach
	PartnerContent struct {
		// Url URL string used in the patient outreach
		Url string `json:"url"`
	} `json:"partnerContent"`
}

// PreOrder Information related to the preorder form associated with the order
type PreOrder struct {
	// DataTrackingId Subscriber-supplied identifier used in preorder workflow
	DataTrackingId *string `json:"dataTrackingId,omitempty"`
}

// PreorderFormRequest defines model for PreorderFormRequest.
type PreorderFormRequest struct {
	union json.RawMessage
}

// PreorderFormRequest0 defines model for .
type PreorderFormRequest0 struct {
	// Datasets Health system data configured for the subscriber sourced via webservice or FHIR requests.
	Datasets *GeneralDatasets `json:"datasets,omitempty"`

	// Deployment The Xealth-defined ID of the Health System
	Deployment string `json:"deployment"`

	// EventContext Indicates the reason for the event notification
	EventContext PreorderFormRequest0EventContext `json:"eventContext"`

	// EventType Indicates the type of event related to the notification
	EventType PreorderFormRequest0EventType `json:"eventType"`

	// PatientIdentity Object identifying the patient
	PatientIdentity PatientIdentity `json:"patientIdentity"`

	// ProgramId Xealth-generated value that identifies the digital content
	ProgramId string `json:"programId"`
}

// PreorderFormRequest0EventContext Indicates the reason for the event notification
type PreorderFormRequest0EventContext string

// PreorderFormRequest0EventType Indicates the type of event related to the notification
type PreorderFormRequest0EventType string

// PreorderFormRequest1 defines model for .
type PreorderFormRequest1 struct {
	// Datasets Health system data configured for the subscriber sourced via webservice or FHIR requests.
	Datasets *GeneralDatasets `json:"datasets,omitempty"`

	// Deployment The Xealth-defined ID of the Health System
	Deployment string `json:"deployment"`

	// EventContext Indicates the reason for the event notification
	EventContext PreorderFormRequest1EventContext `json:"eventContext"`

	// EventType Indicates the type of event related to the notification
	EventType PreorderFormRequest1EventType `json:"eventType"`

	// FormData Detail information related to user interaction with preorder form
	FormData struct {
		// Canceled Indicates preorder workflow was canceled by the user
		Canceled *bool `json:"canceled,omitempty"`

		// DataTrackingId Subscriber-supplied unique identifier used in preorder workflow
		DataTrackingId string `json:"dataTrackingId"`

		// FormId Subscriber-supplied value identifying preorder form
		FormId *string `json:"formId,omitempty"`

		// UserInput User-entered values for preorder form fields
		UserInput *map[string]interface{} `json:"userInput,omitempty"`
	} `json:"formData"`

	// PatientIdentity Object identifying the patient
	PatientIdentity PatientIdentity `json:"patientIdentity"`

	// ProgramId Xealth-generated value that identifies the digital content
	ProgramId string `json:"programId"`
}

// PreorderFormRequest1EventContext Indicates the reason for the event notification
type PreorderFormRequest1EventContext string

// PreorderFormRequest1EventType Indicates the type of event related to the notification
type PreorderFormRequest1EventType string

// PreorderFormResponse defines model for PreorderFormResponse.
type PreorderFormResponse struct {
	union json.RawMessage
}

// PreorderFormResponse0 defines model for .
type PreorderFormResponse0 struct {
	// DataTrackingId Subscriber-supplied unique identifier used in preorder workflow
	DataTrackingId string `json:"dataTrackingId"`

	// NotOrderable If true, removes submit button from preorder form and prevents user from continuing preorder workflow
	NotOrderable *bool `json:"notOrderable,omitempty"`

	// PreorderFormInfo Subscriber-defined preorder form based on [React Json Schema Forms](https://github.com/rjsf-team/react-jsonschema-form). Subscribers can build and test forms [here](https://rjsf-team.github.io/react-jsonschema-form/)
	PreorderFormInfo struct {
		// FormData Used to prefill a form with existing data
		FormData *map[string]interface{} `json:"formData,omitempty"`

		// FormId Subscriber-supplied value identifying preorder form
		FormId *string `json:"formId,omitempty"`

		// FormSchema JSON schema of preorder form
		FormSchema map[string]interface{} `json:"formSchema"`

		// UiSchema Used to add more customization to the form's look and feel
		UiSchema *map[string]interface{} `json:"uiSchema,omitempty"`
	} `json:"preorderFormInfo"`
}

// PreorderFormResponse1 defines model for .
type PreorderFormResponse1 = map[string]interface{}

// ProviderMessageRequest defines model for ProviderMessageRequest.
type ProviderMessageRequest struct {
	Message ProviderMessageRequest_Message `json:"message"`
}

// ProviderMessageRequestMessage0 defines model for .
type ProviderMessageRequestMessage0 struct {
	// Body InBasket message (text only)
	Body string `json:"body"`

	// IsPool Determines wether or not InBasket ID of recipient is associate with a pool
	IsPool bool `json:"isPool"`

	// Priority Defines priority of InBasket message
	Priority ProviderMessageRequestMessage0Priority `json:"priority"`

	// Recipient InBasket ID of recipient
	Recipient string `json:"recipient"`

	// Type Identifies the type of provider message
	Type ProviderMessageRequestMessage0Type `json:"type"`
}

// ProviderMessageRequestMessage0Priority Defines priority of InBasket message
type ProviderMessageRequestMessage0Priority string

// ProviderMessageRequestMessage0Type Identifies the type of provider message
type ProviderMessageRequestMessage0Type string

// ProviderMessageRequestMessage1 defines model for .
type ProviderMessageRequestMessage1 struct {
	// Body SDE value
	Body string `json:"body"`

	// Recipient Xealth-defined template name associated with SDE message data
	Recipient string `json:"recipient"`

	// Type Identifies the type of provider message
	Type ProviderMessageRequestMessage1Type `json:"type"`
}

// ProviderMessageRequestMessage1Type Identifies the type of provider message
type ProviderMessageRequestMessage1Type string

// ProviderMessageRequest_Message defines model for ProviderMessageRequest.Message.
type ProviderMessageRequest_Message struct {
	union json.RawMessage
}

// ReadOrderResponse defines model for ReadOrderResponse.
type ReadOrderResponse struct {
	// BatchFileInfo Information related to the batch file associated with the order
	BatchFileInfo *struct {
		// BatchFileData JSON object of the batch file data associated with the order
		BatchFileData *map[string]interface{} `json:"batchFileData,omitempty"`

		// BatchFileDataSchemaId Unique identifier related to the JSON schema of the batchFileData
		BatchFileDataSchemaId *string `json:"batchFileDataSchemaId,omitempty"`
	} `json:"batchFileInfo,omitempty"`

	// Datasets Health system data configured for the subscriber
	Datasets *struct {
		// AdmitDischargeTransferV1 HL7 ADT encounter data. This dataset supports Epic and Cerner. The data expected to be populated varies based on what trigger event the dataset is generated from: A01 (Admit), A02 (Transfer), A03 (Discharge), to list a few examples.
		AdmitDischargeTransferV1 *struct {
			// AdditionalDemographics Additional patient demographics (PD1)
			AdditionalDemographics *struct {
				// Handicap Handicap (PD1-6)
				Handicap *string `json:"handicap,omitempty"`

				// PrimaryCareProvider List of identifiers of primary care provider (PD1-4)
				PrimaryCareProvider *[]struct {
					// FamilyName Provider last name (XCN.2)
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name (XCN.3)
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number (XCN.1)
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"primaryCareProvider,omitempty"`
			} `json:"additionalDemographics,omitempty"`

			// AdmissionSource Admission Source (PV1-14)
			AdmissionSource *string `json:"admissionSource,omitempty"`

			// AdmissionType Admission Type (PV1-4)
			AdmissionType *string `json:"admissionType,omitempty"`

			// AdmitDateTime Admit Date/Time (PV1-45)
			AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

			// AdmitReason Admit reason (PV2-3)
			AdmitReason *struct {
				// Identifier Symbol in syntax defined by the system
				Identifier *string `json:"identifier,omitempty"`

				// NameOfCodingSystem Identity of the terminology system
				NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

				// Text Representation defined by the system
				Text *string `json:"text,omitempty"`
			} `json:"admitReason,omitempty"`

			// AdmittingProvider A list of provider identifiers for the admitting provider (PV1-17)
			AdmittingProvider *[]struct {
				// FamilyName Provider last name (XCN.2)
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name (XCN.3)
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number (XCN.1)
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"admittingProvider,omitempty"`

			// AlternateVisitId Alternate Visit Id (PV1-50)
			AlternateVisitId *struct {
				// Id Alternate visit id (PV1-50.1)
				Id *string `json:"id,omitempty"`
			} `json:"alternateVisitId,omitempty"`

			// AssignedPatientLocation Assigned Patient Location (PV1-3). Cerner-specific note: Each field in this structure may not be considered unique except within the context of the hierarchy it is part of.
			AssignedPatientLocation *struct {
				// Building Object defining an identifier set describing an entity in either a local or universal context
				Building *struct {
					// NamespaceId A locally unique identifier
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId An identifier that is universally unique within a given context
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType A code describing the context in which the universal id is unique
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"building,omitempty"`

				// Department Object defining an identifier set describing an entity in either a local or universal context
				Department *struct {
					// NamespaceId A locally unique identifier
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId An identifier that is universally unique within a given context
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType A code describing the context in which the universal id is unique
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"department,omitempty"`

				// Facility Object defining an identifier set describing an entity in either a local or universal context
				Facility *struct {
					// NamespaceId A locally unique identifier
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId An identifier that is universally unique within a given context
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType A code describing the context in which the universal id is unique
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"facility,omitempty"`
			} `json:"assignedPatientLocation,omitempty"`

			// AttendingProvider A list of provider identifiers for the attending provider (PV1-7)
			AttendingProvider *[]struct {
				// FamilyName Provider last name (XCN.2)
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name (XCN.3)
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number (XCN.1)
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"attendingProvider,omitempty"`

			// ConsultingProvider A list of provider identifiers for the consulting provider (PV1-9)
			ConsultingProvider *[]struct {
				// FamilyName Provider last name (XCN.2)
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name (XCN.3)
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number (XCN.1)
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"consultingProvider,omitempty"`

			// DischargeDateTime Discharge Date/Time (PV1-45)
			DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

			// DischargeDestination Discharge destination (PV1-37)
			DischargeDestination *string `json:"dischargeDestination,omitempty"`

			// DischargeDisposition Discharge disposition (PV1-36)
			DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

			// EncounterDiagnosis List of encounter diagnoses (DG1)
			EncounterDiagnosis *[]struct {
				// DiagnosisCode Diagnosis code (DG1-3)
				DiagnosisCode *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"diagnosisCode,omitempty"`

				// DiagnosisDateTime Diagnosis date/time (DG1-5)
				DiagnosisDateTime *time.Time `json:"diagnosisDateTime,omitempty"`

				// DiagnosisDescription Diagnosis description (DG1-4)
				DiagnosisDescription *string `json:"diagnosisDescription,omitempty"`

				// DiagnosisType Diagnosis type (DG1-6)
				DiagnosisType *string `json:"diagnosisType,omitempty"`
			} `json:"encounterDiagnosis,omitempty"`

			// EventOccurredDateTime (Epic only) Date/Time Event Occurred (EVN-6)
			EventOccurredDateTime *time.Time `json:"eventOccurredDateTime,omitempty"`

			// EventRecordedDateTime Date/Time Event Recorded (EVN-2)
			EventRecordedDateTime *time.Time `json:"eventRecordedDateTime,omitempty"`

			// EventTypeCode Event Type Code (EVN-1)
			EventTypeCode *string `json:"eventTypeCode,omitempty"`

			// HospitalService Hospital service (PV1-10)
			HospitalService *string `json:"hospitalService,omitempty"`

			// MessageType ADT Message Type (MSH-9.1)
			MessageType *string `json:"messageType,omitempty"`

			// NextOfKin List of next of kin (NK1)
			NextOfKin *[]struct {
				// Addresses List of addresses of the next of kin (NK1-4)
				Addresses *[]struct {
					// City City (XAD.3)
					City *string `json:"city,omitempty"`

					// OtherDesignation Other designation such as county (XAD.2)
					OtherDesignation *string `json:"otherDesignation,omitempty"`

					// State State (XAD.4)
					State *string `json:"state,omitempty"`

					// Street Street (XAD.1)
					Street *string `json:"street,omitempty"`

					// Type (Epic only) Type of address (XAD.7)
					Type *string `json:"type,omitempty"`

					// Zip Zip or postal code (XAD.5)
					Zip *string `json:"zip,omitempty"`
				} `json:"addresses,omitempty"`

				// AssociatedPrimaryIdentifiers List of primary identifiers (NK1-33)
				AssociatedPrimaryIdentifiers *[]struct {
					// Id Identifier (NK1-33.1)
					Id *string `json:"id,omitempty"`

					// Type Identifier type (NK1-33.5 for Epic, NK1-33.4 for Cerner)
					Type *string `json:"type,omitempty"`
				} `json:"associatedPrimaryIdentifiers,omitempty"`

				// ContactInfo List of phone numbers or emails of the next of kin (NK1-5)
				ContactInfo *[]struct {
					// EmailAddress (Epic only) Email address (XTN.4)
					EmailAddress *string `json:"emailAddress,omitempty"`

					// EquipmentType Equipment type (XTN.2)
					EquipmentType *string `json:"equipmentType,omitempty"`

					// PhoneNumber Phone number (XTN.1)
					PhoneNumber *string `json:"phoneNumber,omitempty"`

					// UnformattedPhoneNumber (Epic only) Unformatted phone number (XTN.12)
					UnformattedPhoneNumber *string `json:"unformattedPhoneNumber,omitempty"`
				} `json:"contactInfo,omitempty"`

				// ContactRole Contact role (NK1-7.1)
				ContactRole *string `json:"contactRole,omitempty"`

				// JobStatus Job Status (NK1-34)
				JobStatus *map[string]interface{} `json:"jobStatus,omitempty"`

				// Names List of names of the next of kin (NK1-2)
				Names *[]struct {
					// FamilyName Family name (XPN.1)
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Given name (XPN.2)
					GivenName *string `json:"givenName,omitempty"`

					// MiddleName Second and further given names or initials thereof (XPN.3)
					MiddleName *string `json:"middleName,omitempty"`
				} `json:"names,omitempty"`

				// PrimaryLanguage Primary language (NK1-20)
				PrimaryLanguage *string `json:"primaryLanguage,omitempty"`

				// Relationship Relationship with the patient (NK1-3)
				Relationship *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"relationship,omitempty"`
			} `json:"nextOfKin,omitempty"`

			// OperatorId Operator Id (EVN-5)
			OperatorId *struct {
				// Id Operator Id (EVN-5.1)
				Id *string `json:"id,omitempty"`

				// Type (Cerner only) Operator Id Type (EVN-5.9)
				Type *string `json:"type,omitempty"`
			} `json:"operatorId,omitempty"`

			// PatientClass Patient Class (PV1-2)
			PatientClass *string `json:"patientClass,omitempty"`

			// PatientDeathIndicator Patient Death Indicator (PID-30)
			PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

			// PatientIdList Patient identifier list (PID-3)
			PatientIdList *[]struct {
				// Id Patient identifier (PID-3.1)
				Id *string `json:"id,omitempty"`

				// Type (PID-3.5 for Epic; PID-3.4 for Cerner)
				Type *string `json:"type,omitempty"`
			} `json:"patientIdList,omitempty"`

			// PatientLevelPersonnel (Epic only) List of patient level care team personnel information (ROL segments after PID)
			PatientLevelPersonnel *[]struct {
				// PersonnelName List of names for this provider (ROL-4)
				PersonnelName *[]struct {
					// FamilyName Provider last name (XCN.2)
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name (XCN.3)
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number (XCN.1)
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"personnelName,omitempty"`

				// PersonnelRole Provider role (ROL-3)
				PersonnelRole *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"personnelRole,omitempty"`

				// ProviderType Provider type (ROL-9)
				ProviderType *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"providerType,omitempty"`

				// RoleBeginDate Treatment/Care team assignment start date (ROL-5)
				RoleBeginDate *time.Time `json:"roleBeginDate,omitempty"`

				// RoleEndDate Treatment/Care team assignment end date (ROL-6)
				RoleEndDate *time.Time `json:"roleEndDate,omitempty"`
			} `json:"patientLevelPersonnel,omitempty"`

			// PatientType Patient type (PV1-18)
			PatientType *string `json:"patientType,omitempty"`

			// PriorPatientLocation Prior Patient Location (PV1-6). Cerner-specific note: Each field in this structure may not be considered unique except within the context of the hierarchy it is part of.
			PriorPatientLocation *struct {
				// Building Object defining an identifier set describing an entity in either a local or universal context
				Building *struct {
					// NamespaceId A locally unique identifier
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId An identifier that is universally unique within a given context
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType A code describing the context in which the universal id is unique
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"building,omitempty"`

				// Department Object defining an identifier set describing an entity in either a local or universal context
				Department *struct {
					// NamespaceId A locally unique identifier
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId An identifier that is universally unique within a given context
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType A code describing the context in which the universal id is unique
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"department,omitempty"`

				// Facility Object defining an identifier set describing an entity in either a local or universal context
				Facility *struct {
					// NamespaceId A locally unique identifier
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId An identifier that is universally unique within a given context
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType A code describing the context in which the universal id is unique
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"facility,omitempty"`
			} `json:"priorPatientLocation,omitempty"`

			// Procedures (Epic only) List of procedures (PR1). Also note: what is populated here is likely to vary greatly between health systems.
			Procedures *[]struct {
				// AssociatedDiagnosisCode Associated diagnosis code (PR1-15)
				AssociatedDiagnosisCode *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"associatedDiagnosisCode,omitempty"`

				// ProcedureCode Procedure code (PR1-3)
				ProcedureCode *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"procedureCode,omitempty"`

				// ProcedureCodingMethod Procedure coding method (PR1-2)
				ProcedureCodingMethod *string `json:"procedureCodingMethod,omitempty"`

				// ProcedureDateTime Procedure date/time (PR1-5)
				ProcedureDateTime *string `json:"procedureDateTime,omitempty"`

				// ProcedureDescription Procedure description (PR1-4)
				ProcedureDescription *string `json:"procedureDescription,omitempty"`
			} `json:"procedures,omitempty"`

			// ReferringProvider A list of provider identifiers for the referring provider (PV1-8)
			ReferringProvider *[]struct {
				// FamilyName Provider last name (XCN.2)
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name (XCN.3)
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number (XCN.1)
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"referringProvider,omitempty"`

			// TriggerEvent ADT Trigger Event (MSH-9.2)
			TriggerEvent *string `json:"triggerEvent,omitempty"`

			// VisitId Visit Id (PV1-19 for Epic, PID-18 for Cerner)
			VisitId *struct {
				// Id Visit Id (PV1-19.1 for Epic, PID-18.1 for Cerner)
				Id *string `json:"id,omitempty"`

				// Type Visit Id Type ('CSN' for Epic, PID-18.4 for Cerner)
				Type *string `json:"type,omitempty"`
			} `json:"visitId,omitempty"`

			// VisitLevelPersonnel (Epic only) List of encounter level treatment team personnel information (ROL segments after PVI/PV2)
			VisitLevelPersonnel *[]struct {
				// PersonnelName List of names for this provider (ROL-4)
				PersonnelName *[]struct {
					// FamilyName Provider last name (XCN.2)
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name (XCN.3)
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number (XCN.1)
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type (XCN.13 for Epic, XCN.9 for Cerner)
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"personnelName,omitempty"`

				// PersonnelRole Provider role (ROL-3)
				PersonnelRole *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"personnelRole,omitempty"`

				// ProviderType Provider type (ROL-9)
				ProviderType *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"providerType,omitempty"`

				// RoleBeginDate Treatment/Care team assignment start date (ROL-5)
				RoleBeginDate *time.Time `json:"roleBeginDate,omitempty"`

				// RoleEndDate Treatment/Care team assignment end date (ROL-6)
				RoleEndDate *time.Time `json:"roleEndDate,omitempty"`
			} `json:"visitLevelPersonnel,omitempty"`
		} `json:"admitDischargeTransferV1,omitempty"`

		// AppointmentOrderV1 HL7 SIU appointment data The appointmentOrderV1 dataset supports Epic only. Subscribers who want to receive this dataset from Cerner should use the appointmentOrderV2 dataset
		AppointmentOrderV1 *struct {
			// AdmitDateTime Admit Date/Time (PV1-45)
			AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

			// AdmittingProvider List of admitting provider (PV1-17)
			AdmittingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"admittingProvider,omitempty"`

			// AlternateVisitId Alternate Visit ID (PV1-50)
			AlternateVisitId *string `json:"alternateVisitId,omitempty"`

			// AppointmentDuration Appointment Duration (SCH-9)
			AppointmentDuration *float32 `json:"appointmentDuration,omitempty"`

			// AppointmentDurationUnit Appointment Duration Units (SCH-10)
			AppointmentDurationUnit *string `json:"appointmentDurationUnit,omitempty"`

			// AppointmentInformation List of appointment information
			AppointmentInformation *[]struct {
				// AppointmentLocation Object defining appointment location (RGS-3.X)
				AppointmentLocation *struct {
					// ResourceGroupId Resource group id (RGS-3.1)
					ResourceGroupId *string `json:"resourceGroupId,omitempty"`

					// ResourceGroupName Resource group name (RGS-3.2)
					ResourceGroupName *string `json:"resourceGroupName,omitempty"`
				} `json:"appointmentLocation,omitempty"`
				PersonnelProvider *[]struct {
					// Id Personnel id
					Id *string `json:"id,omitempty"`

					// Providers List of personnel provider
					Providers *[]struct {
						// FamilyName Provider last name
						FamilyName *string `json:"familyName,omitempty"`

						// GivenName Provider first name
						GivenName *string `json:"givenName,omitempty"`

						// IdNumber Provider id number
						IdNumber *string `json:"idNumber,omitempty"`

						// IdentifierTypeCode Provider id type
						IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
					} `json:"providers,omitempty"`

					// Text Personnel description
					Text *string `json:"text,omitempty"`
				} `json:"personnelProvider,omitempty"`

				// Services List of appointment services
				Services *[]struct {
					// DateTimeOfService Date time of appointment (AIS-4)
					DateTimeOfService *time.Time `json:"dateTimeOfService,omitempty"`

					// Service List of appointment service details
					Service *[]struct {
						// UniversalServiceIdentifierId Universal service identifier id | Epic: AIS-3.1 | Cerner: SCH-7.1
						UniversalServiceIdentifierId *string `json:"universalServiceIdentifierId,omitempty"`

						// UniversalServiceIdentifierText Universal service identifier text | Epic AIS-3.2 | Cerner: SCH-7.2
						UniversalServiceIdentifierText *string `json:"universalServiceIdentifierText,omitempty"`
					} `json:"service,omitempty"`
				} `json:"services,omitempty"`
			} `json:"appointmentInformation,omitempty"`

			// AppointmentStartDateTime Date/Time of Appointment (SCH-11.4)
			AppointmentStartDateTime *time.Time `json:"appointmentStartDateTime,omitempty"`

			// AssignedPatientLocation Hospital Location abbreviation (PV1-3.4)
			AssignedPatientLocation *struct {
				// NamespaceId Namespace id
				NamespaceId *string `json:"namespaceId,omitempty"`

				// UniversalId Universal id
				UniversalId *string `json:"universalId,omitempty"`

				// UniversalIdType Universal id type
				UniversalIdType *string `json:"universalIdType,omitempty"`
			} `json:"assignedPatientLocation,omitempty"`

			// AttendingProvider List of attending provider (PV1-7)
			AttendingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"attendingProvider,omitempty"`

			// CancelReason Cancel Reason (SCH-6)
			CancelReason *string `json:"cancelReason,omitempty"`

			// ConsultingProvider List of consulting provider (PV1-9)
			ConsultingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"consultingProvider,omitempty"`

			// DischargeDateTime Discharge Date/Time (PV1-45)
			DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

			// DischargeDisposition Discharge disposition (PV1-36)
			DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

			// FillerAppointmentId Appointment Serial Number (SCH-2)
			FillerAppointmentId *string `json:"fillerAppointmentId,omitempty"`

			// Handicap Handicap (PD1-6)
			Handicap *string `json:"handicap,omitempty"`

			// HospitalService Hospital service (PV1-10)
			HospitalService *string `json:"hospitalService,omitempty"`

			// MessageType SIU Message Type (MSH-9.1)
			MessageType *string `json:"messageType,omitempty"`
			Notes       *[]struct {
				// Comments Comment (NTE-3.3)
				Comments *[]string `json:"comments,omitempty"`

				// SetId Set Id  (NTE-3.1)
				SetId *string `json:"setId,omitempty"`

				// SourceOfComment Source of comment (NTE-3.2)
				SourceOfComment *string `json:"sourceOfComment,omitempty"`
			} `json:"notes,omitempty"`

			// PatientAccountNumber Patient Account Number OR CSN (PID-18)
			PatientAccountNumber *string `json:"patientAccountNumber,omitempty"`

			// PatientClass Patient class (PV1-2)
			PatientClass *string `json:"patientClass,omitempty"`

			// PatientDeathIndicator Patient Death Indicator (PID-30)
			PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

			// PatientIdList Patient identifier list (PID-3.1/PID-3.5)
			PatientIdList *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"patientIdList,omitempty"`

			// PatientType Patient type (PV1-18)
			PatientType *string `json:"patientType,omitempty"`

			// PrimaryCareProvider List of primary care provider (PD1-4)
			PrimaryCareProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"primaryCareProvider,omitempty"`

			// ReferringProvider List of referring provider (PV1-8)
			ReferringProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"referringProvider,omitempty"`

			// SchedulingStatusId Appointment Status ID (SCH-25.1)
			SchedulingStatusId *string `json:"schedulingStatusId,omitempty"`

			// SchedulingStatusText Appointment Status Text (SCH-25.2)
			SchedulingStatusText *string `json:"schedulingStatusText,omitempty"`

			// TriggerEvent SIU Trigger Event (MSH-9.2)
			TriggerEvent *string `json:"triggerEvent,omitempty"`

			// VisitNumber Visit number (PV1-19)
			VisitNumber *string `json:"visitNumber,omitempty"`
		} `json:"appointmentOrderV1,omitempty"`

		// AppointmentOrderV2 HL7 SIU appointment data agnostic to ehr vendor (cerner/epic)
		AppointmentOrderV2 *struct {
			// AdmitDateTime Admit Date/Time (PV1-44)
			AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

			// AdmittingProvider List of admitting provider (PV1-17) | identifierTypeCode - Epic (PV1-17.13) | Cerner (PV1-17.9)
			AdmittingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"admittingProvider,omitempty"`

			// AlternateVisitId Alternate Visit ID (PV1-50)
			AlternateVisitId *string `json:"alternateVisitId,omitempty"`

			// AppointmentDuration Appointment Duration (SCH-9)
			AppointmentDuration *float32 `json:"appointmentDuration,omitempty"`

			// AppointmentDurationUnit Appointment Duration Units (SCH-10)
			AppointmentDurationUnit *string `json:"appointmentDurationUnit,omitempty"`

			// AppointmentId Appointment Identifier | Epic (SCH-2) | Cerner (SCH-1)
			AppointmentId *string `json:"appointmentId,omitempty"`

			// AppointmentInformation List of appointment information
			AppointmentInformation *[]struct {
				// AppointmentLocation Object defining appointment location - CERNER ONLY
				AppointmentLocation *struct {
					// Building Building AIL-3.7
					Building *struct {
						// NamespaceId Namespace id
						NamespaceId *string `json:"namespaceId,omitempty"`

						// UniversalId Universal id
						UniversalId *string `json:"universalId,omitempty"`

						// UniversalIdType Universal id type
						UniversalIdType *string `json:"universalIdType,omitempty"`
					} `json:"building,omitempty"`

					// Department Department AIL-3.1
					Department *struct {
						// NamespaceId Namespace id
						NamespaceId *string `json:"namespaceId,omitempty"`

						// UniversalId Universal id
						UniversalId *string `json:"universalId,omitempty"`

						// UniversalIdType Universal id type
						UniversalIdType *string `json:"universalIdType,omitempty"`
					} `json:"department,omitempty"`

					// Facility Facility AIL-3.4
					Facility *struct {
						// NamespaceId Namespace id
						NamespaceId *string `json:"namespaceId,omitempty"`

						// UniversalId Universal id
						UniversalId *string `json:"universalId,omitempty"`

						// UniversalIdType Universal id type
						UniversalIdType *string `json:"universalIdType,omitempty"`
					} `json:"facility,omitempty"`
				} `json:"appointmentLocation,omitempty"`

				// DepartmentId Epic RGS-3.1 | Cerner - Not supported (use AppointmentLocation)
				DepartmentId *string `json:"departmentId,omitempty"`

				// DepartmentName Epic RGS-3.2 | Cerner - Not supported (use AppointmentLocation)
				DepartmentName *string `json:"departmentName,omitempty"`

				// PersonnelProvider List of Personnel Provider
				PersonnelProvider *[]struct {
					// Providers List of personnel provider | identifierTypeCode - Epic AIP-3.13 | Cerner AIP-3.9
					Providers *[]struct {
						// FamilyName Provider last name
						FamilyName *string `json:"familyName,omitempty"`

						// GivenName Provider first name
						GivenName *string `json:"givenName,omitempty"`

						// IdNumber Provider id number
						IdNumber *string `json:"idNumber,omitempty"`

						// IdentifierTypeCode Provider id type
						IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
					} `json:"providers,omitempty"`
					ResourceRole *struct {
						// Identifier Personnel id AIP-4.1
						Identifier *string `json:"identifier,omitempty"`

						// Text Personnel description AIP-4.2
						Text *string `json:"text,omitempty"`
					} `json:"resourceRole,omitempty"`
				} `json:"personnelProvider,omitempty"`

				// Services List of appointment services
				Services *[]struct {
					// Service List of appointment service details
					Service *[]struct {
						// UniversalServiceIdentifierId Universal service identifier id | Epic: AIS-3.1 | Cerner: SCH-7.1
						UniversalServiceIdentifierId *string `json:"universalServiceIdentifierId,omitempty"`

						// UniversalServiceIdentifierText Universal service identifier text | Epic AIS-3.2 | Cerner: SCH-7.2
						UniversalServiceIdentifierText *string `json:"universalServiceIdentifierText,omitempty"`
					} `json:"service,omitempty"`

					// StartDateTime Date time of appointment (AIS-4)
					StartDateTime *time.Time `json:"startDateTime,omitempty"`
				} `json:"services,omitempty"`
			} `json:"appointmentInformation,omitempty"`

			// AppointmentStartDateTime Date/Time of Appointment (SCH-11.4)
			AppointmentStartDateTime *time.Time `json:"appointmentStartDateTime,omitempty"`

			// AssignedPatientLocation Appointment Patient Location (PV1-3)
			AssignedPatientLocation *struct {
				// Building Building (PV1-3.7) - (often not populated)
				Building *struct {
					// NamespaceId Namespace id
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId Universal id
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType Universal id type
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"building,omitempty"`

				// Department Department (PV1-3.1)
				Department *struct {
					// NamespaceId Namespace id
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId Universal id
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType Universal id type
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"department,omitempty"`

				// Facility Facility (PV1-3.4)
				Facility *struct {
					// NamespaceId Namespace id
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId Universal id
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType Universal id type
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"facility,omitempty"`
			} `json:"assignedPatientLocation,omitempty"`

			// AttendingProvider List of attending provider (PV1-7) | identifierTypeCode - Epic (PV1-7.13) | Cerner (PV1-7.9)
			AttendingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"attendingProvider,omitempty"`

			// CancelReason Cancel Reason (SCH-6)
			CancelReason *string `json:"cancelReason,omitempty"`

			// ConsultingProvider List of consulting provider (PV1-9) | identifierTypeCode - Epic (PV1-9.13) | Cerner (PV1-9.9)
			ConsultingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"consultingProvider,omitempty"`

			// DischargeDateTime Discharge Date/Time (PV1-45)
			DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

			// DischargeDisposition Discharge disposition (PV1-36)
			DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

			// Handicap Handicap (PD1-6)
			Handicap *string `json:"handicap,omitempty"`

			// HospitalService Hospital service (PV1-10)
			HospitalService *string `json:"hospitalService,omitempty"`

			// MessageType SIU Message Type (MSH-9.1)
			MessageType *string `json:"messageType,omitempty"`
			Notes       *[]struct {
				// Comments Comment (NTE-3.3)
				Comments *[]string `json:"comments,omitempty"`

				// SetId Set Id  (NTE-3.1)
				SetId *string `json:"setId,omitempty"`

				// SourceOfComment Source of comment (NTE-3.2)
				SourceOfComment *string `json:"sourceOfComment,omitempty"`
			} `json:"notes,omitempty"`

			// PatientClass Patient class (PV1-2)
			PatientClass *string `json:"patientClass,omitempty"`

			// PatientDeathIndicator Patient Death Indicator (PID-30)
			PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

			// PatientIdList Patient identifier list | Epic (PID-3.1/PID-3.5) | Cerner (PID-3.1/PID-3.4)
			PatientIdList *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"patientIdList,omitempty"`

			// PatientType Patient type (PV1-18)
			PatientType *string `json:"patientType,omitempty"`

			// PrimaryCareProvider List of primary care provider (PD1-4) | identifierTypeCode - Epic (PD1-4.13) | Cerner (PD1-4.9)
			PrimaryCareProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"primaryCareProvider,omitempty"`

			// ReferringProvider List of referring provider (PV1-8) | identifierTypeCode - Epic (PV1-8.13) | Cerner (PV1-8.9)
			ReferringProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"referringProvider,omitempty"`

			// SchedulingStatusId Appointment Status ID (SCH-25.1)
			SchedulingStatusId *string `json:"schedulingStatusId,omitempty"`

			// SchedulingStatusText Appointment Status Text (SCH-25.2)
			SchedulingStatusText *string `json:"schedulingStatusText,omitempty"`

			// TriggerEvent SIU Trigger Event (MSH-9.2)
			TriggerEvent *string `json:"triggerEvent,omitempty"`

			// VisitId Epic (PV1-19/CSN); CSN is Hardcoded | Cerner (PID-18.1/PID-18.4); PID 18.4 is alias of the alias pool
			VisitId *struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"visitId,omitempty"`
		} `json:"appointmentOrderV2,omitempty"`

		// CoverageV1 Visit level coverage data. The dataset will include the latest insurance information we have received which was associated with the same visit as the order. The coverageV1 dataset is sourced exclusively from HL7 messages via the IN1 segment in ADT A03, A04, and A08 messages
		CoverageV1 *[]struct {
			// CompanyPlanCode Company Plan Code (IN1-35)
			CompanyPlanCode *string `json:"companyPlanCode,omitempty"`

			// CoverageType Coverage Type (IN1-47)
			CoverageType *string `json:"coverageType,omitempty"`

			// FilingOrder Coord Of Ben. Priority (IN1-22)
			FilingOrder *string `json:"filingOrder,omitempty"`

			// Group Object defining coverage group information
			Group *struct {
				// GroupEmployerName Cerner ONLY - Insured's Group Emp Organization Name (IN1-11.0.1)
				GroupEmployerName *string `json:"groupEmployerName,omitempty"`

				// GroupName Insured's Group Name (IN1-9.0.1)
				GroupName *[]string `json:"groupName,omitempty"`

				// GroupNumber Group Number (IN1-8.1)
				GroupNumber *string `json:"groupNumber,omitempty"`
			} `json:"group,omitempty"`

			// InsuredIndividual Object defining coverage insured individual information
			InsuredIndividual *struct {
				// AdministrativeSex Insured's Administrative Sex (IN1-43)
				AdministrativeSex *string `json:"administrativeSex,omitempty"`

				// EmploymentStatus Insured's Employment Status (IN1-42.1)
				EmploymentStatus *string `json:"employmentStatus,omitempty"`

				// IdNumber Insured's ID Number (IN1-49)
				IdNumber *string `json:"idNumber,omitempty"`
			} `json:"insuredIndividual,omitempty"`

			// Payor Object defining coverage payor information
			Payor *struct {
				// Address Insurance Company Address (IN1-5.0)
				Address *[]struct {
					// City City name
					City *string `json:"city,omitempty"`

					// Country Country name
					Country *string `json:"country,omitempty"`

					// District District name
					District *string `json:"district,omitempty"`

					// Line List of street name, number, direction & P.O. Box etc
					Line *[]string `json:"line,omitempty"`

					// PostalCode Postal code for area
					PostalCode *string `json:"postalCode,omitempty"`

					// State State name or abbreviation
					State *string `json:"state,omitempty"`

					// Text Full address
					Text *string `json:"text,omitempty"`
				} `json:"address,omitempty"`

				// Id Insurance Company ID (IN1-3.0.1)
				Id *[]string `json:"id,omitempty"`

				// Name Insurance Company Name (IN1-4.0.1)
				Name *[]string `json:"name,omitempty"`
			} `json:"payor,omitempty"`

			// Plan Object defining coverage plan information
			Plan *struct {
				// EffectiveDate Plan Effective Date (IN1-12)
				EffectiveDate *string `json:"effectiveDate,omitempty"`

				// ExpirationDate Plan Expiration Date (IN1-13)
				ExpirationDate *string `json:"expirationDate,omitempty"`

				// Id Insurance Plan ID (IN1-2.1)
				Id *string `json:"id,omitempty"`

				// Name Insurance Plan ID Name (IN1-2.2)
				Name *string `json:"name,omitempty"`

				// Type Plan Type (IN1-15)
				Type *string `json:"type,omitempty"`
			} `json:"plan,omitempty"`

			// Subscriber Object defining coverage subscriber information
			Subscriber *struct {
				// Address Insured's Address (IN1-19.0)
				Address *[]struct {
					// City City name
					City *string `json:"city,omitempty"`

					// Country Country name
					Country *string `json:"country,omitempty"`

					// District District name
					District *string `json:"district,omitempty"`

					// Line List of street name, number, direction & P.O. Box etc
					Line *[]string `json:"line,omitempty"`

					// PostalCode Postal code for area
					PostalCode *string `json:"postalCode,omitempty"`

					// State State name or abbreviation
					State *string `json:"state,omitempty"`

					// Text Full address
					Text *string `json:"text,omitempty"`
				} `json:"address,omitempty"`

				// DateOfBirth Insured's Date Of Birth (IN1-18.1)
				DateOfBirth *string `json:"dateOfBirth,omitempty"`

				// Id Policy Number (IN1-36)
				Id *string `json:"id,omitempty"`

				// Name Name Of Insured (IN1-16.0)
				Name *[]struct {
					// FamilyName Individual last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Individual first name
					GivenName *string `json:"givenName,omitempty"`

					// NameTypeCode Individual relationship to patient
					NameTypeCode *string `json:"nameTypeCode,omitempty"`
				} `json:"name,omitempty"`

				// RelationshipToPatient Insured's Relationship To Patient (IN1-17.1)
				RelationshipToPatient *string `json:"relationshipToPatient,omitempty"`
			} `json:"subscriber,omitempty"`

			// VerificationStatus Verification Status (IN1-45)
			VerificationStatus *string `json:"verificationStatus,omitempty"`
		} `json:"coverageV1,omitempty"`

		// DemographicsV1 Patient demographics data
		DemographicsV1 *struct {
			Address *[]struct {
				// City City name
				City *string `json:"city,omitempty"`

				// Country Country name
				Country *string `json:"country,omitempty"`

				// District District name
				District *string `json:"district,omitempty"`

				// Line List of street name, number, direction & P.O. Box etc
				Line *[]string `json:"line,omitempty"`

				// PostalCode Postal code for area
				PostalCode *string `json:"postalCode,omitempty"`

				// State State name or abbreviation
				State *string `json:"state,omitempty"`

				// Text Full address
				Text *string `json:"text,omitempty"`
			} `json:"address,omitempty"`

			// BirthDate Date of birth
			BirthDate *openapi_types.Date `json:"birthDate,omitempty"`

			// DeceasedBoolean Indicates whether individual is deceased or not
			DeceasedBoolean *bool `json:"deceasedBoolean,omitempty"`

			// Gender Current assigned sex
			Gender *ReadOrderResponseDatasetsDemographicsV1Gender `json:"gender,omitempty"`

			// HistoricalIds List of the historical identifiers related to the patient
			HistoricalIds *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"historicalIds,omitempty"`

			// Ids List of the current identifiers related to the patient
			Ids *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"ids,omitempty"`

			// Name Object naming the individual
			Name *struct {
				// Family List of last name
				Family *[]string `json:"family,omitempty"`

				// Given List of first name
				Given *[]string `json:"given,omitempty"`

				// Prefix List of Prefix or title
				Prefix *[]string `json:"prefix,omitempty"`

				// Suffix List of suffix or post-nominal
				Suffix *[]string `json:"suffix,omitempty"`

				// Text Full name
				Text *string `json:"text,omitempty"`

				// Use Patients are set to ‘usual’ and providers set to ‘official’
				Use *ReadOrderResponseDatasetsDemographicsV1NameUse `json:"use,omitempty"`
			} `json:"name,omitempty"`

			// NameList List of names associated with the patient
			NameList *[]struct {
				// Family List of last name
				Family *[]string `json:"family,omitempty"`

				// Given List of first name
				Given *[]string `json:"given,omitempty"`

				// Prefix List of Prefix or title
				Prefix *[]string `json:"prefix,omitempty"`

				// Suffix List of suffix or post-nominal
				Suffix *[]string `json:"suffix,omitempty"`

				// Text Full name
				Text *string `json:"text,omitempty"`

				// Use The iteration where use is set to "official" is the patient's legal name. The iteration where use is set to "usual"  contains the patient's preferred name if returned by the source EHR. If no iteration with a use set to "usual" is present, no preferred name was returned by the source EHR.
				Use *ReadOrderResponseDatasetsDemographicsV1NameListUse `json:"use,omitempty"`
			} `json:"nameList,omitempty"`

			// PreferredLanguage Patient's abbreviated preferred language as defined by the EHR
			PreferredLanguage *string `json:"preferredLanguage,omitempty"`

			// PreferredLanguageTitle Patient's preferred language as defined by the EHR
			PreferredLanguageTitle *string `json:"preferredLanguageTitle,omitempty"`
			Telecom                *[]struct {
				// Rank Preferred order of use (1 = highest)
				Rank *float32 `json:"rank,omitempty"`

				// System Contact method
				System *ReadOrderResponseDatasetsDemographicsV1TelecomSystem `json:"system,omitempty"`

				// Use Contact purpose
				Use *ReadOrderResponseDatasetsDemographicsV1TelecomUse `json:"use,omitempty"`

				// Value Contact detail
				Value *string `json:"value,omitempty"`
			} `json:"telecom,omitempty"`
		} `json:"demographicsV1,omitempty"`

		// DischargeV1 HL7 ADT discharge data. Note: this dataset is Epic-only. It is recommended that new integrations utilize the admitDischargeTransferV1 dataset instead, as it supports Cerner as well.
		DischargeV1 *struct {
			// AdditionalDemographics Object defining additional demographic information
			AdditionalDemographics *struct {
				// Handicap Handicap (PD1-6)
				Handicap *string `json:"handicap,omitempty"`

				// PrimaryCareProvider List of patient's primary care providers (PD1-4)
				PrimaryCareProvider *[]struct {
					// AssigningAuthority Assigning authority
					AssigningAuthority *string `json:"assigningAuthority,omitempty"`

					// FamilyName Provider last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"primaryCareProvider,omitempty"`
			} `json:"additionalDemographics,omitempty"`

			// DiagnosisInformation List of diagnosis information
			DiagnosisInformation *[]struct {
				// Code A reference to a code defined by a terminology system
				Code *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"code,omitempty"`

				// CodingMethod Diagnosis coding method (DG1-2)
				CodingMethod *string `json:"codingMethod,omitempty"`

				// DateTime Diagnosis date/time (DG1-5)
				DateTime *time.Time `json:"dateTime,omitempty"`

				// Description Diagnosis description (DG1-4)
				Description *string `json:"description,omitempty"`

				// PresentOnAdmission Diagnosis present on admission (DG1-26)
				PresentOnAdmission *string `json:"presentOnAdmission,omitempty"`
			} `json:"diagnosisInformation,omitempty"`

			// GuarantorInformation List of guarantor information
			GuarantorInformation *[]struct {
				// EmployerName Guarantor employer name (GT1-16)
				EmployerName *string `json:"employerName,omitempty"`

				// Name Object defining individual
				Name *struct {
					// FamilyName Individual last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Individual first name
					GivenName *string `json:"givenName,omitempty"`

					// NameTypeCode Individual relationship to patient
					NameTypeCode *string `json:"nameTypeCode,omitempty"`
				} `json:"name,omitempty"`

				// Relationship Guarantor relationship to patient (GT1-11)
				Relationship *string `json:"relationship,omitempty"`

				// Type Guarantor type (GT1-10)
				Type *string `json:"type,omitempty"`
			} `json:"guarantorInformation,omitempty"`

			// MessageType ADT Message Type (MSH-9.1)
			MessageType *string `json:"messageType,omitempty"`

			// PatientIdList Patient identifier list (PID-3.1/PID-3.5)
			PatientIdList *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"patientIdList,omitempty"`

			// PatientIdentificationAdditionalInformation Object defining additional patient information (ZPD-X)
			PatientIdentificationAdditionalInformation *struct {
				// ExpectedDeliveryDate Expected delivery date
				ExpectedDeliveryDate *string `json:"expectedDeliveryDate,omitempty"`

				// MultipleBirthTotal Multiple birth indicator (ZPD-3)
				MultipleBirthTotal *string `json:"multipleBirthTotal,omitempty"`

				// MyChartStatus MyChart activation status (ZPD-4)
				MyChartStatus *string `json:"myChartStatus,omitempty"`

				// PreferredCommunicationMethod List of patient preferred communication method (ZPD-2)
				PreferredCommunicationMethod *[]string `json:"preferredCommunicationMethod,omitempty"`

				// PregnancyFlag Pregnancy flag (ZPD-7)
				PregnancyFlag *string `json:"pregnancyFlag,omitempty"`

				// TransplantPatientFlag Transplant patient flag
				TransplantPatientFlag *string `json:"transplantPatientFlag,omitempty"`
			} `json:"patientIdentificationAdditionalInformation,omitempty"`

			// PatientLevelPersonnel List of patient level care team personnel information (ROL segments after PID)
			PatientLevelPersonnel *[]struct {
				// PersonnelName Object defining provider information
				PersonnelName *struct {
					// AssigningAuthority Assigning authority
					AssigningAuthority *string `json:"assigningAuthority,omitempty"`

					// FamilyName Provider last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"personnelName,omitempty"`

				// PersonnelRole A reference to a code defined by a terminology system
				PersonnelRole *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"personnelRole,omitempty"`

				// ProviderType A reference to a code defined by a terminology system
				ProviderType *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"providerType,omitempty"`

				// RoleBeginDate Treatment/Care team assignment start date
				RoleBeginDate *time.Time `json:"roleBeginDate,omitempty"`

				// RoleEndDate Treatment/Care team assignment end date
				RoleEndDate *time.Time `json:"roleEndDate,omitempty"`
			} `json:"patientLevelPersonnel,omitempty"`

			// PatientVisit Object defining patient visit information (PV1-X)
			PatientVisit *struct {
				// AdmitDateTime Admit date/time (PV1-44)
				AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

				// AdmittingDoctor List of admitting providers (PV1-17)
				AdmittingDoctor *[]struct {
					// AssigningAuthority Assigning authority
					AssigningAuthority *string `json:"assigningAuthority,omitempty"`

					// FamilyName Provider last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"admittingDoctor,omitempty"`

				// AssignedPatientLocation Hospital location abbreviation (PV1-3.4)
				AssignedPatientLocation *string `json:"assignedPatientLocation,omitempty"`

				// AttendingDoctor List of attending providers (PV1-7)
				AttendingDoctor *[]struct {
					// AssigningAuthority Assigning authority
					AssigningAuthority *string `json:"assigningAuthority,omitempty"`

					// FamilyName Provider last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"attendingDoctor,omitempty"`

				// DischargeDateTime Discharge date/time (PV1-45)
				DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

				// DischargeDestination Discharge destination (PV1-37)
				DischargeDestination *string `json:"dischargeDestination,omitempty"`

				// DischargeDisposition Discharge disposition (PV1-36)
				DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

				// HospitalService Hospital service (PV1-10)
				HospitalService *string `json:"hospitalService,omitempty"`

				// PatientClass Patient class (PV1-2)
				PatientClass *string `json:"patientClass,omitempty"`

				// PatientDeathIndicator Patient death indicator (PID-30)
				PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

				// VipIndicator VIP indicator (PV1-16)
				VipIndicator *string `json:"vipIndicator,omitempty"`

				// VisitNumber Visit number
				VisitNumber *string `json:"visitNumber,omitempty"`
			} `json:"patientVisit,omitempty"`

			// PatientVisitAdditionalInformation Object defining additional patient visit information (PV2-3)
			PatientVisitAdditionalInformation *struct {
				// AdmitReason A reference to a code defined by a terminology system
				AdmitReason *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"admitReason,omitempty"`

				// LastMenstrualPeroid Last menstrual period (ZPV-6)
				LastMenstrualPeroid *string `json:"lastMenstrualPeroid,omitempty"`
			} `json:"patientVisitAdditionalInformation,omitempty"`

			// TriggerEvent ADT Trigger Event ID (MSH-9.2)
			TriggerEvent *string `json:"triggerEvent,omitempty"`

			// VisitLevelPersonnel List of encounter level treatment team personnel information (ROL segments after PVI/PV2)
			VisitLevelPersonnel *[]struct {
				// PersonnelName Object defining provider information
				PersonnelName *struct {
					// AssigningAuthority Assigning authority
					AssigningAuthority *string `json:"assigningAuthority,omitempty"`

					// FamilyName Provider last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"personnelName,omitempty"`

				// PersonnelRole A reference to a code defined by a terminology system
				PersonnelRole *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"personnelRole,omitempty"`

				// ProviderType A reference to a code defined by a terminology system
				ProviderType *struct {
					// Identifier Symbol in syntax defined by the system
					Identifier *string `json:"identifier,omitempty"`

					// NameOfCodingSystem Identity of the terminology system
					NameOfCodingSystem *string `json:"nameOfCodingSystem,omitempty"`

					// Text Representation defined by the system
					Text *string `json:"text,omitempty"`
				} `json:"providerType,omitempty"`

				// RoleBeginDate Treatment/Care team assignment start date
				RoleBeginDate *time.Time `json:"roleBeginDate,omitempty"`

				// RoleEndDate Treatment/Care team assignment end date
				RoleEndDate *time.Time `json:"roleEndDate,omitempty"`
			} `json:"visitLevelPersonnel,omitempty"`
		} `json:"dischargeV1,omitempty"`

		// EhrUserV1 EHR user currently initiating the activity within Xealth
		EhrUserV1 *struct {
			// FirstName First name
			FirstName *string `json:"firstName,omitempty"`

			// LastName Last name
			LastName *string `json:"lastName,omitempty"`

			// ProviderId EHR provider record (SER .1)
			ProviderId *string `json:"providerId,omitempty"`

			// ProviderNPI National Provider Identifer
			ProviderNPI *string `json:"providerNPI,omitempty"`

			// ProviderType EHR provider record type (SER 1040)
			ProviderType *string `json:"providerType,omitempty"`

			// SystemLogin Login identifier (EMP 45)
			SystemLogin *string `json:"systemLogin,omitempty"`

			// UserId EHR identifer (EMP .1)
			UserId *string `json:"userId,omitempty"`
		} `json:"ehrUserV1,omitempty"`

		// EncounterLocationV1 Location tied to the Encounter
		EncounterLocationV1 *struct {
			// Display Location full name
			Display *string `json:"display,omitempty"`

			// FhirId Location FHIR identifier
			FhirId *string `json:"fhirId,omitempty"`
		} `json:"encounterLocationV1,omitempty"`

		// EncounterV1 Encounter level data
		EncounterV1 *struct {
			// AttendingProvider Object defining practitioner information
			AttendingProvider *struct {
				// Identifier List of practitioner identifiers
				Identifier *[]struct {
					// Type Description of identifier
					Type *struct {
						// Text Plain text representation of the identifier
						Text *string `json:"text,omitempty"`
					} `json:"type,omitempty"`

					// Value Unique identifier value
					Value *string `json:"value,omitempty"`
				} `json:"identifier,omitempty"`

				// Name List of practitioner names
				Name *[]struct {
					// Family List of last name
					Family *[]string `json:"family,omitempty"`

					// Given List of first name
					Given *[]string `json:"given,omitempty"`

					// Prefix List of Prefix or title
					Prefix *[]string `json:"prefix,omitempty"`

					// Suffix List of suffix or post-nominal
					Suffix *[]string `json:"suffix,omitempty"`

					// Text Full name
					Text *string `json:"text,omitempty"`

					// Use Patients are set to ‘usual’ and providers set to ‘official’
					Use *ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUse `json:"use,omitempty"`
				} `json:"name,omitempty"`
			} `json:"attendingProvider,omitempty"`

			// EncounterLocation Location tied to the Encounter
			EncounterLocation *struct {
				// Display Location full name
				Display *string `json:"display,omitempty"`

				// FhirId Location FHIR identifier
				FhirId *string `json:"fhirId,omitempty"`
			} `json:"encounterLocation,omitempty"`

			// EncounterPointOfCare Object defining ‘department’ Epic or 'unit' in Cerner
			EncounterPointOfCare *struct {
				// Address Object defining address information
				Address *struct {
					// City City name
					City *string `json:"city,omitempty"`

					// Country Country name
					Country *string `json:"country,omitempty"`

					// District District name
					District *string `json:"district,omitempty"`

					// Line List of street name, number, direction & P.O. Box etc
					Line *[]string `json:"line,omitempty"`

					// PostalCode Postal code for area
					PostalCode *string `json:"postalCode,omitempty"`

					// State State name or abbreviation
					State *string `json:"state,omitempty"`

					// Text Full address
					Text *string `json:"text,omitempty"`
				} `json:"address,omitempty"`

				// Alias List of aliases of department or unit
				Alias *[]string `json:"alias,omitempty"`

				// Identifier List of department or unit identifiers
				Identifier *[]struct {
					// Type Description of identifier
					Type *struct {
						// Text Plain text representation of the identifier
						Text *string `json:"text,omitempty"`
					} `json:"type,omitempty"`

					// Value Unique identifier value
					Value *string `json:"value,omitempty"`
				} `json:"identifier,omitempty"`

				// Name Name of department or unit
				Name *string `json:"name,omitempty"`

				// Telecom List of contact information of department or unit
				Telecom *[]struct {
					// Rank Preferred order of use (1 = highest)
					Rank *float32 `json:"rank,omitempty"`

					// System Contact method
					System *ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomSystem `json:"system,omitempty"`

					// Use Contact purpose
					Use *ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUse `json:"use,omitempty"`

					// Value Contact detail
					Value *string `json:"value,omitempty"`
				} `json:"telecom,omitempty"`
			} `json:"encounterPointOfCare,omitempty"`

			// VisitId Object defining visit identifier; only intended to be used for manual orders
			VisitId *struct {
				// Id CSN for the visit for Epic | FIN NBR for the visit for Cerner
				Id *string `json:"id,omitempty"`

				// Type 'CSN' is hardcoded for Epic | OID of the alias pool associated with the FIN for Cerner
				Type *string `json:"type,omitempty"`
			} `json:"visitId,omitempty"`
		} `json:"encounterV1,omitempty"`

		// MaternityPregnancyCernerV1 Cerner maternity information
		MaternityPregnancyCernerV1 *struct {
			// EstimatedDeliveryDates List of estimated delivery dates
			EstimatedDeliveryDates *[]struct {
				// Category Object defining a codeable concept information
				Category *struct {
					// Coding List of codes defined by a terminology system
					Coding *[]struct {
						// Code Symbol in syntax defined by the system
						Code *string `json:"code,omitempty"`

						// Extension Object defining optional extension elements
						Extension *struct {
							// Url Identifies the meaning of the extension
							Url *string `json:"url,omitempty"`

							// ValueCode Value of extension
							ValueCode *string `json:"valueCode,omitempty"`
						} `json:"extension,omitempty"`

						// System Identity of the terminology system
						System *string `json:"system,omitempty"`
					} `json:"coding,omitempty"`

					// Text Plain text representation of the concept
					Text *string `json:"text,omitempty"`
				} `json:"category,omitempty"`

				// Code Object defining a codeable concept information
				Code *struct {
					// Coding List of codes defined by a terminology system
					Coding *[]struct {
						// Code Symbol in syntax defined by the system
						Code *string `json:"code,omitempty"`

						// Extension Object defining optional extension elements
						Extension *struct {
							// Url Identifies the meaning of the extension
							Url *string `json:"url,omitempty"`

							// ValueCode Value of extension
							ValueCode *string `json:"valueCode,omitempty"`
						} `json:"extension,omitempty"`

						// System Identity of the terminology system
						System *string `json:"system,omitempty"`
					} `json:"coding,omitempty"`

					// Text Plain text representation of the concept
					Text *string `json:"text,omitempty"`
				} `json:"code,omitempty"`

				// EffectiveDateTime Clinically relevant time/time-period for observation
				EffectiveDateTime *string `json:"effectiveDateTime,omitempty"`

				// ValueDateTime Actual date/time of the estimated delivery date
				ValueDateTime *time.Time `json:"valueDateTime,omitempty"`
			} `json:"estimatedDeliveryDates,omitempty"`
		} `json:"maternityPregnancyCernerV1,omitempty"`

		// MaternityPregnancyEpicV1 Epic maternity information
		MaternityPregnancyEpicV1 *struct {
			// Children List of children associated with the patient
			Children *[]struct {
				// Ids List of the current identifiers related to the child
				Ids *[]struct {
					// Id Value of the identifier for the individual
					Id *string `json:"id,omitempty"`

					// Type Defines the type of identifier associated with the id
					Type *string `json:"type,omitempty"`
				} `json:"ids,omitempty"`

				// Name Object naming the individual
				Name *struct {
					// Family List of last name
					Family *[]string `json:"family,omitempty"`

					// Given List of first name
					Given *[]string `json:"given,omitempty"`

					// Prefix List of Prefix or title
					Prefix *[]string `json:"prefix,omitempty"`

					// Suffix List of suffix or post-nominal
					Suffix *[]string `json:"suffix,omitempty"`

					// Text Full name
					Text *string `json:"text,omitempty"`

					// Use Patients are set to ‘usual’ and providers set to ‘official’
					Use *ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUse `json:"use,omitempty"`
				} `json:"name,omitempty"`

				// ProxyExpiration Date proxy relationship ends
				ProxyExpiration *openapi_types.Date `json:"proxyExpiration,omitempty"`

				// ProxyRelationship Defines proxy relationship
				ProxyRelationship *string `json:"proxyRelationship,omitempty"`

				// Type Defines relationship between patient and child
				Type *ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenType `json:"type,omitempty"`
			} `json:"children,omitempty"`

			// Pregnant Indicates whether patient is currently pregnant
			Pregnant *ReadOrderResponseDatasetsMaternityPregnancyEpicV1Pregnant `json:"pregnant,omitempty"`
		} `json:"maternityPregnancyEpicV1,omitempty"`

		// MaternityPregnancyV2 Universal maternity information (applies to Health Systems using either Cerner or Epic AppOrchard)
		MaternityPregnancyV2 *struct {
			// EstimatedDeliveryDates List of estimated delivery dates (sourced from Observation.Search (STU2) for Cerner and Observation.Search (Obstetric Details) (R4) for Epic)
			EstimatedDeliveryDates *[]struct {
				// Category Object defining a codeable concept information
				Category *struct {
					// Coding List of codes defined by a terminology system
					Coding *[]struct {
						// Code Symbol in syntax defined by the system
						Code *string `json:"code,omitempty"`

						// Extension Object defining optional extension elements
						Extension *struct {
							// Url Identifies the meaning of the extension
							Url *string `json:"url,omitempty"`

							// ValueCode Value of extension
							ValueCode *string `json:"valueCode,omitempty"`
						} `json:"extension,omitempty"`

						// System Identity of the terminology system
						System *string `json:"system,omitempty"`
					} `json:"coding,omitempty"`

					// Text Plain text representation of the concept
					Text *string `json:"text,omitempty"`
				} `json:"category,omitempty"`

				// Code Object defining a codeable concept information
				Code *struct {
					// Coding List of codes defined by a terminology system
					Coding *[]struct {
						// Code Symbol in syntax defined by the system
						Code *string `json:"code,omitempty"`

						// Extension Object defining optional extension elements
						Extension *struct {
							// Url Identifies the meaning of the extension
							Url *string `json:"url,omitempty"`

							// ValueCode Value of extension
							ValueCode *string `json:"valueCode,omitempty"`
						} `json:"extension,omitempty"`

						// System Identity of the terminology system
						System *string `json:"system,omitempty"`
					} `json:"coding,omitempty"`

					// Text Plain text representation of the concept
					Text *string `json:"text,omitempty"`
				} `json:"code,omitempty"`

				// EffectiveDateTime Clinically relevant time/time-period for observation
				EffectiveDateTime *string `json:"effectiveDateTime,omitempty"`

				// ValueDateTime Actual date/time of the estimated delivery date
				ValueDateTime *time.Time `json:"valueDateTime,omitempty"`
			} `json:"estimatedDeliveryDates,omitempty"`
		} `json:"maternityPregnancyV2,omitempty"`

		// ProblemListV1 Patient problem information
		ProblemListV1 *struct {
			// Problems List of problems
			Problems *[]struct {
				// Code Object defining condition or problem
				Code *struct {
					// Code Symbol in syntax defined by the system
					Code *string `json:"code,omitempty"`

					// System Identity of the terminology system
					System *string `json:"system,omitempty"`

					// Text Plain text representation of the concept
					Text *string `json:"text,omitempty"`
				} `json:"code,omitempty"`

				// OnsetPeriod Estimated date, date-time, or partial date the problem began and/or ceased.
				OnsetPeriod *struct {
					// End End of the time period, inclusive boundary. If end is missing, then the period is ongoing.
					End *time.Time `json:"end,omitempty"`

					// Start Start of the time period, inclusive boundary.
					Start *time.Time `json:"start,omitempty"`
				} `json:"onsetPeriod,omitempty"`

				// RecordedDate Date the problem was first recorded. Epic: Supported (Not recommended, use recordedDateTime instead); Cerner: Not Supported
				RecordedDate *openapi_types.Date `json:"recordedDate,omitempty"`

				// RecordedDateTime Date, date-time, or partial date the problem was first recorded.
				RecordedDateTime *time.Time `json:"recordedDateTime,omitempty"`
			} `json:"problems,omitempty"`
		} `json:"problemListV1,omitempty"`

		// SocialHistoryV1 Patient social history (smoking status)
		SocialHistoryV1 *struct {
			// SmokingStatus Object defining observation information
			SmokingStatus *struct {
				// Category Object defining condition or problem
				Category *struct {
					// Code Symbol in syntax defined by the system
					Code *string `json:"code,omitempty"`

					// System Identity of the terminology system
					System *string `json:"system,omitempty"`

					// Text Plain text representation of the concept
					Text *string `json:"text,omitempty"`
				} `json:"category,omitempty"`

				// Value Object defining condition or problem
				Value *struct {
					// Code Symbol in syntax defined by the system
					Code *string `json:"code,omitempty"`

					// System Identity of the terminology system
					System *string `json:"system,omitempty"`

					// Text Plain text representation of the concept
					Text *string `json:"text,omitempty"`
				} `json:"value,omitempty"`
			} `json:"smokingStatus,omitempty"`
		} `json:"socialHistoryV1,omitempty"`

		// SurgicalCaseEventV1 HL7 SIU surgery data
		SurgicalCaseEventV1 *struct {
			// CancelReason Cancel Reason (SCH-6)
			CancelReason *string `json:"cancelReason,omitempty"`

			// CaseNumber Case/Log number (SCH-2)
			CaseNumber *string `json:"caseNumber,omitempty"`

			// CaseProgressStatusId Case progress status ID (SCH-25.4)
			CaseProgressStatusId *string `json:"caseProgressStatusId,omitempty"`

			// CaseProgressStatusText Case progress status text (SCH-25.5)
			CaseProgressStatusText *string `json:"caseProgressStatusText,omitempty"`

			// CaseSchedulingStatusId Case scheduling status ID (SCH-25.1)
			CaseSchedulingStatusId *string `json:"caseSchedulingStatusId,omitempty"`

			// CaseSchedulingStatusText Case scheduling status text (SCH-25.2)
			CaseSchedulingStatusText *string `json:"caseSchedulingStatusText,omitempty"`

			// ContactSerialNumber Visit number (PV1-19)
			ContactSerialNumber *string `json:"contactSerialNumber,omitempty"`

			// DateTimeOfSurgery Date/Time of surgery (SCH-11.4)
			DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

			// HospitalLocationAbbreviation Hospital location abbreviation (PV1-3.4)
			HospitalLocationAbbreviation *string `json:"hospitalLocationAbbreviation,omitempty"`

			// Laterality Laterality (AIS-12)
			Laterality *string `json:"laterality,omitempty"`

			// MessageType SIU Message Type (MSH-9.1)
			MessageType *string `json:"messageType,omitempty"`

			// OriginalCaseNumber Original case/log number (SCH-24)
			OriginalCaseNumber *string `json:"originalCaseNumber,omitempty"`

			// PatientIdList Patient identifier list (PID-3.1/PID-3.5)
			PatientIdList *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"patientIdList,omitempty"`

			// PatientType Patient type (PV1-2)
			PatientType *string `json:"patientType,omitempty"`

			// SurgicalProcedureLocations List of surgical procedure location information
			SurgicalProcedureLocations *[]struct {
				// LocationId Case location ID (AIL-3.2)
				LocationId *string `json:"locationId,omitempty"`

				// LocationName Case location name (AIL-3.4)
				LocationName *string `json:"locationName,omitempty"`
			} `json:"surgicalProcedureLocations,omitempty"`

			// SurgicalProcedures List of surgical procedure information
			SurgicalProcedures *[]struct {
				// DateTimeOfSurgery Date/Time of surgery (AIS-4)
				DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

				// SurgicalProcedureId Surgical procedure ID (AIS-3.1)
				SurgicalProcedureId *string `json:"surgicalProcedureId,omitempty"`

				// SurgicalProcedureName Surgical procedure name (AIS-3.2)
				SurgicalProcedureName *string `json:"surgicalProcedureName,omitempty"`
			} `json:"surgicalProcedures,omitempty"`

			// SurgicalService Surgical service (PV1-10)
			SurgicalService *string `json:"surgicalService,omitempty"`

			// SurgicalStaffPersonnel List of surgical staff personnel information
			SurgicalStaffPersonnel *[]struct {
				// PersonnelId List of provider identifiers (AIP-3.1)
				PersonnelId *[]struct {
					// Id Value of the identifier for the individual
					Id *string `json:"id,omitempty"`

					// Type Defines the type of identifier associated with the id
					Type *string `json:"type,omitempty"`
				} `json:"personnelId,omitempty"`

				// PersonnelName Name of provider
				PersonnelName *struct {
					// Family Provider last name (AIP-3.2)
					Family *string `json:"family,omitempty"`

					// Given Provider first name (AIP-3.3)
					Given *string `json:"given,omitempty"`
				} `json:"personnelName,omitempty"`

				// PersonnelRole Provider role (AIP-4.2)
				PersonnelRole *string `json:"personnelRole,omitempty"`
			} `json:"surgicalStaffPersonnel,omitempty"`

			// TriggerEvent SIU Trigger Event (MSH-9.2)
			TriggerEvent *string `json:"triggerEvent,omitempty"`
		} `json:"surgicalCaseEventV1,omitempty"`

		// SurgicalCaseEventV2 HL7 SIU surgery data
		SurgicalCaseEventV2 *struct {
			// CancelReason Cancel Reason (SCH-6)
			CancelReason *string `json:"cancelReason,omitempty"`

			// CaseNumber Case/Log number (SCH-2)
			CaseNumber *string `json:"caseNumber,omitempty"`

			// CaseProgressStatusId Case progress status ID (SCH-25.4)
			CaseProgressStatusId *string `json:"caseProgressStatusId,omitempty"`

			// CaseProgressStatusText Case progress status text (SCH-25.5)
			CaseProgressStatusText *string `json:"caseProgressStatusText,omitempty"`

			// CaseSchedulingStatusId Case scheduling status ID (SCH-25.1)
			CaseSchedulingStatusId *string `json:"caseSchedulingStatusId,omitempty"`

			// CaseSchedulingStatusText Case scheduling status text (SCH-25.2)
			CaseSchedulingStatusText *string `json:"caseSchedulingStatusText,omitempty"`

			// ContactSerialNumber Visit number (PV1-19)
			ContactSerialNumber *string `json:"contactSerialNumber,omitempty"`

			// DateTimeOfSurgery Date/Time of surgery (SCH-11.4)
			DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

			// HospitalLocationAbbreviation Hospital location abbreviation (PV1-3.4)
			HospitalLocationAbbreviation *string `json:"hospitalLocationAbbreviation,omitempty"`

			// MessageType SIU Message Type (MSH-9.1)
			MessageType *string `json:"messageType,omitempty"`

			// OriginalCaseNumber Original case/log number (SCH-24)
			OriginalCaseNumber *string `json:"originalCaseNumber,omitempty"`

			// PatientIdList Patient identifier list (PID-3.1/PID-3.5)
			PatientIdList *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"patientIdList,omitempty"`

			// PatientType Patient type (PV1-2)
			PatientType *string `json:"patientType,omitempty"`

			// ResourceGroups Resource group list
			ResourceGroups *[]struct {
				// SurgicalProcedureLocations List of surgical procedure location information
				SurgicalProcedureLocations *[]struct {
					// LocationId Case location ID (AIL-3.2)
					LocationId *string `json:"locationId,omitempty"`

					// LocationName Case location name (AIL-3.4)
					LocationName *string `json:"locationName,omitempty"`
				} `json:"surgicalProcedureLocations,omitempty"`

				// SurgicalProcedures List of surgical procedure information
				SurgicalProcedures *[]struct {
					// DateTimeOfSurgery Date/Time of surgery (AIS-4), only expected for Epic
					DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

					// LateralityText Laterality text description (AIS-12.2), not supported by Cerner
					LateralityText *string `json:"lateralityText,omitempty"`

					// LateralityValue Laterality code value (AIS-12.1), not supported by Cerner
					LateralityValue *string `json:"lateralityValue,omitempty"`

					// Procedure List of surgical procedure detail information
					Procedure *[]struct {
						// SurgicalProcedureId Surgical procedure ID (AIS-3.1)
						SurgicalProcedureId *string `json:"surgicalProcedureId,omitempty"`

						// SurgicalProcedureName Surgical procedure name (AIS-3.2)
						SurgicalProcedureName *string `json:"surgicalProcedureName,omitempty"`
					} `json:"procedure,omitempty"`
				} `json:"surgicalProcedures,omitempty"`

				// SurgicalStaffPersonnel List of surgical staff personnel information
				SurgicalStaffPersonnel *[]struct {
					// PersonnelId List of provider identifiers (AIP-3.1)
					PersonnelId *[]struct {
						// Id Value of the identifier for the individual
						Id *string `json:"id,omitempty"`

						// Type Defines the type of identifier associated with the id
						Type *string `json:"type,omitempty"`
					} `json:"personnelId,omitempty"`

					// PersonnelName Name of provider
					PersonnelName *struct {
						// Family Provider last name (AIP-3.2)
						Family *string `json:"family,omitempty"`

						// Given Provider first name (AIP-3.3)
						Given *string `json:"given,omitempty"`
					} `json:"personnelName,omitempty"`

					// PersonnelRole Provider role (AIP-4.2)
					PersonnelRole *string `json:"personnelRole,omitempty"`
				} `json:"surgicalStaffPersonnel,omitempty"`
			} `json:"resourceGroups,omitempty"`

			// SurgicalService Surgical service (PV1-10)
			SurgicalService *string `json:"surgicalService,omitempty"`

			// TriggerEvent SIU Trigger Event (MSH-9.2)
			TriggerEvent *string `json:"triggerEvent,omitempty"`
		} `json:"surgicalCaseEventV2,omitempty"`

		// SurgicalCaseEventV3 HL7 SIU surgery data agnostic to EHR vendor (Cerner/Epic). For Cerner, this dataset can't be sent on an Update partner notification type. This is because Cerner does not support S14 update messages.
		SurgicalCaseEventV3 *struct {
			// AssignedPatientLocation Assigned patient location
			AssignedPatientLocation *struct {
				Building *struct {
					// NamespaceId Building (PV1-3.7)
					NamespaceId *string `json:"namespaceId,omitempty"`
				} `json:"building,omitempty"`
				Department *struct {
					// NamespaceId Department (PV1-3.1)
					NamespaceId *string `json:"namespaceId,omitempty"`
				} `json:"department,omitempty"`
				Facility *struct {
					// NamespaceId Facility namespace ID (PV1-3.4.1)
					NamespaceId *string `json:"namespaceId,omitempty"`
				} `json:"facility,omitempty"`
			} `json:"assignedPatientLocation,omitempty"`

			// CancelReason Cancel Reason (SCH-6)
			CancelReason *string `json:"cancelReason,omitempty"`

			// CaseId Case/Log number (SCH-2.1)
			CaseId *string `json:"caseId,omitempty"`

			// CaseProgressStatusId Case progress status ID (SCH-25.4), only expected for Epic
			CaseProgressStatusId *string `json:"caseProgressStatusId,omitempty"`

			// CaseProgressStatusText Case progress status text (SCH-25.5), only expected for Epic
			CaseProgressStatusText *string `json:"caseProgressStatusText,omitempty"`

			// CaseSchedulingStatusId Case scheduling status ID (SCH-25.1), only expected for Epic
			CaseSchedulingStatusId *string `json:"caseSchedulingStatusId,omitempty"`

			// CaseSchedulingStatusText Case scheduling status text (SCH-25.2), only expected for Epic
			CaseSchedulingStatusText *string `json:"caseSchedulingStatusText,omitempty"`

			// DateTimeOfSurgery Date/Time of surgery (SCH-11.4)
			DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

			// MessageType SIU Message Type (MSH-9.1)
			MessageType *string `json:"messageType,omitempty"`

			// OriginalCaseId Original case/log number (SCH-24), only expected for Epic
			OriginalCaseId *string `json:"originalCaseId,omitempty"`

			// PatientIdList Patient identifier list (Epic: PID-3.1/PID-3.5, Cerner: PID-3.1/PID-3.4)
			PatientIdList *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"patientIdList,omitempty"`

			// PatientType Patient type (PV1-2)
			PatientType *string `json:"patientType,omitempty"`

			// PlacerId Case/Log number (SCH-1.1), only expected for Cerner
			PlacerId *string `json:"placerId,omitempty"`

			// ResourceGroups Resource group list
			ResourceGroups *[]struct {
				// SurgicalProcedureLocations List of surgical procedure location information
				SurgicalProcedureLocations *[]struct {
					Department *struct {
						// NamespaceId Department (AIL-3.1)
						NamespaceId *string `json:"namespaceId,omitempty"`
					} `json:"department,omitempty"`
					Facility *struct {
						// NamespaceId Facility namespace ID (AIL-3.4.1)
						NamespaceId *string `json:"namespaceId,omitempty"`
					} `json:"facility,omitempty"`
					OperatingRoom *struct {
						// NamespaceId Operating Room (AIL-3.2)
						NamespaceId *string `json:"namespaceId,omitempty"`
					} `json:"operatingRoom,omitempty"`
				} `json:"surgicalProcedureLocations,omitempty"`

				// SurgicalProcedures List of surgical procedure information
				SurgicalProcedures *[]struct {
					// DateTimeOfSurgery Date/Time of surgery (AIS-4), only expected for Epic
					DateTimeOfSurgery *time.Time `json:"dateTimeOfSurgery,omitempty"`

					// LateralityText Laterality text description (AIS-12.2), not supported by Cerner
					LateralityText *string `json:"lateralityText,omitempty"`

					// LateralityValue Laterality code value (AIS-12.1), not supported by Cerner
					LateralityValue *string `json:"lateralityValue,omitempty"`

					// Procedure List of surgical procedure detail information
					Procedure *[]struct {
						// SurgicalProcedureId Surgical procedure ID (AIS-3.1)
						SurgicalProcedureId *string `json:"surgicalProcedureId,omitempty"`

						// SurgicalProcedureName Surgical procedure name (AIS-3.2)
						SurgicalProcedureName *string `json:"surgicalProcedureName,omitempty"`
					} `json:"procedure,omitempty"`
				} `json:"surgicalProcedures,omitempty"`

				// SurgicalStaffPersonnel List of surgical staff personnel information
				SurgicalStaffPersonnel *[]struct {
					// PersonnelId List of provider identifiers (AIP-3.1) and their ID types (Epic: AIP-3.13 / Cerner: AIP-3.9.1)
					PersonnelId *[]struct {
						// Id Value of the identifier for the individual
						Id *string `json:"id,omitempty"`

						// Type Defines the type of identifier associated with the id
						Type *string `json:"type,omitempty"`
					} `json:"personnelId,omitempty"`

					// PersonnelName Name of provider
					PersonnelName *struct {
						// Family Provider last name (AIP-3.2)
						Family *string `json:"family,omitempty"`

						// Given Provider first name (AIP-3.3)
						Given *string `json:"given,omitempty"`
					} `json:"personnelName,omitempty"`

					// ResourceRole Resource role object (AIP-4.1/AIP-4.2)
					ResourceRole *struct {
						// PersonnelId Personnel Id (AIP-4.1)
						PersonnelId *string `json:"personnelId,omitempty"`

						// PersonnelRole Personnel role (Epic: AIP-4.2 / Cerner: Hardcoded as 'Primary')
						PersonnelRole *string `json:"personnelRole,omitempty"`
					} `json:"resourceRole,omitempty"`
				} `json:"surgicalStaffPersonnel,omitempty"`
			} `json:"resourceGroups,omitempty"`

			// SurgicalService Surgical service (PV1-10)
			SurgicalService *string `json:"surgicalService,omitempty"`

			// TriggerEvent SIU Trigger Event (MSH-9.2)
			TriggerEvent *string `json:"triggerEvent,omitempty"`

			// VisitId Object defining visit identifier
			VisitId *struct {
				// Id Visit Id (Epic: PV1-19 / Cerner: PID-18.1)
				Id *string `json:"id,omitempty"`

				// Type Visit Id type (Epic: Hardcoded as 'CSN' / Cerner: PID-18.4, expected for S13 only)
				Type *string `json:"type,omitempty"`
			} `json:"visitId,omitempty"`
		} `json:"surgicalCaseEventV3,omitempty"`

		// UnsolicitedOrderV1 HL7 Unsolicited Order Message (ORM) data agnostic to ehr vendor (cerner/epic)
		UnsolicitedOrderV1 *struct {
			// AdmitDateTime Admit Date/Time (PV1-44)
			AdmitDateTime *time.Time `json:"admitDateTime,omitempty"`

			// AdmittingProvider List of admitting provider (PV1-17)
			AdmittingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"admittingProvider,omitempty"`

			// AlternateVisitId Alternate Visit ID (PV1-50)
			AlternateVisitId *string `json:"alternateVisitId,omitempty"`

			// AssignedPatientLocation Appointment Patient Location (PV1-3)
			AssignedPatientLocation *struct {
				// Building Building (PV1-3.7) - (often not populated)
				Building *struct {
					// NamespaceId Namespace id
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId Universal id
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType Universal id type
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"building,omitempty"`

				// Department Department (PV1-3.1)
				Department *struct {
					// NamespaceId Namespace id
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId Universal id
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType Universal id type
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"department,omitempty"`

				// Facility Facility (PV1-3.4)
				Facility *struct {
					// NamespaceId Namespace id
					NamespaceId *string `json:"namespaceId,omitempty"`

					// UniversalId Universal id
					UniversalId *string `json:"universalId,omitempty"`

					// UniversalIdType Universal id type
					UniversalIdType *string `json:"universalIdType,omitempty"`
				} `json:"facility,omitempty"`
			} `json:"assignedPatientLocation,omitempty"`

			// AttendingProvider List of attending provider (PV1-7)
			AttendingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"attendingProvider,omitempty"`

			// CommonOrder List of objects describing fields common to all orders
			CommonOrder *[]struct {
				// EnteredBy Identity of person who keyed the order request (ORC-10)
				EnteredBy *struct {
					// FamilyName ORC-10.3
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName ORC-10.2
					GivenName *string `json:"givenName,omitempty"`

					// Id ORC-10.1
					Id *string `json:"id,omitempty"`
				} `json:"enteredBy,omitempty"`

				// OrderControl Function of order segment (ORC-1)
				OrderControl *string `json:"orderControl,omitempty"`

				// OrderingProvider List of ordering provider (ORC-12) | identifierTypeCode - Epic (ORC-12.13) | Cerner (ORC-12.9)
				OrderingProvider *[]struct {
					// FamilyName Provider last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"orderingProvider,omitempty"`

				// PlacerOrderNumber Placer application's order number (ORC-2.1)
				PlacerOrderNumber *string `json:"placerOrderNumber,omitempty"`

				// PlacerOrderNumberNamespaceId Placer application's order number namespace id (ORC-2.2)
				PlacerOrderNumberNamespaceId *string `json:"placerOrderNumberNamespaceId,omitempty"`

				// QuantityTiming Timing of order (ORC-7 for Epic, OBR-27.7 for Cerner)
				QuantityTiming *struct {
					// Condition Epic: Not Supported; Cerner: OBR-27.7
					Condition *string `json:"condition,omitempty"`

					// EndDate Epic: ORC-7.5; Cerner: OBR-27.5
					EndDate *time.Time `json:"endDate,omitempty"`

					// Interval Epic: ORC-7.2; Cerner: OBR-27.2
					Interval *string `json:"interval,omitempty"`

					// OrderType Epic: ORC-7.8; Cerner: Not Supported
					OrderType *string `json:"orderType,omitempty"`

					// Priority Epic: ORC-7.6; Cerner: OBR-27.6
					Priority *string `json:"priority,omitempty"`

					// Quantity Epic: ORC-7.1; Cerner: OBR-27.1
					Quantity *string `json:"quantity,omitempty"`

					// QuantityTotal Epic: ORC-7.12; Cerner: Not Supported
					QuantityTotal *string `json:"quantityTotal,omitempty"`

					// StartDate Epic: ORC-7.4; Cerner: OBR-27.4
					StartDate *time.Time `json:"startDate,omitempty"`
				} `json:"quantityTiming,omitempty"`

				// TransactionDateTime Date and time of transaction reflected in ORC-1 (ORC-9)
				TransactionDateTime *time.Time `json:"transactionDateTime,omitempty"`
			} `json:"commonOrder,omitempty"`

			// ConsultingProvider List of consulting provider (PV1-9)
			ConsultingProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"consultingProvider,omitempty"`

			// DischargeDateTime Discharge Date/Time (PV1-45)
			DischargeDateTime *time.Time `json:"dischargeDateTime,omitempty"`

			// DischargeDisposition Discharge disposition (PV1-36)
			DischargeDisposition *string `json:"dischargeDisposition,omitempty"`

			// Handicap Handicap (PD1-6)
			Handicap *string `json:"handicap,omitempty"`

			// HospitalService Hospital service (PV1-10)
			HospitalService *string `json:"hospitalService,omitempty"`

			// MessageType ORM Message Type (MSH-9.1)
			MessageType *string `json:"messageType,omitempty"`
			Notes       *[]struct {
				// Comments Comment (NTE-3.3)
				Comments *[]string `json:"comments,omitempty"`

				// SetId Set Id  (NTE-3.1)
				SetId *string `json:"setId,omitempty"`

				// SourceOfComment Source of comment (NTE-3.2)
				SourceOfComment *string `json:"sourceOfComment,omitempty"`
			} `json:"notes,omitempty"`

			// ObservationRequest List of objects of information specific to an order for a diagnostic study or observation
			ObservationRequest *[]struct {
				// DiagnosticServiceSectionId Section of diagnostic service where observation was performed (OBR-24)
				DiagnosticServiceSectionId *string `json:"diagnosticServiceSectionId,omitempty"`

				// ObservationDateTime Clinically relevant observation date time (OBR-7)
				ObservationDateTime *time.Time `json:"observationDateTime,omitempty"`

				// OrderingProvider List of ordering provider (OBR-16) | identifierTypeCode - Epic (OBR-16.13) | Cerner (OBR-16.9)
				OrderingProvider *[]struct {
					// FamilyName Provider last name
					FamilyName *string `json:"familyName,omitempty"`

					// GivenName Provider first name
					GivenName *string `json:"givenName,omitempty"`

					// IdNumber Provider id number
					IdNumber *string `json:"idNumber,omitempty"`

					// IdentifierTypeCode Provider id type
					IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
				} `json:"orderingProvider,omitempty"`

				// PlacerOrderNumber Placer order number (OBR-2.1)
				PlacerOrderNumber *string `json:"placerOrderNumber,omitempty"`

				// PlacerOrderNumberNamespaceId Placer order number namespace id (OBR-2.2)
				PlacerOrderNumberNamespaceId *string `json:"placerOrderNumberNamespaceId,omitempty"`

				// RequestedDateTime Requested date time (OBR-6)
				RequestedDateTime *time.Time `json:"requestedDateTime,omitempty"`

				// ScheduledDateTime Date time filler scheduled an observation (OBR-36)
				ScheduledDateTime *time.Time `json:"scheduledDateTime,omitempty"`

				// Service Actual service/content being ordered (OBR-4)
				Service *struct {
					// AlternateText Alternate text (OBR-4.5)
					AlternateText *string `json:"alternateText,omitempty"`

					// CodingSystemName Coding system name (OBR-4.3)
					CodingSystemName *string `json:"codingSystemName,omitempty"`

					// UniversalServiceIdentifierId Universal id (OBR-4.1)
					UniversalServiceIdentifierId *string `json:"universalServiceIdentifierId,omitempty"`

					// UniversalServiceIdentifierText Universal id text (OBR-4.2)
					UniversalServiceIdentifierText *string `json:"universalServiceIdentifierText,omitempty"`
				} `json:"service,omitempty"`
			} `json:"observationRequest,omitempty"`

			// OrderBasedQuestions List of objects of observation report information
			OrderBasedQuestions *[]struct {
				// Identifier Typically represents a question asked on order entry (OBX-3)
				Identifier *struct {
					// CodingSystemName OBX-3.3
					CodingSystemName *string `json:"codingSystemName,omitempty"`

					// Id OBX-3.1
					Id *string `json:"id,omitempty"`

					// Name OBX-3.2
					Name *string `json:"name,omitempty"`
				} `json:"identifier,omitempty"`

				// ResultStatus Observation result status (OBX-11)
				ResultStatus *string `json:"resultStatus,omitempty"`

				// SetId Sequence number (OBX-1)
				SetId *string `json:"setId,omitempty"`

				// Units Unit of observation value (OBX-6.1)
				Units *string `json:"units,omitempty"`

				// Value Typically represents answer(s) to question asked on order entry. This field's length and format may vary depending on the data type provided by the EHR for this segment. (OBX-5.1)
				Value *[]string `json:"value,omitempty"`

				// ValueType Defines data type of OBX-5 (OBX-2.1)
				ValueType *string `json:"valueType,omitempty"`
			} `json:"orderBasedQuestions,omitempty"`

			// PatientClass Patient class (PV1-2)
			PatientClass *string `json:"patientClass,omitempty"`

			// PatientDeathIndicator Patient Death Indicator (PID-30)
			PatientDeathIndicator *string `json:"patientDeathIndicator,omitempty"`

			// PatientIdList Patient identifier list (PID-3.1/PID-3.5 for Epic; PID-3.4 for Cerner)
			PatientIdList *[]struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"patientIdList,omitempty"`

			// PatientType Patient type (PV1-18)
			PatientType *string `json:"patientType,omitempty"`

			// PrimaryCareProvider List of primary care provider (PD1-4) | identifierTypeCode - Epic (PD1-4.13) | Cerner (PD1-4.9)
			PrimaryCareProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"primaryCareProvider,omitempty"`

			// ReferringProvider List of referring provider (PV1-8)
			ReferringProvider *[]struct {
				// FamilyName Provider last name
				FamilyName *string `json:"familyName,omitempty"`

				// GivenName Provider first name
				GivenName *string `json:"givenName,omitempty"`

				// IdNumber Provider id number
				IdNumber *string `json:"idNumber,omitempty"`

				// IdentifierTypeCode Provider id type
				IdentifierTypeCode *string `json:"identifierTypeCode,omitempty"`
			} `json:"referringProvider,omitempty"`

			// TriggerEvent ORM Trigger Event (MSH-9.2)
			TriggerEvent *string `json:"triggerEvent,omitempty"`

			// VisitId Epic (PV1-19/CSN); CSN is Hardcoded | Cerner (PID-18.1/PID-18.4); PID 18.4 is alias of the alias pool
			VisitId *struct {
				// Id Value of the identifier for the individual
				Id *string `json:"id,omitempty"`

				// Type Defines the type of identifier associated with the id
				Type *string `json:"type,omitempty"`
			} `json:"visitId,omitempty"`
		} `json:"unsolicitedOrderV1,omitempty"`
	} `json:"datasets,omitempty"`
	OrderInfo struct {
		// ContentTag Tags defining the type of digital content associated with the order
		ContentTag *[]string `json:"contentTag,omitempty"`

		// Deployment The Xealth-defined ID of the Health System
		Deployment string `json:"deployment"`

		// OrderCreationDateTime Indicates when the order was created
		OrderCreationDateTime time.Time `json:"orderCreationDateTime"`

		// OrderDatasetsUpdateDateTime Indicates when the datasets associated with this order were last updated
		OrderDatasetsUpdateDateTime *time.Time `json:"orderDatasetsUpdateDateTime,omitempty"`

		// OrderId Xealth-generated value that uniquely identifies the order
		OrderId string `json:"orderId"`

		// OrderSource Indicates the source system used to generate the order
		OrderSource ReadOrderResponseOrderInfoOrderSource `json:"orderSource"`

		// OrderState Indicates the current state of the order
		OrderState ReadOrderResponseOrderInfoOrderState `json:"orderState"`

		// OrderUpdateDateTime Indicates when the order was last updated
		OrderUpdateDateTime time.Time `json:"orderUpdateDateTime"`

		// PartnerId Xealth-generated value that uniquely identifies the partner associated with the order
		PartnerId string `json:"partnerId"`

		// ProgramId Xealth-generated value that identifies the digital content associated with the order
		ProgramId string `json:"programId"`
	} `json:"orderInfo"`

	// PatientIdentity Object identifying the patient
	PatientIdentity struct {
		// HistoricalIds List of the historical identifiers related to the patient
		HistoricalIds *[]struct {
			// Id Value of the identifier for the patient
			Id string `json:"id"`

			// Origin Defines the originating system from which the id value was sourced
			Origin ReadOrderResponsePatientIdentityHistoricalIdsOrigin `json:"origin"`

			// Type Defines the type of identifier associated with the id
			Type string `json:"type"`
		} `json:"historicalIds,omitempty"`

		// Ids List of the current identifiers related to the patient
		Ids []struct {
			// Id Value of the identifier for the patient
			Id string `json:"id"`

			// Origin Defines the originating system from which the id value was sourced
			Origin ReadOrderResponsePatientIdentityIdsOrigin `json:"origin"`

			// Type Defines the type of identifier associated with the id
			Type string `json:"type"`
		} `json:"ids"`
	} `json:"patientIdentity"`

	// Preorder Information related to the preorder form associated with the order
	Preorder *struct {
		// DataTrackingId Subscriber-supplied identifier used in preorder workflow
		DataTrackingId *string `json:"dataTrackingId,omitempty"`
	} `json:"preorder,omitempty"`
}

// ReadOrderResponseDatasetsDemographicsV1Gender Current assigned sex
type ReadOrderResponseDatasetsDemographicsV1Gender string

// ReadOrderResponseDatasetsDemographicsV1NameUse Patients are set to ‘usual’ and providers set to ‘official’
type ReadOrderResponseDatasetsDemographicsV1NameUse string

// ReadOrderResponseDatasetsDemographicsV1NameListUse The iteration where use is set to "official" is the patient's legal name. The iteration where use is set to "usual"  contains the patient's preferred name if returned by the source EHR. If no iteration with a use set to "usual" is present, no preferred name was returned by the source EHR.
type ReadOrderResponseDatasetsDemographicsV1NameListUse string

// ReadOrderResponseDatasetsDemographicsV1TelecomSystem Contact method
type ReadOrderResponseDatasetsDemographicsV1TelecomSystem string

// ReadOrderResponseDatasetsDemographicsV1TelecomUse Contact purpose
type ReadOrderResponseDatasetsDemographicsV1TelecomUse string

// ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUse Patients are set to ‘usual’ and providers set to ‘official’
type ReadOrderResponseDatasetsEncounterV1AttendingProviderNameUse string

// ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomSystem Contact method
type ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomSystem string

// ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUse Contact purpose
type ReadOrderResponseDatasetsEncounterV1EncounterPointOfCareTelecomUse string

// ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUse Patients are set to ‘usual’ and providers set to ‘official’
type ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenNameUse string

// ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenType Defines relationship between patient and child
type ReadOrderResponseDatasetsMaternityPregnancyEpicV1ChildrenType string

// ReadOrderResponseDatasetsMaternityPregnancyEpicV1Pregnant Indicates whether patient is currently pregnant
type ReadOrderResponseDatasetsMaternityPregnancyEpicV1Pregnant string

// ReadOrderResponseOrderInfoOrderSource Indicates the source system used to generate the order
type ReadOrderResponseOrderInfoOrderSource string

// ReadOrderResponseOrderInfoOrderState Indicates the current state of the order
type ReadOrderResponseOrderInfoOrderState string

// ReadOrderResponsePatientIdentityHistoricalIdsOrigin Defines the originating system from which the id value was sourced
type ReadOrderResponsePatientIdentityHistoricalIdsOrigin string

// ReadOrderResponsePatientIdentityIdsOrigin Defines the originating system from which the id value was sourced
type ReadOrderResponsePatientIdentityIdsOrigin string

// ScoredAssessmentRequest defines model for ScoredAssessmentRequest.
type ScoredAssessmentRequest struct {
	BasedOn []struct {
		Reference string `json:"reference"`
	} `json:"basedOn"`
	Code struct {
		Coding []struct {
			Code    string `json:"code"`
			Display string `json:"display"`
			System  string `json:"system"`
		} `json:"coding"`
		Text string `json:"text"`
	} `json:"code"`
	Component []struct {
		Code struct {
			Coding []struct {
				Code    string `json:"code"`
				Display string `json:"display"`
				System  string `json:"system"`
			} `json:"coding"`
			Text string `json:"text"`
		} `json:"code"`
		ValueCodeableConcept struct {
			Coding []struct {
				Code      string `json:"code"`
				Display   string `json:"display"`
				Extension []struct {
					Url          string `json:"url"`
					ValueDecimal int    `json:"valueDecimal"`
				} `json:"extension"`
				System string `json:"system"`
			} `json:"coding"`
			Text string `json:"text"`
		} `json:"valueCodeableConcept"`
	} `json:"component"`
	EffectiveDateTime string `json:"effectiveDateTime"`
	Meta              struct {
		Profile []string `json:"profile"`
	} `json:"meta"`
	ResourceType  string `json:"resourceType"`
	Status        string `json:"status"`
	ValueQuantity struct {
		Code   string `json:"code"`
		System string `json:"system"`
		Unit   string `json:"unit"`
		Value  int    `json:"value"`
	} `json:"valueQuantity"`
}

// UpdateOrderRequest defines model for UpdateOrderRequest.
type UpdateOrderRequest struct {
	// PartnerOrderUpdate Information related to the order update
	PartnerOrderUpdate struct {
		// ProgramLabel Programs or services in which the patient has been enrolled
		ProgramLabel *[]string `json:"programLabel,omitempty"`

		// ProgramStatus Indicates the current status of the order
		ProgramStatus UpdateOrderRequestPartnerOrderUpdateProgramStatus `json:"programStatus"`
	} `json:"partnerOrderUpdate"`
}

// UpdateOrderRequestPartnerOrderUpdateProgramStatus Indicates the current status of the order
type UpdateOrderRequestPartnerOrderUpdateProgramStatus string

// ValueQuantityRequest defines model for ValueQuantityRequest.
type ValueQuantityRequest struct {
	BasedOn []struct {
		Reference string `json:"reference"`
	} `json:"basedOn"`
	Code struct {
		Coding []struct {
			Code    string  `json:"code"`
			Display *string `json:"display,omitempty"`
			System  *string `json:"system,omitempty"`
		} `json:"coding"`
		Text *string `json:"text,omitempty"`
	} `json:"code"`
	EffectiveDateTime string `json:"effectiveDateTime"`
	Meta              struct {
		Profile []string `json:"profile"`
	} `json:"meta"`
	ResourceType  string `json:"resourceType"`
	Status        string `json:"status"`
	ValueQuantity struct {
		System string  `json:"system"`
		Unit   string  `json:"unit"`
		Value  float32 `json:"value"`
	} `json:"valueQuantity"`
}

// VideoInfo Detail information related to video data associated with the card
type VideoInfo struct {
	// Captions Detail information related to video captions data
	Captions *[]struct {
		// Default Indicates whether or not the track should be used by default
		Default *bool `json:"default,omitempty"`

		// Kind How the text track is meant to be used
		Kind *string `json:"kind,omitempty"`

		// Src Address of the track (.vtt file)
		Src *string `json:"src,omitempty"`

		// Srclang Language of the track text data
		Srclang *string `json:"srclang,omitempty"`
	} `json:"captions,omitempty"`

	// Hlsv3 Detail information related to hlsv3 data associated with the video
	Hlsv3 *struct {
		// ContentType MIME type of the hlsv3 video
		ContentType *string `json:"contentType,omitempty"`

		// Url Link to the hlsv3 video
		Url *string `json:"url,omitempty"`
	} `json:"hlsv3,omitempty"`

	// Mp4 Detail information related to mp4 data associated with the video
	Mp4 *struct {
		// Height Height of the mp4 video
		Height *int `json:"height,omitempty"`

		// Url Link to the mp4 video
		Url *string `json:"url,omitempty"`

		// Width Width of the mp4 video
		Width *int `json:"width,omitempty"`
	} `json:"mp4,omitempty"`

	// Thumbnail Link to a thumbnail image of the video
	Thumbnail *string `json:"thumbnail,omitempty"`

	// Wistia Detail information related to Wistia player data associated with the video
	Wistia *struct {
		// OrderCode Wistia order code associated with the video
		OrderCode *string `json:"orderCode,omitempty"`

		// WistiaId Wistia identifier associated with the video
		WistiaId *string `json:"wistiaId,omitempty"`

		// WistiaTracker Wistia tracking value associated with the video
		WistiaTracker *string `json:"wistiaTracker,omitempty"`
	} `json:"wistia,omitempty"`

	// Youtube Detail information related to YouTube data associated with the video
	Youtube *struct {
		// Url Link to the YouTube video
		Url *string `json:"url,omitempty"`
	} `json:"youtube,omitempty"`
}

// Action defines model for action.
type Action string

// ActionValue defines model for actionValue.
type ActionValue = string

// Authorization defines model for authorization.
type Authorization = string

// Deployment defines model for deployment.
type Deployment = string

// OrderId defines model for orderId.
type OrderId = string

// SubscriberToken defines model for subscriberToken.
type SubscriberToken = string

// XealthJwt defines model for xealthJwt.
type XealthJwt = string

// CreateOrderBadRequestError defines model for CreateOrderBadRequestError.
type CreateOrderBadRequestError struct {
	Error string `json:"error"`
}

// GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdParams defines parameters for GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaId.
type GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdParams struct {
	// Authorization OAuth2 bearer token retrieved from the Xealth Authorization Server
	Authorization string `json:"Authorization"`
}

// GetPartnerReadOrderDeploymentOrderIdParams defines parameters for GetPartnerReadOrderDeploymentOrderId.
type GetPartnerReadOrderDeploymentOrderIdParams struct {
	// Authorization OAuth2 bearer token retrieved from the Xealth Authorization Server
	Authorization string `json:"Authorization"`
}

// PostPartnerWriteOrderDeploymentJSONBody defines parameters for PostPartnerWriteOrderDeployment.
type PostPartnerWriteOrderDeploymentJSONBody struct {
	// OrderType Identifies the type of order being created
	OrderType PostPartnerWriteOrderDeploymentJSONBodyOrderType `json:"orderType"`

	// PartnerId Value that uniquely identifies the partner associated with the enrollment
	PartnerId string `json:"partnerId"`
	PatientId struct {
		// Id Value of the identifier for the patient
		Id string `json:"id"`

		// Origin Defines the originating system from which the id value was sourced
		Origin PostPartnerWriteOrderDeploymentJSONBodyPatientIdOrigin `json:"origin"`

		// Type Defines the type of identifier associated with the id
		Type string `json:"type"`
	} `json:"patientId"`

	// ProgramId Value that identifies the digital content associated with the enrollment
	ProgramId string `json:"programId"`

	// ProgramTitle Value that describes the digital content associated with the order
	ProgramTitle string `json:"programTitle"`
}

// PostPartnerWriteOrderDeploymentParams defines parameters for PostPartnerWriteOrderDeployment.
type PostPartnerWriteOrderDeploymentParams struct {
	// Authorization OAuth2 bearer token retrieved from the Xealth Authorization Server
	Authorization string `json:"Authorization"`
}

// PostPartnerWriteOrderDeploymentJSONBodyOrderType defines parameters for PostPartnerWriteOrderDeployment.
type PostPartnerWriteOrderDeploymentJSONBodyOrderType string

// PostPartnerWriteOrderDeploymentJSONBodyPatientIdOrigin defines parameters for PostPartnerWriteOrderDeployment.
type PostPartnerWriteOrderDeploymentJSONBodyPatientIdOrigin string

// DeletePartnerWriteOrderDeploymentOrderIdParams defines parameters for DeletePartnerWriteOrderDeploymentOrderId.
type DeletePartnerWriteOrderDeploymentOrderIdParams struct {
	// Authorization OAuth2 bearer token retrieved from the Xealth Authorization Server
	Authorization string `json:"Authorization"`
}

// PutPartnerWriteOrderDeploymentOrderIdJSONBody defines parameters for PutPartnerWriteOrderDeploymentOrderId.
type PutPartnerWriteOrderDeploymentOrderIdJSONBody struct {
	// PartnerOrderUpdate Information related to the order update
	PartnerOrderUpdate struct {
		// ProgramLabel Programs or services in which the patient has been enrolled
		ProgramLabel *[]string `json:"programLabel,omitempty"`

		// ProgramStatus Indicates the current status of the order
		ProgramStatus PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatus `json:"programStatus"`
	} `json:"partnerOrderUpdate"`
}

// PutPartnerWriteOrderDeploymentOrderIdParams defines parameters for PutPartnerWriteOrderDeploymentOrderId.
type PutPartnerWriteOrderDeploymentOrderIdParams struct {
	// Authorization OAuth2 bearer token retrieved from the Xealth Authorization Server
	Authorization string `json:"Authorization"`
}

// PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatus defines parameters for PutPartnerWriteOrderDeploymentOrderId.
type PutPartnerWriteOrderDeploymentOrderIdJSONBodyPartnerOrderUpdateProgramStatus string

// PostPartnerWriteOrderDeploymentJSONRequestBody defines body for PostPartnerWriteOrderDeployment for application/json ContentType.
type PostPartnerWriteOrderDeploymentJSONRequestBody PostPartnerWriteOrderDeploymentJSONBody

// PutPartnerWriteOrderDeploymentOrderIdJSONRequestBody defines body for PutPartnerWriteOrderDeploymentOrderId for application/json ContentType.
type PutPartnerWriteOrderDeploymentOrderIdJSONRequestBody PutPartnerWriteOrderDeploymentOrderIdJSONBody

// AsGetProgramsResponse0 returns the union data inside the GetProgramsResponse as a GetProgramsResponse0
func (t GetProgramsResponse) AsGetProgramsResponse0() (GetProgramsResponse0, error) {
	var body GetProgramsResponse0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetProgramsResponse0 overwrites any union data inside the GetProgramsResponse as the provided GetProgramsResponse0
func (t *GetProgramsResponse) FromGetProgramsResponse0(v GetProgramsResponse0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetProgramsResponse0 performs a merge with any union data inside the GetProgramsResponse, using the provided GetProgramsResponse0
func (t *GetProgramsResponse) MergeGetProgramsResponse0(v GetProgramsResponse0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsGetProgramsResponse1 returns the union data inside the GetProgramsResponse as a GetProgramsResponse1
func (t GetProgramsResponse) AsGetProgramsResponse1() (GetProgramsResponse1, error) {
	var body GetProgramsResponse1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromGetProgramsResponse1 overwrites any union data inside the GetProgramsResponse as the provided GetProgramsResponse1
func (t *GetProgramsResponse) FromGetProgramsResponse1(v GetProgramsResponse1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeGetProgramsResponse1 performs a merge with any union data inside the GetProgramsResponse, using the provided GetProgramsResponse1
func (t *GetProgramsResponse) MergeGetProgramsResponse1(v GetProgramsResponse1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t GetProgramsResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *GetProgramsResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPreorderFormRequest0 returns the union data inside the PreorderFormRequest as a PreorderFormRequest0
func (t PreorderFormRequest) AsPreorderFormRequest0() (PreorderFormRequest0, error) {
	var body PreorderFormRequest0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreorderFormRequest0 overwrites any union data inside the PreorderFormRequest as the provided PreorderFormRequest0
func (t *PreorderFormRequest) FromPreorderFormRequest0(v PreorderFormRequest0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreorderFormRequest0 performs a merge with any union data inside the PreorderFormRequest, using the provided PreorderFormRequest0
func (t *PreorderFormRequest) MergePreorderFormRequest0(v PreorderFormRequest0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPreorderFormRequest1 returns the union data inside the PreorderFormRequest as a PreorderFormRequest1
func (t PreorderFormRequest) AsPreorderFormRequest1() (PreorderFormRequest1, error) {
	var body PreorderFormRequest1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreorderFormRequest1 overwrites any union data inside the PreorderFormRequest as the provided PreorderFormRequest1
func (t *PreorderFormRequest) FromPreorderFormRequest1(v PreorderFormRequest1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreorderFormRequest1 performs a merge with any union data inside the PreorderFormRequest, using the provided PreorderFormRequest1
func (t *PreorderFormRequest) MergePreorderFormRequest1(v PreorderFormRequest1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PreorderFormRequest) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PreorderFormRequest) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsPreorderFormResponse0 returns the union data inside the PreorderFormResponse as a PreorderFormResponse0
func (t PreorderFormResponse) AsPreorderFormResponse0() (PreorderFormResponse0, error) {
	var body PreorderFormResponse0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreorderFormResponse0 overwrites any union data inside the PreorderFormResponse as the provided PreorderFormResponse0
func (t *PreorderFormResponse) FromPreorderFormResponse0(v PreorderFormResponse0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreorderFormResponse0 performs a merge with any union data inside the PreorderFormResponse, using the provided PreorderFormResponse0
func (t *PreorderFormResponse) MergePreorderFormResponse0(v PreorderFormResponse0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsPreorderFormResponse1 returns the union data inside the PreorderFormResponse as a PreorderFormResponse1
func (t PreorderFormResponse) AsPreorderFormResponse1() (PreorderFormResponse1, error) {
	var body PreorderFormResponse1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromPreorderFormResponse1 overwrites any union data inside the PreorderFormResponse as the provided PreorderFormResponse1
func (t *PreorderFormResponse) FromPreorderFormResponse1(v PreorderFormResponse1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergePreorderFormResponse1 performs a merge with any union data inside the PreorderFormResponse, using the provided PreorderFormResponse1
func (t *PreorderFormResponse) MergePreorderFormResponse1(v PreorderFormResponse1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t PreorderFormResponse) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *PreorderFormResponse) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}

// AsProviderMessageRequestMessage0 returns the union data inside the ProviderMessageRequest_Message as a ProviderMessageRequestMessage0
func (t ProviderMessageRequest_Message) AsProviderMessageRequestMessage0() (ProviderMessageRequestMessage0, error) {
	var body ProviderMessageRequestMessage0
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProviderMessageRequestMessage0 overwrites any union data inside the ProviderMessageRequest_Message as the provided ProviderMessageRequestMessage0
func (t *ProviderMessageRequest_Message) FromProviderMessageRequestMessage0(v ProviderMessageRequestMessage0) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProviderMessageRequestMessage0 performs a merge with any union data inside the ProviderMessageRequest_Message, using the provided ProviderMessageRequestMessage0
func (t *ProviderMessageRequest_Message) MergeProviderMessageRequestMessage0(v ProviderMessageRequestMessage0) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsProviderMessageRequestMessage1 returns the union data inside the ProviderMessageRequest_Message as a ProviderMessageRequestMessage1
func (t ProviderMessageRequest_Message) AsProviderMessageRequestMessage1() (ProviderMessageRequestMessage1, error) {
	var body ProviderMessageRequestMessage1
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromProviderMessageRequestMessage1 overwrites any union data inside the ProviderMessageRequest_Message as the provided ProviderMessageRequestMessage1
func (t *ProviderMessageRequest_Message) FromProviderMessageRequestMessage1(v ProviderMessageRequestMessage1) error {
	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeProviderMessageRequestMessage1 performs a merge with any union data inside the ProviderMessageRequest_Message, using the provided ProviderMessageRequestMessage1
func (t *ProviderMessageRequest_Message) MergeProviderMessageRequestMessage1(v ProviderMessageRequestMessage1) error {
	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t ProviderMessageRequest_Message) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	return b, err
}

func (t *ProviderMessageRequest_Message) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	return err
}
