// Package xealth_client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package xealth_client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"

	"github.com/oapi-codegen/runtime"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaId request
	GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaId(ctx context.Context, deployment string, batchFileSchemaId string, params *GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPartnerReadOrderDeploymentOrderId request
	GetPartnerReadOrderDeploymentOrderId(ctx context.Context, deployment string, orderId string, params *GetPartnerReadOrderDeploymentOrderIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPartnerWriteOrderDeploymentWithBody request with any body
	PostPartnerWriteOrderDeploymentWithBody(ctx context.Context, deployment string, params *PostPartnerWriteOrderDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPartnerWriteOrderDeployment(ctx context.Context, deployment string, params *PostPartnerWriteOrderDeploymentParams, body PostPartnerWriteOrderDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeletePartnerWriteOrderDeploymentOrderId request
	DeletePartnerWriteOrderDeploymentOrderId(ctx context.Context, deployment string, orderId string, params *DeletePartnerWriteOrderDeploymentOrderIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutPartnerWriteOrderDeploymentOrderIdWithBody request with any body
	PutPartnerWriteOrderDeploymentOrderIdWithBody(ctx context.Context, deployment string, orderId string, params *PutPartnerWriteOrderDeploymentOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutPartnerWriteOrderDeploymentOrderId(ctx context.Context, deployment string, orderId string, params *PutPartnerWriteOrderDeploymentOrderIdParams, body PutPartnerWriteOrderDeploymentOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaId(ctx context.Context, deployment string, batchFileSchemaId string, params *GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdRequest(c.Server, deployment, batchFileSchemaId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPartnerReadOrderDeploymentOrderId(ctx context.Context, deployment string, orderId string, params *GetPartnerReadOrderDeploymentOrderIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPartnerReadOrderDeploymentOrderIdRequest(c.Server, deployment, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPartnerWriteOrderDeploymentWithBody(ctx context.Context, deployment string, params *PostPartnerWriteOrderDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPartnerWriteOrderDeploymentRequestWithBody(c.Server, deployment, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPartnerWriteOrderDeployment(ctx context.Context, deployment string, params *PostPartnerWriteOrderDeploymentParams, body PostPartnerWriteOrderDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPartnerWriteOrderDeploymentRequest(c.Server, deployment, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeletePartnerWriteOrderDeploymentOrderId(ctx context.Context, deployment string, orderId string, params *DeletePartnerWriteOrderDeploymentOrderIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeletePartnerWriteOrderDeploymentOrderIdRequest(c.Server, deployment, orderId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnerWriteOrderDeploymentOrderIdWithBody(ctx context.Context, deployment string, orderId string, params *PutPartnerWriteOrderDeploymentOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnerWriteOrderDeploymentOrderIdRequestWithBody(c.Server, deployment, orderId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutPartnerWriteOrderDeploymentOrderId(ctx context.Context, deployment string, orderId string, params *PutPartnerWriteOrderDeploymentOrderIdParams, body PutPartnerWriteOrderDeploymentOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutPartnerWriteOrderDeploymentOrderIdRequest(c.Server, deployment, orderId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdRequest generates requests for GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaId
func NewGetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdRequest(server string, deployment string, batchFileSchemaId string, params *GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deployment", runtime.ParamLocationPath, deployment)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "batchFileSchemaId", runtime.ParamLocationPath, batchFileSchemaId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partner/read/batch_file_schema/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewGetPartnerReadOrderDeploymentOrderIdRequest generates requests for GetPartnerReadOrderDeploymentOrderId
func NewGetPartnerReadOrderDeploymentOrderIdRequest(server string, deployment string, orderId string, params *GetPartnerReadOrderDeploymentOrderIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deployment", runtime.ParamLocationPath, deployment)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partner/read/order/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPostPartnerWriteOrderDeploymentRequest calls the generic PostPartnerWriteOrderDeployment builder with application/json body
func NewPostPartnerWriteOrderDeploymentRequest(server string, deployment string, params *PostPartnerWriteOrderDeploymentParams, body PostPartnerWriteOrderDeploymentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPartnerWriteOrderDeploymentRequestWithBody(server, deployment, params, "application/json", bodyReader)
}

// NewPostPartnerWriteOrderDeploymentRequestWithBody generates requests for PostPartnerWriteOrderDeployment with any type of body
func NewPostPartnerWriteOrderDeploymentRequestWithBody(server string, deployment string, params *PostPartnerWriteOrderDeploymentParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deployment", runtime.ParamLocationPath, deployment)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partner/write/order/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewDeletePartnerWriteOrderDeploymentOrderIdRequest generates requests for DeletePartnerWriteOrderDeploymentOrderId
func NewDeletePartnerWriteOrderDeploymentOrderIdRequest(server string, deployment string, orderId string, params *DeletePartnerWriteOrderDeploymentOrderIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deployment", runtime.ParamLocationPath, deployment)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partner/write/order/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPutPartnerWriteOrderDeploymentOrderIdRequest calls the generic PutPartnerWriteOrderDeploymentOrderId builder with application/json body
func NewPutPartnerWriteOrderDeploymentOrderIdRequest(server string, deployment string, orderId string, params *PutPartnerWriteOrderDeploymentOrderIdParams, body PutPartnerWriteOrderDeploymentOrderIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutPartnerWriteOrderDeploymentOrderIdRequestWithBody(server, deployment, orderId, params, "application/json", bodyReader)
}

// NewPutPartnerWriteOrderDeploymentOrderIdRequestWithBody generates requests for PutPartnerWriteOrderDeploymentOrderId with any type of body
func NewPutPartnerWriteOrderDeploymentOrderIdRequestWithBody(server string, deployment string, orderId string, params *PutPartnerWriteOrderDeploymentOrderIdParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "deployment", runtime.ParamLocationPath, deployment)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "orderId", runtime.ParamLocationPath, orderId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/partner/write/order/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdWithResponse request
	GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdWithResponse(ctx context.Context, deployment string, batchFileSchemaId string, params *GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdParams, reqEditors ...RequestEditorFn) (*GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdResponse, error)

	// GetPartnerReadOrderDeploymentOrderIdWithResponse request
	GetPartnerReadOrderDeploymentOrderIdWithResponse(ctx context.Context, deployment string, orderId string, params *GetPartnerReadOrderDeploymentOrderIdParams, reqEditors ...RequestEditorFn) (*GetPartnerReadOrderDeploymentOrderIdResponse, error)

	// PostPartnerWriteOrderDeploymentWithBodyWithResponse request with any body
	PostPartnerWriteOrderDeploymentWithBodyWithResponse(ctx context.Context, deployment string, params *PostPartnerWriteOrderDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPartnerWriteOrderDeploymentResponse, error)

	PostPartnerWriteOrderDeploymentWithResponse(ctx context.Context, deployment string, params *PostPartnerWriteOrderDeploymentParams, body PostPartnerWriteOrderDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPartnerWriteOrderDeploymentResponse, error)

	// DeletePartnerWriteOrderDeploymentOrderIdWithResponse request
	DeletePartnerWriteOrderDeploymentOrderIdWithResponse(ctx context.Context, deployment string, orderId string, params *DeletePartnerWriteOrderDeploymentOrderIdParams, reqEditors ...RequestEditorFn) (*DeletePartnerWriteOrderDeploymentOrderIdResponse, error)

	// PutPartnerWriteOrderDeploymentOrderIdWithBodyWithResponse request with any body
	PutPartnerWriteOrderDeploymentOrderIdWithBodyWithResponse(ctx context.Context, deployment string, orderId string, params *PutPartnerWriteOrderDeploymentOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPartnerWriteOrderDeploymentOrderIdResponse, error)

	PutPartnerWriteOrderDeploymentOrderIdWithResponse(ctx context.Context, deployment string, orderId string, params *PutPartnerWriteOrderDeploymentOrderIdParams, body PutPartnerWriteOrderDeploymentOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnerWriteOrderDeploymentOrderIdResponse, error)
}

type GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// BatchFileSchema JSON schema of the batch file
		BatchFileSchema map[string]interface{} `json:"batchFileSchema"`
	}
	JSON400 *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPartnerReadOrderDeploymentOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ReadOrderResponse
	JSON400      *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r GetPartnerReadOrderDeploymentOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPartnerReadOrderDeploymentOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPartnerWriteOrderDeploymentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		// Deployment The Xealth-defined ID of the Health System
		Deployment string `json:"deployment"`

		// OrderId Xealth-generated value that uniquely identifies the order
		OrderId string `json:"orderId"`

		// PartnerId Xealth-generated value that uniquely identifies the partner
		PartnerId string `json:"partnerId"`

		// PatientIdentity Object identifying the patient
		PatientIdentity struct {
			// HistoricalIds List of the historical identifiers related to the patient
			HistoricalIds *[]struct {
				// Id Value of the identifier for the patient
				Id string `json:"id"`

				// Origin Defines the originating system from which the id value was sourced
				Origin PostPartnerWriteOrderDeployment200PatientIdentityHistoricalIdsOrigin `json:"origin"`

				// Type Defines the type of identifier associated with the id
				Type string `json:"type"`
			} `json:"historicalIds,omitempty"`

			// Ids List of the current identifiers related to the patient
			Ids []struct {
				// Id Value of the identifier for the patient
				Id string `json:"id"`

				// Origin Defines the originating system from which the id value was sourced
				Origin PostPartnerWriteOrderDeployment200PatientIdentityIdsOrigin `json:"origin"`

				// Type Defines the type of identifier associated with the id
				Type string `json:"type"`
			} `json:"ids"`
		} `json:"patientIdentity"`
	}
	JSON400 *struct {
		Error string `json:"error"`
	}
	JSON404 *struct {
		Error string `json:"error"`
	}
}
type PostPartnerWriteOrderDeployment200PatientIdentityHistoricalIdsOrigin string
type PostPartnerWriteOrderDeployment200PatientIdentityIdsOrigin string

// Status returns HTTPResponse.Status
func (r PostPartnerWriteOrderDeploymentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPartnerWriteOrderDeploymentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeletePartnerWriteOrderDeploymentOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r DeletePartnerWriteOrderDeploymentOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeletePartnerWriteOrderDeploymentOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutPartnerWriteOrderDeploymentOrderIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON400      *struct {
		Error string `json:"error"`
	}
}

// Status returns HTTPResponse.Status
func (r PutPartnerWriteOrderDeploymentOrderIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutPartnerWriteOrderDeploymentOrderIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdWithResponse request returning *GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdResponse
func (c *ClientWithResponses) GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdWithResponse(ctx context.Context, deployment string, batchFileSchemaId string, params *GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdParams, reqEditors ...RequestEditorFn) (*GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdResponse, error) {
	rsp, err := c.GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaId(ctx, deployment, batchFileSchemaId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdResponse(rsp)
}

// GetPartnerReadOrderDeploymentOrderIdWithResponse request returning *GetPartnerReadOrderDeploymentOrderIdResponse
func (c *ClientWithResponses) GetPartnerReadOrderDeploymentOrderIdWithResponse(ctx context.Context, deployment string, orderId string, params *GetPartnerReadOrderDeploymentOrderIdParams, reqEditors ...RequestEditorFn) (*GetPartnerReadOrderDeploymentOrderIdResponse, error) {
	rsp, err := c.GetPartnerReadOrderDeploymentOrderId(ctx, deployment, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPartnerReadOrderDeploymentOrderIdResponse(rsp)
}

// PostPartnerWriteOrderDeploymentWithBodyWithResponse request with arbitrary body returning *PostPartnerWriteOrderDeploymentResponse
func (c *ClientWithResponses) PostPartnerWriteOrderDeploymentWithBodyWithResponse(ctx context.Context, deployment string, params *PostPartnerWriteOrderDeploymentParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPartnerWriteOrderDeploymentResponse, error) {
	rsp, err := c.PostPartnerWriteOrderDeploymentWithBody(ctx, deployment, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPartnerWriteOrderDeploymentResponse(rsp)
}

func (c *ClientWithResponses) PostPartnerWriteOrderDeploymentWithResponse(ctx context.Context, deployment string, params *PostPartnerWriteOrderDeploymentParams, body PostPartnerWriteOrderDeploymentJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPartnerWriteOrderDeploymentResponse, error) {
	rsp, err := c.PostPartnerWriteOrderDeployment(ctx, deployment, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPartnerWriteOrderDeploymentResponse(rsp)
}

// DeletePartnerWriteOrderDeploymentOrderIdWithResponse request returning *DeletePartnerWriteOrderDeploymentOrderIdResponse
func (c *ClientWithResponses) DeletePartnerWriteOrderDeploymentOrderIdWithResponse(ctx context.Context, deployment string, orderId string, params *DeletePartnerWriteOrderDeploymentOrderIdParams, reqEditors ...RequestEditorFn) (*DeletePartnerWriteOrderDeploymentOrderIdResponse, error) {
	rsp, err := c.DeletePartnerWriteOrderDeploymentOrderId(ctx, deployment, orderId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeletePartnerWriteOrderDeploymentOrderIdResponse(rsp)
}

// PutPartnerWriteOrderDeploymentOrderIdWithBodyWithResponse request with arbitrary body returning *PutPartnerWriteOrderDeploymentOrderIdResponse
func (c *ClientWithResponses) PutPartnerWriteOrderDeploymentOrderIdWithBodyWithResponse(ctx context.Context, deployment string, orderId string, params *PutPartnerWriteOrderDeploymentOrderIdParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutPartnerWriteOrderDeploymentOrderIdResponse, error) {
	rsp, err := c.PutPartnerWriteOrderDeploymentOrderIdWithBody(ctx, deployment, orderId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnerWriteOrderDeploymentOrderIdResponse(rsp)
}

func (c *ClientWithResponses) PutPartnerWriteOrderDeploymentOrderIdWithResponse(ctx context.Context, deployment string, orderId string, params *PutPartnerWriteOrderDeploymentOrderIdParams, body PutPartnerWriteOrderDeploymentOrderIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutPartnerWriteOrderDeploymentOrderIdResponse, error) {
	rsp, err := c.PutPartnerWriteOrderDeploymentOrderId(ctx, deployment, orderId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutPartnerWriteOrderDeploymentOrderIdResponse(rsp)
}

// ParseGetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdResponse parses an HTTP response from a GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdWithResponse call
func ParseGetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdResponse(rsp *http.Response) (*GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnerReadBatchFileSchemaDeploymentBatchFileSchemaIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// BatchFileSchema JSON schema of the batch file
			BatchFileSchema map[string]interface{} `json:"batchFileSchema"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParseGetPartnerReadOrderDeploymentOrderIdResponse parses an HTTP response from a GetPartnerReadOrderDeploymentOrderIdWithResponse call
func ParseGetPartnerReadOrderDeploymentOrderIdResponse(rsp *http.Response) (*GetPartnerReadOrderDeploymentOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPartnerReadOrderDeploymentOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ReadOrderResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePostPartnerWriteOrderDeploymentResponse parses an HTTP response from a PostPartnerWriteOrderDeploymentWithResponse call
func ParsePostPartnerWriteOrderDeploymentResponse(rsp *http.Response) (*PostPartnerWriteOrderDeploymentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPartnerWriteOrderDeploymentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			// Deployment The Xealth-defined ID of the Health System
			Deployment string `json:"deployment"`

			// OrderId Xealth-generated value that uniquely identifies the order
			OrderId string `json:"orderId"`

			// PartnerId Xealth-generated value that uniquely identifies the partner
			PartnerId string `json:"partnerId"`

			// PatientIdentity Object identifying the patient
			PatientIdentity struct {
				// HistoricalIds List of the historical identifiers related to the patient
				HistoricalIds *[]struct {
					// Id Value of the identifier for the patient
					Id string `json:"id"`

					// Origin Defines the originating system from which the id value was sourced
					Origin PostPartnerWriteOrderDeployment200PatientIdentityHistoricalIdsOrigin `json:"origin"`

					// Type Defines the type of identifier associated with the id
					Type string `json:"type"`
				} `json:"historicalIds,omitempty"`

				// Ids List of the current identifiers related to the patient
				Ids []struct {
					// Id Value of the identifier for the patient
					Id string `json:"id"`

					// Origin Defines the originating system from which the id value was sourced
					Origin PostPartnerWriteOrderDeployment200PatientIdentityIdsOrigin `json:"origin"`

					// Type Defines the type of identifier associated with the id
					Type string `json:"type"`
				} `json:"ids"`
			} `json:"patientIdentity"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	}

	return response, nil
}

// ParseDeletePartnerWriteOrderDeploymentOrderIdResponse parses an HTTP response from a DeletePartnerWriteOrderDeploymentOrderIdWithResponse call
func ParseDeletePartnerWriteOrderDeploymentOrderIdResponse(rsp *http.Response) (*DeletePartnerWriteOrderDeploymentOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeletePartnerWriteOrderDeploymentOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}

// ParsePutPartnerWriteOrderDeploymentOrderIdResponse parses an HTTP response from a PutPartnerWriteOrderDeploymentOrderIdWithResponse call
func ParsePutPartnerWriteOrderDeploymentOrderIdResponse(rsp *http.Response) (*PutPartnerWriteOrderDeploymentOrderIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutPartnerWriteOrderDeploymentOrderIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error string `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	}

	return response, nil
}
