// Code generated by MockGen. DO NOT EDIT.
// Source: ./clinicians.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	clinicians "github.com/tidepool-org/clinic/clinicians"
	store "github.com/tidepool-org/clinic/store"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AssociateInvite mocks base method.
func (m *MockService) AssociateInvite(ctx context.Context, associate clinicians.AssociateInvite) (*clinicians.Clinician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssociateInvite", ctx, associate)
	ret0, _ := ret[0].(*clinicians.Clinician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AssociateInvite indicates an expected call of AssociateInvite.
func (mr *MockServiceMockRecorder) AssociateInvite(ctx, associate interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssociateInvite", reflect.TypeOf((*MockService)(nil).AssociateInvite), ctx, associate)
}

// Create mocks base method.
func (m *MockService) Create(ctx context.Context, clinician *clinicians.Clinician) (*clinicians.Clinician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, clinician)
	ret0, _ := ret[0].(*clinicians.Clinician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockServiceMockRecorder) Create(ctx, clinician interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockService)(nil).Create), ctx, clinician)
}

// Delete mocks base method.
func (m *MockService) Delete(ctx context.Context, clinicId, clinicianId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, clinicId, clinicianId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockServiceMockRecorder) Delete(ctx, clinicId, clinicianId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockService)(nil).Delete), ctx, clinicId, clinicianId)
}

// DeleteAll mocks base method.
func (m *MockService) DeleteAll(ctx context.Context, clinicId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", ctx, clinicId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockServiceMockRecorder) DeleteAll(ctx, clinicId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockService)(nil).DeleteAll), ctx, clinicId)
}

// DeleteFromAllClinics mocks base method.
func (m *MockService) DeleteFromAllClinics(ctx context.Context, clinicianId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromAllClinics", ctx, clinicianId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteFromAllClinics indicates an expected call of DeleteFromAllClinics.
func (mr *MockServiceMockRecorder) DeleteFromAllClinics(ctx, clinicianId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromAllClinics", reflect.TypeOf((*MockService)(nil).DeleteFromAllClinics), ctx, clinicianId)
}

// DeleteInvite mocks base method.
func (m *MockService) DeleteInvite(ctx context.Context, clinicId, inviteId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteInvite", ctx, clinicId, inviteId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteInvite indicates an expected call of DeleteInvite.
func (mr *MockServiceMockRecorder) DeleteInvite(ctx, clinicId, inviteId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteInvite", reflect.TypeOf((*MockService)(nil).DeleteInvite), ctx, clinicId, inviteId)
}

// Get mocks base method.
func (m *MockService) Get(ctx context.Context, clinicId, clinicianId string) (*clinicians.Clinician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, clinicId, clinicianId)
	ret0, _ := ret[0].(*clinicians.Clinician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockServiceMockRecorder) Get(ctx, clinicId, clinicianId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockService)(nil).Get), ctx, clinicId, clinicianId)
}

// GetInvite mocks base method.
func (m *MockService) GetInvite(ctx context.Context, clinicId, inviteId string) (*clinicians.Clinician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInvite", ctx, clinicId, inviteId)
	ret0, _ := ret[0].(*clinicians.Clinician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetInvite indicates an expected call of GetInvite.
func (mr *MockServiceMockRecorder) GetInvite(ctx, clinicId, inviteId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInvite", reflect.TypeOf((*MockService)(nil).GetInvite), ctx, clinicId, inviteId)
}

// List mocks base method.
func (m *MockService) List(ctx context.Context, filter *clinicians.Filter, pagination store.Pagination) ([]*clinicians.Clinician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter, pagination)
	ret0, _ := ret[0].([]*clinicians.Clinician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockServiceMockRecorder) List(ctx, filter, pagination interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockService)(nil).List), ctx, filter, pagination)
}

// Update mocks base method.
func (m *MockService) Update(ctx context.Context, update *clinicians.ClinicianUpdate) (*clinicians.Clinician, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, update)
	ret0, _ := ret[0].(*clinicians.Clinician)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockServiceMockRecorder) Update(ctx, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockService)(nil).Update), ctx, update)
}

// UpdateAll mocks base method.
func (m *MockService) UpdateAll(ctx context.Context, update *clinicians.CliniciansUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAll", ctx, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateAll indicates an expected call of UpdateAll.
func (mr *MockServiceMockRecorder) UpdateAll(ctx, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAll", reflect.TypeOf((*MockService)(nil).UpdateAll), ctx, update)
}
