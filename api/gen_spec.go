// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

