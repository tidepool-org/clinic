// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
