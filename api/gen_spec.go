// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

