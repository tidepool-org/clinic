// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

