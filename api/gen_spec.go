// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

