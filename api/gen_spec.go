// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+y9+3LbOLMg/ioonqk6yW8kWb7l4qpffevYTuL9YscrO3P2fInXgUhIwoQkGAC0rcmo",
	"al9jX2+fZAs3EiRBipSlxJkzfySWhFuju9FoNBrd3zyfRAmJUcyZd/DNSyCFEeKIym9+iGPsnwbiM469",
	"Ay+BfOb1vBhGyDvIi3seRV9TTFHgHXCaop7H/BmKoOqRc0RF4//1EfYnw/7L6287e4tfvJ7H54nohnGK",
	"46m3WPR0jxjGS8ZUNVoO++TjsP8S9ifX37aHiz+zLy8W/ezzXovP2zuLpzVQUwQ5Cq5whE5iCXiAmE9x",
	"wjEREIwQT2kMKPIJDRjQ1cEYTQhFgM8QmOJbFIMAcgSeoHs/TBm+RU+9nsLA1xTRuYWC4nD2rCeERpB7",
	"B57oqs9xhJYBfMkh5a1BhhOOaAViHLeHWI23AswogjjMmKI0gCp09mqKqj3i+BZzVMtpWXETm0U4fofi",
	"KZ95B9uuMUIcYV4HtSq0uwvQBKYh9w62hz3RN47SyO4ZxxxNEZVdk8mEodq+dWkJVtXf0NlfAjlGMa/F",
	"R17+WNadhugKTpcBraqsTUxREqI6xMsyu+dqc4Yg9WfVRfc6DUPA0T0HqgYwXbvG0Z0sGWkGKToiQS20",
	"eYUlHRGXlLgklANCA0QBjAMAOad4nEohNpgOwK9iEEAo6IsPdcJBdu0mxZN/HPT//PTp16dP/nHwEfb/",
	"OOz/6/rPm6e/OomSMkRr+UAXNnHALxRNvAPv37byHXFLlbKtKxyghJDwg+pmIVGiykTTQ8aIjyFHR2Z3",
	"uiKiqpwNJQmiHCNZMwfSwVUZaB9NveuexzEXzJaPAbJBcjSQ8e/I596i5x3eIgqn6E2Y+oShKslehYQE",
	"YKqKwS0MU9QDOAafo4iEW+8+e70yxDFWqgGKhez46KmKXk99CAWM6B5GiYQyKzRgq/E+xJiDJ6rwaYV6",
	"Pe++z+GUid6PIYfe9aLnSdCq8B+CSUggx/EUJATHXE0BUJRQxFAsC2A2G1U68CwQ9wf7vXx3kJ15vaJs",
	"LID+m+y/CnucRmNEXbCXSSkRaCZ0Xe5fU8oxgiaqEzuKB6ro0b+XiQiDgCLGHCuYU4Q40OUDhQl7R9Ow",
	"6nqHup/K+ut5PozP8JRCLolGEQzex+HcLDNdfUxIiGAs62M+d8CP+RyINVugmXcBQwIOQ05qARQNnWBJ",
	"hFziP5DNw8P+zt5Lr+ft7A/7ey/Fp/3hsP9SftoeDoe/Sjq5+7qSP+d9JZTc4gDRm4RCn2NfiNIZgiGf",
	"+ZCiGzZnHEWC/kKtxjGk8xvfUInwmeQhwbtCnCMqBm5UKnqeT9KYUxfyVIEDfx8uD+sxp7tzjZTrbbWa",
	"Wg2l805wsEy6Cona80LI+DEKEUfBRbZrL2tq1VwYYV9Gy7nchSZSbVWY13x+ylHEiriQxUC0cOEj1ybk",
	"UsKqfRcIdZeQUjiXPc5IjM6lKHGszsMYyJoCelkTKKkjF2q70fP+xXDOScs6oABJCdCeEGJfU6TbCkIL",
	"2AnjMDTaRRHyC1kGfBKgATiNJe4/DC4HPcDnCfZhGM7lb3/gRFYCLPVnADLw+eXe7nD7s9Aa1Mf+9vPh",
	"3uciO8uCWobWY2utpkpEiiaIUhS8mn6o7G3TrSDb2t45hUBBpSpO+k1IxnJmCltAVlXTmxAKoOE+cDUr",
	"FGIGdsGUkjRhgtJ7IE0SRH3IEIBhMoNxGiGKfeDPoBAxiDKxYyPoz1SrATiMxniakpTZdTKUnn6W6tnn",
	"7c89idf3+vvwMxAwyANngAKBY1sNPnx1dHzy+s3b//7Pd2fnF/9jdHn14bf/+J//+a+d3b39Z89fvFRq",
	"+vpq/eKSJsWFeSmRVkdZxvXuU97jhNZEKJCSOvbrOZKRCPGZUCFC/AWBz0eHihGPYIgnhMYYlhjx6LBh",
	"xxTAuKBME6GrMBScE44n2IcCzqUr+bKmmRAqWKmaOVzil+H2cFiBbqm0Fi2PbfTZ3b6mCHXvMk2Ch+8i",
	"d2jMMC92kFLsPp5Z2hcOzCGgVzjsWOpKcZ8rwltFiEa3Q45cl9nVpZ/nynuFT4VU+IyDzyCCczBGAEUJ",
	"nwNsb1wYxkDZJcAMMhATDsYIxQD6Pkq4XsIFzW8tW3hme1liVRGq6pT0V1ABygesonWmiiccmB1dowNP",
	"AOYCKfG/l3DiWoNuRUF0HFeUBXXQWqKTiVP/0iWc0X4ka69naZT43RBGAdTE2hV2rTlRZoXqwwiFSvLM",
	"cFI93/rZuWQ5Ijzb4Nsad5UZ21TSw7um5oC+22Tbq3xNYy5agVbRwGzQRobXMmCM+nL07vT89Ojm8Pjs",
	"9Nzrma9nJ2evTkZez7sYnVwejU7FF5dm06ARC7lzgWiEGZObTiv9MGu6AuZcurIq7NqZsye5KLRmXmVi",
	"oQMJXQKT+DIdR5gLKZKbbKxDLGZ6E6kpD9EU+vOj4q1GNzmYWGhvd9SwCbWw+U3OGphpO7j/GHJ4SVLq",
	"oypSgqzMJZMvJRflZhiJPCFHIaCIyWZAbsURvDdydGevIFbF1wYrbJ1mKGAGCjDwXs4EnDplPrpPMJVw",
	"GXHbhMtjyJGsJxYGCfAE52K6bTtjGTjXu02uSAXo3idRER3bw2HtiUZ3VHswzTTfzCiB4kDtyPrTCPkk",
	"jpU9SX+SW2OAmf0VUUpo0aRnFxeQrsmqywW9mVvnLQlsU6uAHktkawYFQT5IM7O2FwkWgzvEQka7Cnt/",
	"HL0+Aru7uy+vn8w4T9jB1tbd3d0AIz4ZEDrdohNf/BM1BvyePwVb4OPp5Xvw4tlwu9SEEdkCM9IXpX25",
	"1cM4kNt9X2kAgxmPwqdA/MI4jBJwc4f57Eb+8Ic4rONYVVQKaU6rneH28/5wpz98djXcOdh9frD37F9e",
	"r+aKLacl2rpyXbvVqXMnb0fHiHEcSwBOA1aVFpOQ3LEZQo5LA6spOD0G5BZRivUR+bVpxparXDHhiHXr",
	"/lw2Wa7MIZaGvGPfI92ot/RO0F4LOZ7yYc3UrCVxrO4FwQgF5B4ERTDEWT5BtB+RAIUZUMxpSGacJCGe",
	"ztS9YeAdeH8883+nf+wM0X50m0r4Tt6OXkMfh9pAWySsW3N+TwMkNwDTUEoqsFQUxKWln43bDvZhOP86",
	"ecEnAY/ToYH9DHJ/duib02tpa5e/l024J+eHr96d3Fx+ODsc/efN4fnxzejk4v3o6vLm8sMroTJdXJ2+",
	"FxrV8ellq5rXyyZuwWFNvwR9OySQdP77s/AupPyPmV9AwhliDE7RSMhD13Z+JhjGxoMko1M3DIifRtnt",
	"cHVvvUUxL2P1HN0tR0QOh91LYUAHgqyZtUMS3N7Z3uf7tzjZ5bSApBH6miLm0AKjAvaadhUHVLbedfJ2",
	"BGQ5MGO5YNZCXAy9cM8h/jqMwmg/+BpM7oalObCExAzV8XvbCWi+y85l7TVsbRlvq6LKwy9DnON4ylpA",
	"d2mqug9/ntWZg1sy9LTjlQR9+fL78CUNYTzP8HxBiY+CVNmPHBtegBkch+gyjSJI5yOUEKqwUV0rsbti",
	"yYBuxpPWTrnD6CbgUmjXjGOfSdF/cfwa6G4AS8e2parLTuQEq1czryKSQRFYBs5g0hLX0/nzgGzzWRjt",
	"TvcNri8txihhuaJ2LGGckp6Sod9xhDmRBYBQoOcsbUBietJLhsKiTLZOeRNrt1wCT7bBqeNBiaWWNC7x",
	"oHTLyA9kbcgrvcVMm14ZnRWQSmTO6NKOttEQ3+0lw2iysxePFW3l6aJqNNK3KZkeuzfcq7oo9YxELh6l",
	"tExFQXbQZOBO20YnJI2DpUqIryzCpnd70hJex9nDdQTWVxQ4QDEXx0VavCrYmaCdvRcvdrafI7S3i7bH",
	"O+jFrr8z2cSZWINyeuw6K56NzusXWI6XqkegLAFno3NwN0Ox8gkUOh+hQNoVpU+Gke+udaKMRK6VNyHi",
	"JCm6VnVixJg4WDJOIbZtFVlvJRpmn7NRLDKKfjvy7ovnz/zdr1/u57t49lKOdobk1egMJyMkkJltrGX/",
	"lJQhCn4nOFauKGqHAlHKOIikFgDD0FiYAzTBsWJd0yWrmPClSfeYRBDXXBpYrQFMkhAjBkgcZncHEqIZ",
	"FNsFkJ0Zfw8gjpUAKrgEuIEaxToxzgjjcY3VwSD9NEiqgJ2KsTGznMIwAwzxHoBcQiWOoQIPBlW5xT0H",
	"WmJtjABM+UwsK195oU4hjhlX/av1xufAmBO8ViZyjU+bSzICA5vCjtXvZAW2Gi9wECLIOBCnes0ULEG+",
	"tDeBKAepkUNoCYxWthA3Q1fMIotlGGJuFHHoEvSpsrc63E/zQTh09ojNFtxkr33YPddaLssEJOly7Jvp",
	"XKrq67onzR0Mq3JCcmN+c6aM09bNIvQlgQCfQQ5ihAIGOBHLL9JG7kFHnTLzumx1C5VTuIn8lxl6qxP0",
	"U0pRzIEigZlnZPVrzqYXJ+fHp+dvvJ43+nB+rj4dvT+7eHdydXLsBArogV07qqnzQU6syqArsoTDbpoy",
	"J3B64Ca8dRAMGb4WjqFcV1NruEkZY8pnx8aKbRs0d/rDF/3dYdmMuTF/teDBduU4DUOhbZeGyND10Ov0",
	"SRqG57U32KK0cI2dZBc+S+yeq1zTh5DxTAU/ltcaR+pC4GFUEP1+SEICgxGKcBwg+rD+IlqjPEUowD4M",
	"9VMX7WDXGXUPvKXreUwdsFs21sdxuUDLzoglO4K+TLmC09LRZO2nDnso99GjcWG4L5E5pFPEj9EtLq/H",
	"qutSaZmt37lC3mBmq88WWi23uIa7V1306s3ZBaKYuO5Ytf1H3qpqJdEHr96cKVU6kc3AE70JhvMDsB30",
	"wPOgB7b3gh7YHQZPq47h6rnAMcThfKQeezn0WFUJBKIWECjTJ6lMTu8O9l2O8bnwkn72z/bERGHlhUIT",
	"w5feMyx63gyyQzfU1V0lr2sN56wmKHUav8XT2QWiPiqoqXU1lw2tar4jd+26fEfu2vV4JddEu05V3Xb9",
	"/obovD0GTO32fbfGhK68tGfCYdhYibuoWhKQqkDwtxD6YiWxRIgxHIMZns6ytzIUxlNkM/1wsNue67mL",
	"axzu+2rvMe8ul8KwPWyGAMc8H72I//ZoCMndWrFQJG0bJDRC0AkHlbXTHg1qK1orJiqrsw0ylsHRCR+O",
	"Nd8eI7eIzte/SByCpQ1aWgDTGTOrrhgJy7qXTVUqtkbLWtZPSdouG7zzENZpczyNlDozuN1uoyw5jW8R",
	"TAAn6p0ES5OEUI4CqS9pZVurTBWlaHsvaKmH59raoudtr9Rqd7hSs+crtHIhmC3F8CWH3IlfZuujKUOU",
	"CdKLFSBwXHhiWjVZ+iSe4Gm3486RaqPO6Ih1a3wsm6ijmuGYLuhj2Rp4S1LXYy2pjYCZKMz9IFEgJfYM",
	"yYJwLk1TzOu8GmSzZlIddT05HP1XOzloljyDMZwi6VwSi7M/V3eSZfYOEMW3KNAPjO9m2J8BFKWh4CNw",
	"uH1kz+J5h1ls5vzypnFutbr20ZuzDwyd4TjVC2pJzTb6u6rZ7lgg9vk2o2/saNZu8E2d4dqNvunzXjso",
	"vsPpsD0gP+YoWVkttTpQpOpojfAOQapvAKeRLTd2hu010soCbKmO1g7eWQWtLOyHTr+TPl7i1JZjLz1B",
	"dyHB36YE6wi/Ei0aDyLdSPG3NcOxi7SnxDIrQjdi/G1WcZtVViJNC0tGN+r8beRZYuRZnUxrFGh/G5x+",
	"nMHJb2dwOlrB4HS0ToPT0UoGp6PVDE5HKxmcjpwGJ7+lweloJYPT0V/H4HT0CAxOfjuD0wbiASS5J1EL",
	"XFUu6HN/jWokgHqou0yxc+Cn5hgADePUulldFH1NSghPGSeBDqhQmVZMOHIWpNLVxll0i9Gdo6A6CXeE",
	"gApOL3NPl8YFblzJzRoPoHQMLU53PI0ycdHOmquqL3qCybs0zQSTPXMDo4K7ebkUZUqtjVYNK3ZRJv25",
	"4wD4MPRTxRpAibE0c2gsokNoRtoSeDWjiM1I6PQF1UVCiAbybVGAuCCe9FPGAvvK6omZVLa81opDSO7W",
	"PH5I7toPr5D3m8JdWxx7rbSRW62wrnl6mULbfpK3Si3bBCAdkG1vF5InW3H/MXSq2XJ7BZxC/4sG1IgC",
	"i/cr3D7BlHEZErP6UluG/FJOfLIakEGqA2PPr30UX3Yqm0H22h7GaT18B1tUUN6MxsXVWe19yqXb2CWO",
	"/ZpaIWwzZVErQ13nOSvfSwnJsTOiWu1QikpdRrFxUlLwdczxYG3zImX0LuMZ6TCvtkYd+tygvwcoisgt",
	"CvRbqAyklsBYq0fyfvPi0YEwi9yPH1UYlsbQK/XhtjicggCzJIQqbGkJtEpEFBuyT5+Sb+8W4v/zxc2v",
	"n9LhcBfJ//3+9bftRaH80ydWrvL//dIheNy10821gWSd9USXB6vpq/59d6BFQds31xFaXl++wHHod6z2",
	"HbUA1Qo0anvwfzPbyIH36zZ4sr+//xTs7+/3t3e2d/J+5FusRVm+x1l3S7yvuY480OVtiu78uhwH9dzs",
	"epUpXtYHboRBgMUXGF5YM5jAkKHypBJb4z+NbzHPXjU53jhm0SSzsUFxcAecJSf9LkLCNAWiLTg9HoD3",
	"YQAYn4cInB4zGS50e9gP8BRzoBCr3mlipp6CTtTDwxm6hwG6x5EPQyBrswE4R3elrnaf6a4+fvhwegxu",
	"9/JYOSge3OEvOEEBhjJgjvi29SHGQmmDYTi/Ud7iN7lT+79pve9m7+YJhXFAoqdPiyFN15yRoE4WlrHY",
	"+mFHkXIuG4iJBlwegrUNCFx9wRHBexP2bahDUFlh4JZ76F+Z6KP6aZUVe1R+3Mk/7uYf94bDYpipQrNi",
	"0FdEb7GPwBV2Pe7seVcUT6eItnsg2PgMyVpwlU4dC03pSA1iofQKbM2BX8vPw2rqWRKuGeDaGRoKF6dj",
	"os42c5t+3WkDKhtWoCpStwyCYNdjxCEOHYitf0+1bEMogmAP0nPYOxjyU4r5/FLMTtMUSXvHFfmCnI/B",
	"s3WqKwIua+pMGDME1YNlnaXivs91/b6u3zf1zUJM8D/RXCWgwPGEaMsmhz63MOFp6/N/M90JCZoPY4AS",
	"C5qK6naAskKTRa80o/9AY8D0epTPRBknFDE7IBmAY5Jy/ayU9fL3pSpcCZ8hTO04ASH2kdZtNHyvLo/7",
	"O/2jEKZS1yjCOMV8lo4HPom2MmSJ/UENszUOyXgrgowjuvXu9Ojk/PKkGnOTgcOLUxmSXxsKvO3BUCVa",
	"yPEvJ9l+YHnASFAME+wdeLuDoewxgXwmGWXrdnvLLwTEnKLavEsMhJhxuSWHYY5A3QGgtp3QmHtVnoEB",
	"OI3FbgdDgOJAZcjIDv9URm+RYRpSmhCGZBx5sZJ0CBDvwHuHGT8MQyt2Z6+QFOyje8HnVbZ05qFFb2lN",
	"lf+oRcVK/qhubU7iwFtcywBrUn+V6Bfbkl482uAsQycoYbj1O1P7SJ4eZi2RX4sv6yur6/0/lZwxFlJJ",
	"DXAYhqBAD5MNxARE7XmG6Cr7SJHXtr6pZ9gL/dty5oMO9mNZ+AIZg1p8VdEJAJk4mUgD95pQO7rwhlnp",
	"oURekbasPTGNABLrsRB2uUTT60VXZOnH9ovrBg5QwbIrmf7W2vnWNxO6e7H6OMspnsUHb4QpylPSlABZ",
	"LUlUWYW4VmkwHOFPjBiW56FMFnMCVCQmEKM7Ew8E3SeIYhT7Jk9EXWSGgQney8AdUYHOs9gMII05Du0o",
	"KoFSZeRJKyGJNpmJPTiLiCAWMroXKwLzcA6+YP8LCvpkMgHjORiHOKluECpM1jm6U5x6ksHubXzttVpl",
	"OoxXLhvbS8tGyUgxulUhwYxw9LMOa6VfZ4nXektsLxrzrAc/yU67nBFq5W3P21vjYCr8l2OoVzDIYjnK",
	"MXc3P+ZrQsc4CJC0k+1/j1lmIkwcwBEFpmLdnubaxYROrXMjfPSuTo9PLt6/f1cOUF/6qv6cHp6rTdAp",
	"XnUsc2iJ0co6VHWyVBxUEewVCeYbkEuL7yH9eoVO7qOw2Ef5xNq8RNqw9HIW7M4ymnR5ipQmnilLaCXN",
	"bnwSoK1vmWRbLBfcWfAthR0T+SzPwlRhnzdIS/FX80srccxj2OPeILPoxD5dTIq0XI90aD6sMMHVkt1e",
	"lyj1zaSHXiiyhMh5lSh/z08XOmYdRVJtiQnIws8bm4FRhhh4MkYMB4iBAEUk+/lpVWdRg1iSoEDCPUfK",
	"OAKONE2LmFc9NTDvoteWEcdzdRVXw3U/jNV6XojjL0YX6heNFkVg83Jm6gV2g54zn7gMsPiLFscDmQ12",
	"kJUoUfqDRVS+vja0p3XSCbM06/K0kTqYS5kvZXjHe30TU7MnqprfZ0/sulstfphw/VEMp+3JkgmKluSP",
	"14LYOUdqCq+FKSt7ai6pW5oo685CJmDlADQcilYyKups12s9GLU+aymreouKMvf39zFCdTY51dgOHyqO",
	"mo0ftt3Dr6rsyvRVr7Wr8s0JKZVOrE7wLMFtQY+tM+K1WWnmV5kgqlFZGkmfo6IpdkJJlP3QqPkYbHae",
	"aUHpqTdXLtN7MnuxkRZTfItifSGkY5PW60P10K+fIToo4Ouy3uarqteyrsontkwnKCkErhVn6wSPesUV",
	"NsHuK87Yp4t73MrCr8tAD7KJd2GNOqt4e/i2/GKGUrckckp4VRlkOUoDS0xl0dZd8ulUVV+PmNKdrSau",
	"nPOiRoZVpjVwyauWs/lBYqster4Lj8oLcn/Wkg6QMeJjpUTknCUK5PZRJcahaZBN9op8YDrj/vpFXO1w",
	"3+Vw05YJMihzFhA41HhZRaDayX82KE7NMI9LmOYx+m/KYfhbXrLLGOXuSP/Kx+YOh6FMCH0Lw1Re4kmn",
	"c5inF8hVwsGn+FP8Pg7N7SGAQSTKfXWLiBhTaRPMunJ7gNRkONggD9eM2PqQ05CbYM0nHpeydRjLJEEV",
	"iaXCAJdOx450Di6FrIEG6xdd9ehfPE6ia12wPdnta9+ed9839NJ+rA0LvIsLQcYqa3Ei0E6oOs855hiG",
	"hWwGRbbRtU9VRdtzdRMcU3GQ3TSv2AMtZQ+DORfWOjgEVPmgUbZL0WknSnBIVrt488hqt5iyQ7or20UT",
	"tnrffUnofNt2dH6m3i4UnGZyj5kKFXQP74qpuS9yh9SNyNfmZbLzfZbJoe+jhKOgRH6DU4USSy20kPLg",
	"RZP5ZNWuHnE6gZZv0njeZBUqyrdHIXTEBM7aCprK0nFmk5OPR1ZdVE0zO5VM0N7vr9tJTes90i85y8UD",
	"G/YurfJseM8q58t5VFuW0WgevlNpuXhjUoOs3b5f8L4x1/Jcvod0GfOtV6yboas1wEPN+aXXnR1OwzbW",
	"t74lGUitbfoWIotWffVuAk6nuRMEq7GklVC9qg1tGRY2aR6yMdfevN3EharuT8GFeloP5kLWxiPKGCCK",
	"elTNTZJQXi194Ce6vmVE+7G6g4EI1VPsWaIaGM/Nfiv9UiwPKUJNavKcG/LXiyqwqf3U1J9Gf46n0VPn",
	"K/PKQQ9HCKiwT9KQrl7E98AEhxzRnhQAchpu4LKwYi7QngclyLaDP58Hf27vBX/uDoN28DlCz5GJjLql",
	"nmi5gPKn0aAat9YNo3qZ//8PB/slWHXBn+qv+uPrr/7TT5+CT58G8v/gH6tOZIxCcgf290A03QreLZlM",
	"JUrfkvk8//7zwbGKuAf29/rPhy1n9XPM6Pmwv/2i7ZSKIUkf8ay2Xwz7O/ttp2XH8Xx8k4JjcotA+9mU",
	"I5P+4BnpaJNdhdsoC0DZAP3eTlfgf+0E82py7FGAvqrIelzAryCdHtcEuguiRwH/qjLnhwJvMqOYwLkJ",
	"oiCA8wbgXQlXfgjoKu6oFfE3Uz9r8W5H8v0hMJ/GfpgyfNskz4sByV5TEhVgbRfWqzzwyX3Xga/IGoZd",
	"Vc8d/yX13PFfT88d/zX13PFfSs8dP3Y9dzWZ8LPpjOOfWmcc//Q64/hn1RnHP7POOP55dcbxT6Ezjn+U",
	"zjjejM54RKII9hlKoAooUroekPdSKtIguk9CEqAswqULSHlp0XMFUMqgqwSXXZrSX4aP9A5kF5t9aFWJ",
	"edraE7HBaWIjj62yy1gT+j80zi86mkyeFKHhcvZQNdns1dimL9ytYXod73vz+a9y27YFGcPT+IbDqePq",
	"93velTpZ5FBCV7piln7zLB0zZL/grL1fVn3kd5xXRCFow45T5ZCoLq8mExS1OAXlPHR6zMRMdXIvsSDE",
	"3BW5IhTzgbfaRa1GqXVRC66ICcrwcL+pjLGU28BjZSztLuDyXQhDIKVPew4rezCI3fSx8NgFZAzAGEDD",
	"a2bCRf6yp2tF4jJTHoD3EeZAzwGMSTC3G2fB9vIGK3Jn1Y0DCGxugD8NU7YM82HQVvBvGchX9pgiJpFm",
	"0MOJjG8GAwTGc8sZJohwLHhLItikrAYw5TMUc8EBKDCOg6KPCHJ/ZvuLAhwMmplvLTFC8r5WeSxrYO38",
	"WrZ2Cj9mm32D+BJMbFyIdXyqLvYI+VZdpawtcqwVYSNVD6YadCqx5Db43Kww1iNWrSTmTgzaat+ZdXT0",
	"avJVKjh8/ddRaYvOY6uqspZE30pKqca+11JtYAQLJPU6LtsYZpABcousI0/+CuBUxbK1G0Mqtppb8gUF",
	"ADKVISUNs61buTD3ChtHQskEhyh7kGdywEgOz/f7/A1e5lnnwxj4M2kxkx3mcAyaubeYU22DjGwP9H14",
	"ujRiR/YuZ5tbI6tvfcu/tPDdFVofjqehTda/KGsWtKScAOvUl0Ch2x+mMPScb5mS4pTrHl6YVBh5Mkad",
	"RjFLtKhTMV53CaPn5luG4uAmQPc+iW50rLwbLSa+q8h2alcjJMADxxI8E8rPVvAFx8nwSgAGAUWMGR6v",
	"M1pdojhQ3R2p3kyArkeyBzfP2OSleLC0Umx0Q1GE40Bn5/ihlBZ0YSZXmgHLULiJmMqIPTITWem4K/oB",
	"qiNg9dQFywxxoV6yLTSjS9/un7wdqSQMKACmoessdvJ2dJkXb4w/7WHansnEFCzYOr6W3lgIQxdmtRm7",
	"UdcvY3r9alIJyQ963vEw5Ldg4ojGyx+AnI3OG7n3bHT+PbjXHqb1K8vR+WPk3hJYzieOJaRu4JFjEZ9d",
	"GHVFY2CeeeomrqTAWvd110lteI0cDBCXElu5KFGfBmsTVGke86ECpSk9YIdN0KT0+j4BIUvUM1mlsMOs",
	"VkgRtjny6HRlD6OFSWTWYi25Ffo8P3o3Oqxm7rybYX+maaHs7yb1Mo7VwVSfy4zzhmqQW9W1LXqJHcNk",
	"fd+oDcMM0oWEPW/PfVrl4DVJ48BJ5MqkulG7bUKmN4VbIWYiPmFWuCBYkn4pNwf+xMmXLuysqWtIvbTO",
	"K4lybqQqnQPI4Y1Kv/yQ3Es1ykeNcGWI8oxLBARAJ4BOKLnF4nRmEgTpha6ulrIgeybMoVn4Sxb4MeTw",
	"Uk9xM4vcHmGDK1zfXhBqNihYwF7Zp6bNyqcoIPeS8G73jLh4+4Rjn0Q4noKRaAcixBicoqoec0GJjxg7",
	"eTs6U1UegPi20diXmj8ExOJ8Y/Q0C0WysISVrciEFanFDa7PaCgby3u6WB8dlZ3lCRpMZcLh9zRA9Kny",
	"dbGCKWjySWvoaX6RpLKCSIuFWiNBtkZ8GMdEJtyaCJ5Rxlejs0ijK5XGAfB5b7gHMt76LIeT5aI55BxF",
	"Cc+vpTMrrLGUlMaVEB6n8oF6CP0vgEyASsIbI6ZSL3MKsXy8r/JAijOIGPP4/SswwSgMGMD83xlICGN4",
	"HOq0nVEacpyEqLK7W7flBhTIOcXjlCM2kLkIlTGaWaZmMXEUmEyUhm0kGHJsaX+GYSgopXHGTDU8DjGf",
	"q/CxHNEIxwjMyJ34YQbjIEQgSBXjyjZKFGV0U7jQUGNmE8fMLOMRn2KOKIYZ4DAQ0yvaqPQQkrsmKU+p",
	"VHA0QyUpkz1JeUBiAIFYQEEaoqcSpNeYMi7z2Mu5h9B8yxhgjBzMmzGBSeFGmEp/IpOrZngVo46hKGLA",
	"eGlaxAE4ZhzBQN2M6huJz5M0DM9hhD7nNV0xsQQoSoIdxsFmL06FuBLDZZkVNnvZlA/X7MjZcZeQfRp/",
	"GkHsi+47wtYtongyrxd+bucEJWP9GYxhGKJ4ioDsR6OnQtvf5CCWOF5ZrKue6iV7O7uVUGfcOnCHYNNC",
	"hgUmdVCsA4UZ1UXeoUlRbhRnPkNzuaIsvZnaIemNRMkPNEUdO98iKnJfR722ZEjfkafXNQCJ5YOiSExA",
	"h2kVI8XzNmNlAZDbjiY+y2SU2oGqYU4Hn+K+cywtHXsgRPBWiC7LyU0gnKRcesmJEaw+oJR+cT/3UM6l",
	"rZ3KuOA1J9p/QShRJyBzk1Zs0ROF5M6448ht1A8hjqrO0JojYKwuYWp6zyqLJS3FPLpFsU5KNRdawP/9",
	"3/9HinE5jAnFqzJWYaZKzRjZnZalU2caBswcjl1XrB8Yorn/I1t11crradGXugdumRSz94ADyormH4F7",
	"o/KAU7Xf6e0Xiy18LuMf33MU6y1bZzjPnX2VAWPQmN2gmOB9c3Ykexzn9tblelyblSQVrez0jZtMq+RC",
	"Mh2RK/agkNt5ELpi+nVBAzHKwKpUzhlf7i+hJEh9Z3cwwctaB+h2u9JO/DgI0O2yxl9hte1XKJuikCTS",
	"A3xpFzuOLnYaurjOyJOltM/ylvbyn0g8wTpnfqEgI6T1m9pgF9eL/xcAAP//Rd+4i7HpAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
