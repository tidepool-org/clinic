// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HKekhqGcWZbXy/8KAAD//yYTe0ePlwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

