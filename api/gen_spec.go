// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kUWNC/usAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

