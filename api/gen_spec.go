// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//+p74WGH5kAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

