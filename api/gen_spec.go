// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.10.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HsMGIW28/woAAP//a759mCWYAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
