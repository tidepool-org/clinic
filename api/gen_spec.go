// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

