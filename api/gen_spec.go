// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

