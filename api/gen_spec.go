// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

