// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"///C6SKu+NQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
