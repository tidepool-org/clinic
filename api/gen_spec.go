// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"4QRgAAA=",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

