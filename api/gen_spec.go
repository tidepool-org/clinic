// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"JizL6+X/BgAA//8Qj6j6f4MAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

