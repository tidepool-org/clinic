// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oHGckhqGcmZZXi//KwAA///RwUPLi5QAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

