// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

