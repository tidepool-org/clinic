// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+x963LbOJbwq6A4XfUl1dTNltuJq76az7GdjL9xHK8vPbuTeB2IhCRMSIANgJY1aVXt",
	"a+zr7ZNs4cI7KJKKnKSd+WNLwu3g4NwAnHPw2fFoGFGCiODOwWcnggyGSCCmvnkBJtg79eVnTJwDJ4Ji",
	"7rgOgSFyDrJi12Hotxgz5DsHgsXIdbg3RyHUPQqBmGz8n+9hbzrsvbz9vDNe/eS4jlhGshsuGCYzZ7Vy",
	"TY8YkoYxdY2Wwz57P+y9hL3p7efRcPV7+uXFqpd+Hrf4PNpZPa+BmiEokH+NQ3RCFOA+4h7DkcBUQnCJ",
	"RMwIYMijzOfAVAcTNKUMATFHYIbvEQE+FAg8Qw9eEHN8j547rsbAbzFiyxwKisPlZz2lLITCOXBkVz2B",
	"Q9QE8JWATLQGGU4FYhWIMWkPsR5vA5hRCHGQEkVpAF1o7TUpqvaIyT0WqJbS0uJ1ZBZicobITMydg5Ft",
	"jACHWNRBrQvz3floCuNAOAejoSv7xmEc5nvGRKAZYqprOp1yVNu3KS3BqvsbWvuLoMCIiFp8ZOXfC98x",
	"GqC6+auyPGDV5hxB5s2rtP86DgIg0IMAugZIuraNYzppGGkOGTqifi20WYWGjqiNWa8oE4AyHzEAiQ+g",
	"EAxPYiVL+rM++FkOAigDPfmhjkdV1/aVfPbng97vHz78/PzZnw/ew94/D3t/v/397vnP1kWJOWK1NGQK",
	"1xHQTwxNnQPnT4NMMQ10KR9cYx9FlAY3upuVQokuk00POacehgIdJUrimsqqajaMRogJjFTNDEgLVaWg",
	"vU/q3bqOwEISWzYGSAfJ0EAn/0CecFauc3iPGJyhN0HsUY6qS/YqoNQHM10M7mEQIxdgAj6GIQ0GZx8d",
	"twwxwVpDIyJZ+L2jKzqu/hBIGNEDDCMFZVqYgK3HuyFYgGe68Hll9VznoSfgjMvej6GAzu3KdRRoVfgP",
	"wTSgUGAyAxHFROgpAIYihjgiqgCms9GlfScH4l5/z82EtOpMzgU+aBG1t+cW5VVhHr+qwaoTIXE4Qcw2",
	"kfK6Kmwms7st92+WzTKCWWErqjRBVHFlfi+vKPR9hji3sLNgCAlgyiXWSlrGwGrqHZp+KszoOh4kb/GM",
	"QaFWkCHovyPBMuE5U31CaYAgUfWxWFrgx2IJJAMXFtC5gAEFh4GgtQDKhlawFEKu8D9RnqCHvZ3xS8d1",
	"dvaGvfFL+WlvOOy9VJ9Gw+HwZ7VO9r6u1c9ZXxGj99hH7C5i0BPYk3J1jmAg5h5k6I4vuUChXH9p6mIC",
	"2fLOS1aJirmiIUnIUrYjJgdeq+hdx6MxEcyGPF1gwd/N1WE95kx3tpEyW6rWeqpZ6awT7DeJWileE7Fd",
	"ntO50idTZQdqtBkiPRUo5MWJqGIgW9gmE80pQeeKay2McEgAZAwu5ViqJtAMrngC67HWz+Ii618OZwVR",
	"1QEFSFJI1fCOK+XFbzEybSVOJeyUCxgkWr0I+YUqAx71UR+cEoWpm/5V3wViGWEPBsFS/fZPHKlKgMfe",
	"HEAOPr4c7w5HH6W21h97o/3h+GORclRBLe2YsY01UUU5Q1PEGPJfzW4qOmU28FOVcmblt4IpU5z0m4BO",
	"1Mw0toCqqqc3pQzAhFbA9bxQiDnYBTNG44jLlR6DOIoQ8yBHAAbRHJI4RAx7wJtDyc2IcakpEfTmulUf",
	"HIYTPItpzPN1UpSeflRm0cfRR1fh9Z35PvwIJAxqv+UjX+I4v1k9fHV0fPL6zV/+/1/P3p5f/Nvl1fXN",
	"r3/79//4+87ueO+X/RcvtZW6vVo/2Ri3yEZXCml1K8uFEfRldSKtFcqAEorEq6dITkMk5lJ1B/gTAh+P",
	"DjUhHsEATykjGJYI8ehwjXKSwFigFFgbZFkv8pfhaDis9NUoxmTL4/xk892+Zgh17zKO/C8Xrws04VgU",
	"O4gZtm9icmYJ9hNT2S1sCXJ6vKgAivBWEWLQbeH62zJx2azYzMStUJXk4Y/Y/whCuAQTBFAYiSXAeaWA",
	"IQF6Ew3mkANCBZggRAD0PBQJw3AFk2grui09KGg4ApA23Iz2NtCN5W1I8SihiifsJ9rSoANPARYSKeT/",
	"lHBi4xi7EpYdk4oi1tuRBmNF7o0bVWe69peq9nZYo0TvycJogNaRdoVca/ZdaaH+cIkCKPHF5ziq7gK9",
	"1GBvRoSTP51sjbvKjPOrZIa3Tc0CfbfJqvm1MpHWjblqBVrFXsqDdpnQWgpMYmwcnZ2enx7dHR6/PT13",
	"3OTr25O3r04uHde5uDy5Oro8lV9sdsgaa1PKnQvEQsy5hLCdNZc23QBzCk9WBHTtzNqTYooLffpWJWJp",
	"sUjNjym5iichFlKKZAcbud0d5kaJ1JQHaAa95VHxCL6bHIxyaG8yzfWE8gu1ytObmjVIpm2h/hPGqOVo",
	"xzO2aWoIjIfj6nmn64SIczgrVnUu0W8x4gL5gCFOY+YhDhZGd01pTPxGFe5pjZ30nmNuDa9lIja1YQw+",
	"7CMi8BQj1tenI4lY3xkXpLz8uuaipcGsPD22qZ23SEAbemNNhZYT5KRb1dIyUU1+xlCrpeIv0/5bMSEk",
	"JHEjBafTudLVt2U9ZoeTVY0vy3L2hGbZnL0FPbVAQMyhAAQhnwNBpX0WGtbvN5kH9hPQlro5W+F1y3+V",
	"orc6QS9mDBEB9BIk8wxz/Sb64+Lk/Pj0/I3jOpc35+f609G7txdnJ9cnx1aggBnYRuxJnRs1sSqBbkgS",
	"JWyaXmzAmYHX4a29NsnWYWUZyqawt6BfJpiJ+bHBXiZTd4ajnd7wRW9XbvAKHPFox1tfugWYxkFwXmt1",
	"y9KC6R2lSqrB8N5kaxFALm6igEL/EoWY+Ih9GW5CVrObC5GPPRiYO19z1NZ5il9oAbgOj8MQ6pPUFo2v",
	"TG1J5pDNkDhG99grWZzVc4MS8W9/Z6N28ikZ5XmjpSRdY/iYosfY4USZFGiB/MqsMyqp7m3qoe4yxfYi",
	"sH68VQug1ojIiyKFlxAec0F9s0WsTItQLRwrBbFicGvRPUYLS0F1EvY9TwWnVxl/la/0DOtJnofK0uBS",
	"GMiuCxeVvHJuM8WMC3UPVun1WB0+aiGiqgHlLeIjX3dW1gk1DiCuM4f8LBWFiZapKqE5ns3N9d31nCE+",
	"p4HVlDJFcpq+Op72kZD4I5jMAJYI0DeamAPZpfWOMVMd6v7yl7ECgMYsWEr9b7FwLqnQl6YB5gJ4lAio",
	"R5TokVqWK1jU2baxhIIlEAx6n5APZNcAE33V3/oKpLDsEi6bBJRapnkBZS3gwcCLA+UO1G0FtSZT0u7Y",
	"elJdO5Q2/LqMkieS0s7KuDL525sXXWyZ4gK6aE9wNBYKp1eYeKgNA6o9hJY4xqErWX0XMBTSe+SDxRyR",
	"HEZa4yJCDFO/I1FemEaSLqmAwV9obLsOvJZligl45miAfMkRcnJzGgdLzUQNyMNES1bEln/ZvriQ3XaU",
	"GbLJ2dapSAHSgZRyKsVogv79qFmT6NWz3DvltQmPkIen2AOScICmEvAsFXEHYOS7YN93wWjsu2B36D+v",
	"KJmqS806CivVXrmO0WFvIYEzFCIiTok0eIU+RCrrQh8xfJ+IArCYY28OUKi4gYPD0VH+Hmy/v9dePUD+",
	"Zi0gFpUGubQOj968veHoAjEPFU5gcjVFWu0tJrFAvMYfQdv1oa4j14YIsECQaa8dbxbmZ7czHLZiJ2GD",
	"sXQtrgvgTEskSQoNgw/7u+1xm0Fwqf1WtzH9UfvZnxIpTrqjHhMlL1Iri0EyQ5sugQai+xI0AtF5KTQk",
	"bZYicTNuhKHTYpzRxUZrEdDFtpbijC42Wom1IGywEGd00XEd1kLQaRmu1b58o5XQW/ptLYYGZKP1aAJk",
	"gyXR0HRclSY4Oi3Mr8b+2WhpUitnW6uTQLPR+rSAZoMlSkDquEgtgOm8TpvKssQG3OYqbSrUmmHZcI26",
	"S7dmUFqtUNVi1pZtB7vZ5vYIQhgBQfUxAI+jiDK5z0mOZ/QYFft4NPY32XZJwEYbt9wdbtx0f8OWdUjn",
	"rbCuDkCqexXEMFK3TZ6mF25M/nSfCShB+gAmdzrmQ3XRWVyH5P6o/XGFJt61p88W17dNTP2Yb8nE78Jv",
	"T8y0/tEN2n8Zkv8y3ezQ/MtO+j7MEnOMWht8pg9S9cmW1GZBkA1oAM4PubM77u/9svEhIhdQ2FSz7IAL",
	"GgV4NtdhrL5z4LA42HuxQAF5uWC7qjujvzvf/NmuOZK+LhGPKOEWPw/fXIK0GIBrN7Lm+sofynJjl4Fh",
	"M1tyoSt5f4rPyQIcOD+PwLO9vb3nYG9vrzfaGe1k/YQQEx3tkZ8cSbtruMUXJp6qi6eQ6fy2HFlzntBL",
	"ZYolZwdbIJy0G1IbTDvxKPsraQpkW3B63AfvAh9wsQwQOD3mKrBjNOz5eIYF0ABz4FHCMVf3b3QKKAmW",
	"YI4eoI8ecOjBAKjavA/O0aLU1e4vpqv3Nzenx+B+fPtsLkTEDwYDRPoL/AlHyMewT9lsIL8Nbgi+R4zD",
	"IFjeaXfTu8yX70+/IsYxJXfju2cMEp+Gz58Xg0+2HDpd5/9XxmJrB5nrJIjD+GLlQjjUx53s4272cTwc",
	"FsNUC82KkS6I3WMPgWucJ50cAAzPZoi18yhc67eUY8tKpxaa1ReYyfyLQyahLesdfIyzZJ51VMMc4+QG",
	"qQVBLtkxEhAHFjeEegeoJo4ugpAfxLW4IHDkxQyL5ZWcnXGUQ8oF4Zp+QsS2t01pzlQEQtU0QelzBPXd",
	"tgkYf+gJU79n6veS+olsj/Bf0VLHgmMypdpJlQjoiRwmHLON/n9Jd5JVs2ESoBzXiZmsnnD3YrHoF5qs",
	"3NKM/oYmgBtqVV6XXFCGpDrXuJdThBMaC+Olyd3MXZOrQDQxR5glHlYSzwH2kFFOBr5XV8e9nd5RAGOl",
	"LIowzrCYx5O+R8NBiiwpiPQwg0lAJ4MQcoHY4Oz06OT86qTq2M/B4cWpCohVksk5cEb9oWL/gM4UTmEg",
	"rtGDyEuNM1nUFpqk1WGECyBBzpHgAxzCGcr83+5k33dn0jS4O5OWcz/SjF8gCIX19phQt+URIjDCzoGz",
	"2x+qKUZQzBXlDu5HA68QBjBDtalRuHbhMOZT2sx0AFjelyi5odZhx31wKk0/AgOAiK+j59PbXIYklaqw",
	"+phFlCMV6ypZW3UntaRzhrk4DIJcxIJbyNvz3i6BsioDkxxk5TbW1ClKWlSspHjp1uaE+M7qVgVdK4tI",
	"oV9qEcPN5rARRlGAPYWKwT+4FvtZ6oitxLsULMZVhd3f/VULvsSLSq0GOAwCUFiPhx42i2wiTFZuib4G",
	"n7Vr9cr81kxw0EJyPA2rVdF28muIjOOmlXAMu7+mLB9H9cjk86ULu+F68vYLmEhByYOFADOT5CHxZ1x1",
	"xZXxn1/driEAHRVYyb+11c4Hn5MYxdXm4zQveBoIuRamMEtKUQJks5wxZTPmVkfnV1kplbzK+E/Fr6AA",
	"ETgJECBoYfgJoIcIMYyIl4Sv1wVb9JMoJQ4WVEd0puEWICYCB7kATeBrc0ptKyIaGY8zaQekQQ6Sj9GD",
	"ZAgsgiX4hL1PyO/R6RRMlmAS4KiqE04U+OdooYn3JIXdeXTWa8VkGr6EzaqM5TqpvLxtkp5rJSXD6F7n",
	"VEuEpZeOWSsNO0vA1mqxvajM4r3/INq2mTJq5a/rjLc4mA6sswz1CvrARPTpMXcff8zXlE2w7yN1+rL3",
	"NWaZyjS5Z0YMJBXrdJxFq0mOM0Hh753r0+OTi3fvzsqRuaWv+t/p4blWilZxa4I4YU6sVthQ10lzEDC9",
	"Xq+ov3wEObX6GtLQLXTyEAbFPsq76PUc0oaimymwO8WYpctyQ6whmduSfNay7M6jPhp8TuXaqllsJ7Ys",
	"0MgBCyzmAOZyxVSo5w0yMvzV8iqXMON7UHlvUMJyUm0XU7c0WpUWO4gX5rdZQsrb0kJ9TlK4dlmcyRKo",
	"8Kaalfhm6HedAJNPiXXQK27li8Bm5Typ5+cbuNZEuOqC4icjofoqf2I/LdHS5RtzbUZzzhZkeieTKE0G",
	"rKzv2EJJ+kgRQALQgzmGr9EJuubX0QldpfXqm0mXb0Vd5oxXEUHxdPf9rVzsjPzMCnenwIoGyQRTyyO5",
	"OrvfHIfwPlizAdjoEM1kft3qJqD1vkIfa7eoqPLgfp0DmM7HLQbtX3zGUhQ96zf++T2/VzVP9alPvYWq",
	"yx9PIOmcQXVCpgG1BZut5vyqDZ8lv6okMCs9cIBswXSXKlyseAg5ZTRMf6gg81j1VERm54nqTpoO6prM",
	"mfSgNBEVOqe5vo4xiTbqzZx64LdPDh1szS0dW2Ys5basqzMGNSn/kua3sVte+X/X7FbQdp3ZLTmXLaq3",
	"jQVfl4G+6Cy4C2XUnQa3h2/gFVMQ2sWQVbrryiBNQujnZFTqgmQTTqe6+nZklOlsI1llnRZLBFhlVn2b",
	"sGo5mW8ks1pi56tQqLoJtr0HYF0GmOaBz+s+WaBUR3UtapPTP458qx3uq2xh2tKAJZu+xKHBywbSNMo5",
	"Cz6iLE2G+b4kaadrtVaP97S+WDOuUybJKRYYBoWkXUVeMLVPdcW8v9VjsELFreuRWaAwUCMLJJizYe1L",
	"LsmqhJFkrLHqGrktKyQIq+6VC8WPj71228nUnrdlebOcWZdw5n51TjE5OPNZtbj2aS3cL2eXy5W1MD2c",
	"FdN1XmT+Y4/BRA3cs/N1uOcwSZNcJIIEpxolOV2SQ8r2eSn1Z6hlKmniwNy9/mS5bl9ZlIPfhXCSEyjk",
	"EixxizVpqfIj3pSPmt6kaKErU6+YbhadTsSWZmKKDVfWazG9/3ts7VVOEPldKS+zBc43qmWcvGnWdDST",
	"nOEWBWTNkZLUTTlG/wOd4qo3t2S9xiBqOgVHb94C7f5rfb7LZOxJYmFHfr+akCXPaJkX/od4ONxF/3fY",
	"3ysFIZiC3/V//c8zX73nHz74Hz701V//z9YH2lrMa4ICugB7Y5A8PdJhbpVo9Ibp7X/96WGiQ7jA3ri3",
	"P9xskn+MCe4Pe6MXG86wmJjjO57k6MWwt7O34SzzyS2+vznCCb038YZg4ymWc3h8f9PsLEf3n7Ac3f8R",
	"5Oj+k5ej+z+EHN1/+nJ0/wnL0dH4KRuk4x/CIh0/fZN0/GPYpOMfwCgdP2Fpujt8wtI0mdzTlqbZLJ+s",
	"NM2m+KSlaTbNpytNizz5Hc3zlHhBzPF9k+QsPgvwmtGwAHmbpHvVwU8eNhn8mnYf+jEdeCvZiFq78dZf",
	"rz2KE28aTpa8shKk753pCN3s/RmbB6+B9lA3eaTrmuxpnEe9pskN47Z0C06eicnm38G/JnN4MZ8aHIO1",
	"9xtPVqToFNxX8QqYIa5u28wyJA/VQR+ByTILN4J+qN480UHU6aMoMBZzRIREH/LTd/EEBSEU3jx/vQ6w",
	"369x9cteWSqt1Njy6j0FR2bprJ5+uRebuvsiJ6B2dkauncG3obU3SKxHxOO5SKWE2SkMQAoOFQegM5QW",
	"6TUXqRRrl7Q1ckXqlEd06Cs+A/v9iheFuZMEbXWefC29xHNsAdcHi+X54IeQ6gZVa5itmzQflF7u+2qM",
	"uoYOciDp3FqpUphDDug9yin9zGHqVCfIyTeGTKqZe/oJ+QByAAFDPA5E8i6Sdv1wC0ojYnSKAwQWOAik",
	"XkpeRlL0neXz6H8gH8g7EiwzXwUPEuDNlZmtOszg6K8n3uIDbo9Ix8VHl78GSZdG7Ejd5afttkfpg8/Z",
	"lxaRTgACjsksyK/qE6XMgoGU4X+bphIodPutjAXX6vQZFWdc566WJMDM3n00LzambzqaVx9vuwTj28lW",
	"d3jHzDOwX1VIW62pK0R8nrwkl4AlTfDii7FFupKNiu/ZbhZfI/sBuiOQ66mDbEjSdX6dYFPjXmikRJox",
	"ElvMykL6z8dQA7kBvjT6LUlS2uxqbRbCStq5R3+7rcZmRr9+20GviN6DJm9rYKIltBFQ6RMGqkG2szQb",
	"sgZ9njy12nURzTEaz33ujeQX/S6lbFV5Cy8mWHDnwAlDGgwCKYV03dFwb+XmH2h1doajl73hi97O+Ho0",
	"PhjtHezs/N1Z/zzesD/8pe5p1WH+8dC6zitPf66vmL3eWVvP9lrisPIYZl3zSB9eZs/qyTm+LPyuT3Pl",
	"76PS72d0oVCyV/pdH3LLov1SSXJmauvN3HHoHhUzdjKs0gewO/Cx64ztWluA1zQmvpXTKzS9Ccu3TXmp",
	"HOcLSS41x/HCUUlDgstsa/QHTm+55oXqjZJbbvFwppx9Ur2JY13jDnG70pb2zeEhJCZeIgm2VBazSgqV",
	"EIaYo6WyoXN0wfKx/X0gzeDTaU5sF4kos9yVHjB6WdnWJoI4Z830LOl9+5YBKFHXLqGcgTq/1B7sZNlm",
	"rDSctO1o8rNKaGmOStfM6eAD6VnHMqrOBQGC98mL1KYTiXEaCwCJHiHXh2RSQkkvO5HPVGc+A7LZzugO",
	"ZftPCEWaxRPLudjClYV0kRy9cZWvI4A4rB7+G5KABKisKDW9p5UhUY8/Q4DuEQF4qmnIg+R//uu/Ve5O",
	"NUzyBrKYI4YA5ro0GQNA32eI8ywM2NdAyEnC9IDdtqO64Yi9ZjTMsvG1Nr42iWfrECuzoS0rkWuSmvbB",
	"qc50PY1FLNEmQAiXEqfoQSDiI3VAb1Kxp5Ri7LD+2kwQxUz0j2cU58ex6tQu211jI6vXFTLgq2qyVZYl",
	"lZfJFnYVUPV4BbpHAY1CLdyznOwHg4GqMKdcHLwYvhhaAk58pN5nKSZylz/2fXRfzn9fbvwbrLb9Daqm",
	"CUDNXexYutjp0oVEaRaIVexKEp9Edz9Xqam/iFE/9qzdwQiXWt+mvFmJi05y5R9m11W6T3POAGMxtwyf",
	"tjvGcKKU4bF+a840U8/UrGsmBdzJg+SzrBHS39c0SzN3FUL2VAvziw5Ez//iUTLF5qUDx3ZBXxIg2g4x",
	"SqknaJLHH3g0DGNSwVDKLKvb1f8GAAD//2YcAS2vpgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

