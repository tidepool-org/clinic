// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
