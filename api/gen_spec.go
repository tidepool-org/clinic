// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

