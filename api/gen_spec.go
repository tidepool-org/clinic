// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

