// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

