// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
