// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"hLR+Uxvs4nrxXwEAAP//QCf3DOboAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
