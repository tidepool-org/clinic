// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

