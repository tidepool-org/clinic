// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
