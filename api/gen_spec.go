// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"YVneLP8nAAD//4UOgQ6hjgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

