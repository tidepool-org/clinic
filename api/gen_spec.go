// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"rNwa8lkUpbSBoZxZVter/w0AAP//PdnU9MR8AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

