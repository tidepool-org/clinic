// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

