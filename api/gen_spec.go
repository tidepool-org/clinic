// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

