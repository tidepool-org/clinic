// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

