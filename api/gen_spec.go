// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
