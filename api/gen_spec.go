// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

