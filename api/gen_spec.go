// Package Clinic provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"strings"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/9RXTXPbNhD9K5htj4zJNNaFt8RtMm7r1uN2poeMDzCxMpESHwFANapG/70DgKRIkbRc",
	"y3big0YYfCz2vX3YXW6gUEIridJZyDdgixIFDcOzikte+BFDWxiuHVcScvj95hMWjsTJGy5vCSVF3JuA",
	"NkqjcRyDCcqYQRuGKGsB+UdwaB1cJ+DWGiEH6wyXt7BNgDO/bTRdqYLGiycWBTrKqKO9RRW884uSCvQL",
	"gstfUd66EvLXE/fqUkn8rRY3aIKj3KEIgyEUGXZMehEnRgvdSs+nZoIaQ9dxB3eVnzlrCRweSeDLK/xC",
	"ha6iF814wC28ybKMXFAuCTN8hRC5hMXp6QL6BMJftJK1I2cG8W8YsNfRBT+rUpKLmhsYU9NyAIvF4lXz",
	"W+x8FpRL2G49rAiHUxkHV1gFH2zJ9ZjaKJ7z6fgXraWZ9RnZaDSCW3/lIKYzsZsNyDSCicBeUsdRuqPh",
	"zsGJ5s/vAnsM2nn3R1j9MS6XKlzQHO+e/wqNjVp7fZL5G5VGSTX3Kj3JTjIIUMrgXVp0CeYWnf/zLIWb",
	"PU74gK57FQatVtJGAn/IssCjkg5lOEi1rniUefrJxmQRM5kffW9wCTl8l+5SXdrkubS5IaDaS3O/BIZs",
	"LQQ1a8i9k+3uBLSybpwazwxSh5ZQ0nk+xHSpbB/U5xqte6fY+gnwbKdZOwCyCAg6K0kbpXTTPES2jVYq",
	"dDi292OYn0MfV+Ni874Y3NvNbXJAJwdMfl29UEMFupBIP26A+xP+JUCXeIu+959rbpBB7kyNSc+1/RJz",
	"Hd5TUY4pu1CML9e7wrynQ39ogrVvQ5DTuku7UtBNUnlAj1co1AoJtVYVPLhP/uGubGghVDLSmbqXXPfK",
	"QvAAHvTS+tY5le+VeXK1JHeZ6pAcr723Dd24I7dP+33UOMvzUyl0utI/hmyb2p1umsEBycZ50mwmS6PE",
	"HG9TAm0q+WV7173FmcDp1NI7yshVZN3vWUztOZcOjaQV+QPNCg35yRhl9uQeYTVuvTdKfCW16wExj5Zn",
	"2yA3icUMW6iDcp+M2uNLfb7Ne3DDQFnr/J/qUHv0lrFO107NZoOuR3qZ7NydBmyv3x0e/oCOVNw6opYt",
	"S7arXMjuzKCjHuiyve3IXqj7lnggcaNvjv/RN3Eq7XOUxetdwOajc4XOcFxhF6LmwAkJ6ZEb3/YzwSWh",
	"WhNau1IZ/m/88p6N1vOEZ0fgw2PR/xawk02ZPfwhZ0fV/TkJmKnwL0Oh/v5QXKPh2lSQQ+mcztO0UgWt",
	"SmVd/ibLMtheb/8LAAD//wpYZJfWEwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

