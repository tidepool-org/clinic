// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
