// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"o1AmLMvL5f8GAAD//76h6O1/gwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

