// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"k162AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

