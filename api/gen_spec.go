// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
