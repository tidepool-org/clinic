// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
