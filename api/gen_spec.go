// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

