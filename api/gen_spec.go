// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

