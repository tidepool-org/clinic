// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

