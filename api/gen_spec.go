// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oYQAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

