// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

