// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

