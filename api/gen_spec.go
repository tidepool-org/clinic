// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"X7Eq7ZkAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

