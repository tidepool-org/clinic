// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ynAUsDhOaUNCuZUtrhb/GwAA///Ce0d4X2IAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

