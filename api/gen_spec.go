// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

