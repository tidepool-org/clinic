// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"HNbqAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
