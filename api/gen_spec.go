// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"UUJrFMqEZXW9+t8AAAD//x5WS+jUfwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

