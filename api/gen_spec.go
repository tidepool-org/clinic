// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

