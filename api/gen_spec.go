// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
