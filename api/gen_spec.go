// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
