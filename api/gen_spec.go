// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"XwAA",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}
