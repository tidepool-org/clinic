// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
