// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"7AAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
