// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
