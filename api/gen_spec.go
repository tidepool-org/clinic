// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"kqKtkY4AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

