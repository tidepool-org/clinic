// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+Q9a3MbOXJ/BTW3VbFr+ZSlXVtVqYssyT7mZFnRYy85W5HBmSaJ8wwwBjCSeF5W5W/k",
	"7+WXpPCYN4acoSXZl3yxSQFoNBr9QqPR/Or5LIoZBSqFt//VizHHEUjg+psfEkr8SaA+E+rtezGWC6/n",
	"URyBt5839zwOXxLCIfD2JU+g5wl/ARE2EKUErgb/5wfcn436r66/7uyufvJ6nlzGCoyQnNC5t1r1LESC",
	"6YY5TY+W0z77MOq/wv3Z9dfxaPV79uXlqp993m3xebyzet6ANQcsIbgkERxTjXgAwuckloQpDM5BJpwi",
	"Dj7jgUC2O5rCjHFAcgFoTm6BogBLQM/g3g8TQW7hudczFPiSAF8WSFCerrjqGeMRlt6+p0D1JYlgE8IX",
	"EnPZGmU8k8BrGBPaHmMz3xY4Q4RJmDFFZQLT6ISaNtUhEnpLJDRyWta8js0iQk+AzuXC2x+75ghJRGQT",
	"1qaxCC6AGU5C6e2PRz0Fm0RJVIRMqIQ5cA2azWYCGmHb1gquBt7ICS/GkgCVjfTI238UueMshKb167Yi",
	"YvXhAjD3F3Xef5OEIZJwL5HpgVLQrnkskA0zLTCHQxY0Ypt32ACIuYT1gnGJGA+AI0wDhKXkZJpoXTKY",
	"D9DPahLEOOqrD00yqkG7d/LZH/f7v3/8+PPzZ3/c/4D7fz/o//X695vnPzs3JRHAG3nINq5joJ84zLx9",
	"7w/D3DANTasYXpIAYsbCKwNmpUli2tTQAyGYT7CEw9RIXDLVVa+Gsxi4JKB75kg6uCpD7UPa77rnSSIV",
	"s+VzoGySnAxs+jfwpbfqeQe3wPEc3oaJzwTUt+x1yFiA5qYZ3eIwgR4iFH2KIhYOTz55vSrGlBgLDVSJ",
	"8AfPdPR65kOocIR7HMUay6wxRdvMd0WJRM9M4/Pa7vW8+77Ec6GgH2GJvetVz9Oo1fE/QLOQYUnoHMWM",
	"UGmWgDjEHARQ3YCz1ZjWgVdAcW+w18uVtAam1oLvjYra2+uV9VVpHb/pyeoLoUk0Be5aSHVfNTXT1V1X",
	"4dttc8xgd9hJKsMQdVrZv1d3FAcBByEc4iw5gES2XVGtYmUsrrbfgYVTE8ae52P6jsw5lnoHOeDgPQ2X",
	"qczZ7lPGQsBU9ydy6cCfyCVSAlzaQO8MhwwdhJI1IqgGOtHSBLkgf4ciQ4/6O7uvvJ63szfq775Sn/ZG",
	"o/4r/Wk8Go1+1vvkhnWp/5zDijm7JQHwm5hjXxJf6dUF4FAufMzhRiyFhEjtv3J1CcV8eeOnu8TkQvOQ",
	"YmSl24Gridca+p7ns4RK7iKeaXDQ7+rioJlyFpxrptyXavSeGnY6B0KCTapWqddUbVfXdKrtyUz7gYZs",
	"lkknEiJRXohuRmqEazHxglE41VLrEIQDijDneKnm0j2REXAtE8TMtX4VZzl8NZ0TRd0HlTDJMNXTez2l",
	"L74kYMcqmircmZA4TK16GfMz3YZ8FsAATaim1NXgYtBDchkTH4fhUv/t7yTWnZBI/AXCAn16tftiNP6k",
	"rLX52B//Otr9VOYc3dDIO3Zu603USF7yRcpYvw3ZVKNmlot0V4PfjHGE081Gl4tSIxHoBZpzlsRCbdUu",
	"SuIYuI8FIBzGC0yTCDjxkb/AShyBC2XqAPsLM2qADqIpmScsEcU+GU0mn7Rf82n8qacJ895+H31CCgd9",
	"YAogUEQqnjYPXh8eHb95+6d//fPJu9Ozfzu/uLz67S///h9/3Xmxu/fLry9fGTfz4Xr95JK8shxcaKI1",
	"bo20mrpqD5S7wTjSWo36zSwlWARyoWxvSD4D+nR4YDjpEIdkxjgluMJJhwdrrItCxoGlJMajyqGov4zG",
	"o1EN1kY9pEYeFRdbBPuGA3QHmcTBt+vHO5gKIssAEk7cp5CCX0GC1NftlXz6giEua/AyvnWCWHJfVznJ",
	"5XPmDmmNhZTAfiLBJxThJZoCgiiWS0SKKpxgisyRFy2wQJRJNAWgCPs+xNJKV8mBeRBLlB3rNxzYlcc1",
	"Z/0tLFn10FA++NfpRILUtllykBkiUhGF/lOFJi7xcJtMBZjWzKY5PGxwLdRJdqOhy/b+XPd+GDmoMHe6",
	"MQahdXxcY9eGU1LWaD6cQ4gVvcSCxPUzm5+515sJ4RVjia1pV1txcZfs9K6lObDvtli9vlYOzbo5V61Q",
	"q3k3RdTOU17LkEk96sOTyenk8Obg6N3k1OulX98dv3t9fO71vLPz44vD84n64vLS1/iGSu+cAY+IEArD",
	"dr5XNnQLymk6OQnQFZgTkhaKMxMrqzOxck+UmSeMXiTTiEilRfIwROEsRoS1GA3tIcyxvzwsB8y76cG4",
	"QPZNjrRZUHGjVkV+06tG6bId3H/MOXMEYnzriGZWf3e0W49O9rwIhMDzclfvHL4kICQEiINgCfdBoDtr",
	"u2YsocFGe+0b85xCLwi3wdexEJfZsN4dCYBKMiPAByaWkar1nd2Slldf11yLbPAhJ0cus/MOJHaRNzFc",
	"6Ij3pmD1SMdCDftZr6yRi7/N+j+IC6EwSTZycLacC9P9oVzFPJRYt/iqreBPGJEt+FvY1xuE5AJLRAEC",
	"gSRT/llkRX+wyT1wxyvX+5jV3Stwfb7n6xjiIiN4fcl+wjlQicympCuPCnBTi3J2fHo0OX3r9bzzq9NT",
	"8+nw/buzk+PL4yMnUshO7GL/tM+VXmqdZbdkkgp9LRQXcnbidXRrb1/yfVg5pnKZ8AewOFPC5eLIUi/X",
	"sjuj8U5/9LL/Qp3vSjLyaOGpbz0UzJIwPG30w1VryRmPM7O1wRXf5rARYiGv4pDh4BwiQgPg30abiDec",
	"7yIIiI9De2drQ2Wdl/iNPkHPE0kUYRMJbTH4wvZWbI75HOQR3BK/4oPWwwYV5n/4s44+yGdsVJSNluee",
	"Na6QbXqMM0+ca4EWxK+tOueS+mmnGesuS2yvApvnW7VAao2KPCtzeIXgiZAssIfG2rIoM8qx1pBoAXc2",
	"3RK4czTUF+E+BdVoepHLV0XR164c15G3ckGplCbhQurLrJZJGT3P3l++wxTPIQIqJ1TpIGk8/fqlXK6r",
	"9YXfL7sKyILMFxaNywUHsWBh0GG40q/dsDYaWUttau26DFQ73XEcu/uGBbJEalwvCPU7TBoD94FKpZcO",
	"3767EtBhysLYCf0TmS+2HXvC7rYdeqnNwbajfwO+/BbE1fguyBfE2SpRawcHt+M1wtxZHbqsXwrrHETM",
	"qHA4v4GVjxYTCHPa3txfHxsdaixHw7Xswn1c0cn8mpJ33/t5jJ7t7e09R3t7e/3xzngnhxNhoh3V8uJo",
	"Bm6DayPtJXGXA5UFfl29LjxNuaG2xIoH6LrdJ3SeZ0qYkw2bIYzSoUiNRZOjAXofBkjIZQhociT0Zdd4",
	"1A/InKgDloIjkM+oIEInXLAZYjRcogXc4wDuSaTcQd1bDNAp3FVAvfjFgvpwdTU5Qre7188WUsZifzgE",
	"Orgjn0kMAcEDxudD9W14RcktcIHDcHljonI3ecjjD78BV7brZvfmGcc0YNHz5+ULuQfOB2sKk1Sp2PrU",
	"cJlebNkDauFaS3/cyT++yD/ujkbl3JvSsPLtH3Dl3CI9kYNBLzmZz4G3C7ysPcxVuNg5rMDTtYkdfG0s",
	"ZkqjMlrpleD6k5GNOxURq15uFSZpREFt6xFITEKH/9Z8ctwk9WUUipP0HL6bAD/hRC4v1OpshAG073bJ",
	"PgN1JUxlfGk7Iql72my8BeBAr9pmyt33pe3ft/37af9U/8fkz7A0SXCEzpiJ91GJfVmghCeSOGZc/ksK",
	"TolzPk2KlDrIcNU91QB3d3eD0pBVr7Kiv8AUCcvROoAlJOMgkMJF0V4tEU9ZIm3AS/TyyJfQF/hyAYSn",
	"R1NF55D4YA2Yxe/1xVF/p38Y4kQblDKOcyIXyXTgs2iYEUspKzPNcBqy6TDCQgIfnkwOj08vjut3JAId",
	"nE10JpDWXt6+Nx6MtIoI2VzTFIfyEu5lUbOcqKa22KSjDmJSQgkLAVIMSYTnkAcObhTsmxMyX8ibE+UC",
	"DWKjHEoMoanenhLajYyB4ph4+96LwUgvMcZyoTl3eDse+qUbFet5uXLCBQqJkNpghWG+oxYA4sVDGCIm",
	"T8HkWw3QhCpbgEMENDBpg4mAQCeXcFBcqvMJEx4zATrJR4m2BqcsqXdChDwIw8LlT6/0YOGDWwPlXYY2",
	"K3rV29jT5Ga36FjLbe825pgG3upaZ5tpr0mTX1kaK832NI/jOFQnK8Lo8G/CmIY8Z/ZBrg5LXuWqJu7v",
	"/2wUX3r81LuBDsIQlfbjvk/sJtvLulWvwl/DryZKvbJ/28xw2MFyIktH0okL6msENuLlZBwr7m8YL15J",
	"PzL7fOvGbrmfov0GplpQyWDprt5mt6aBoFVXWtmriNX1GgYwCRa1h0cPCnz4NU33WG0/z+YNz3JK1uIU",
	"5dm4FUS2S5avujHXJi2xLkqZ5tUHhEz9SoaA4mkIiMKdlScE9zFwAtRP0/6a7q0G6YWvQHfMJMdkN1co",
	"oZKEhVwXFBh3Sh89YhYnoXlRRIP8dkjJMdwrgSAyXKLPxP8MQZ/NZmi6RNOQxHWbcKzRP4U7w7zHGe7e",
	"o4teKyEz+KViVhesnpfpy+tN2nOtpuQEbs1jslRZ+tmcjdqwswZsbRbbq8o8T+4fxNpu5oxG/dvzdh9w",
	"MpOj4JjqNQ6QTY4wc754/DnfMD4lQQA6QrP3FKvMdJo6VwNHaccmG+ewakribH7dB+9ycnR89v79STXJ",
	"qfLV/Dc5ODVG0alubT4MLqjVmhiaPlk6Jzf79ZoFy0fQU6un0Ia9EpD7KCzDqJ6i10tIG47ezIHdOcZu",
	"XZ5mu4Zlriv62eiyG58FMPya6bXVZrWd+rLIEAfdEblAuJBjX+Oet2B1+OvlRSHR+EcweW8hFTlltssp",
	"7xu9SocfJErr2+4l7nVlo76mb9e7bM50ifS9cMNOfDfy97yQ0M+pd9AvH+XLyObtIu0XFAf0nBUAiBr6",
	"k9VQA/1wdJC1GO3ynaU25znvAXR6J5coq4Kgve/EwUkmpIgwRXBvQ/UNNsH0fBqb0FVbr76bdvle3GVj",
	"vJoJytHdD9dqs3P2szvcnQNrFiRXTC1Dck1+vw2HiAFacwDYKohmn7w/6CGg9bnChLVbdNQFAJ4mANM5",
	"3GLJ/s0xlrLqWX/wL575/bp7aqI+zR6qaX88hWSeXzQpmQ2kLflsDfGrNnKW/lXn06/MxCG43uSdQ8Ru",
	"oRyEnHEWZX+oEfNIQyoTs/NCDZBNgbpN7kwWKE1VhSnmYq5jbM5ys5vTjPzDs0MHX/OBwpa5SPVa9jWP",
	"LzYZ/4rld4lb0fj/0OJWsnadxS2Ny5bN29aKr8tE3xQL7sIZTdHg9vgN/fJrTrcacmp30xll7zmDgo7K",
	"6le4lNPEdH8YHWWBbaWrnMviqQKrrWrgUlYtF/OddFZL6jwJh+qbYFchJOc24KwATtH2qQZtOup70ViV",
	"53H0W+N0T3KEacsDjjJCioaWLlto07iQUPiIujSd5sfSpJ2u1VpVLWx9sWZTp+x7cSIJDkuvncqyYHtP",
	"TMdivtVjiEItreuRRaA00UYRSCnnotq3XJLVGSNN9XfaGnUsK72sqp+VS82PT712x8nMn3c9j3PErCs0",
	"6z25pNjnzMXnSMLkvZbul/PL5dpeWAgn5ZfPZ3n+2GMI0Qbp2Xka6TlIK06UmSClqSFJwZYUiPLwspTl",
	"MzQKlXJxcOFef7pcd64s68EfQjmpBZQeYVakxfn+W+cabytHm4pxtbCVWVZMN4/OvGAziXrZq128xoqZ",
	"899jW6/qy9ofynjZI3BxUKPgFF2zTaGZNIZbVpANISVlmwqC/g8UxdXFRlW/Stk08wQHz83TXGKe6B6+",
	"fYdM+q+zbql9Z1N/71SUrjw9/2MyGr2Afx4N9iqvE2zD7+Z/859vv/rPP34MPn4c6H+DPzrL0bZYzBRC",
	"dof2dlE0HwYn7ReUv0fasKZfn35NhCKO6RzQ3m7/11H3lf3gq/p11B+/3GJZ9vnaD7yy8ctRf2dvi6Xp",
	"d3U/3sLwlN2CXdtW68reDH7ntU3ScuobkC8/R33DWbRFXfXq5Mf320x+ybpP/ZhXc7W3iK0v6Jod50e5",
	"nssSxdKH52FWFMbk3uZP8l13cxbbAzPkkRyxvFrAozpghWl6LS/80pfz+fo7RM7yUFZW2X7tlZ+Ja4t0",
	"R8rXfQOdiUA4CO1H221Iq/ngANQRKEskwkFEKGImamQr5oRLhBO5ACoV+SDIigdJhiLlzRcPzogEg4Yg",
	"fl54orJTu45Cvgwd2q1zxvALRSy63zKmqHa+ZmxcwffhNXUUXEuIxwt+5j+50OWCXykOfcNvirCX+bWQ",
	"g5SYYPMavaJsyiOG6su18n5c9aIpd5ySrSlG3/L+tyAWeH0aWFEO/l9odUuqNcLWTZsPK8WMnkxQ1/BB",
	"ASXzajYzCgssELuFgtHPQ6ET8/StOBhzZWZu2WcIEBYIIw4iCWVa8MkEdXoloxFzNiMhoDsShsoucZ3E",
	"Ehj+LhRz/0g/0vc0XOZRCB9T5C+0a60B5ngM1jNvuabNI/JxuTLlU7B0ZcaO3F2t9vNwnD78mn9pkcOE",
	"MBKEzsPirv4f5cySg5TT/yFdJVQC+72chZ77B5zKK24KRKflL/JSWLaIVVbmyhbCuu6SZu9mWwPwhtvK",
	"eE+qpJ3e1AXQQCCDFkrRUi54uYhema/UoHKJv+0yZxQcZAChAqQOuiEtxPE0aaT24sBqiawWBHG4laXC",
	"Ho9hBgoTfGteW1p+ZPMlqt0IJ2sX6iB2243tnP67BfEXdkfMGdQigAg1GtoqqPQn/cyA/GRpD2Qb7Hla",
	"fa7rJtowmih87o/Vl+z3perl6+xPXqU/cJX9FtV4tFcuV+ftjMav+qOX/Z3dy/Hu/nhvf2fnr9768nSj",
	"weiXptpzo2JVuSbgtSpy6zvmVeMa+7mqxI1q9d+ahjvqvY0Gr5y13EaDsatO22gw2msowjYa/NpYYK0O",
	"LSuepiAWfqSta03QDnLc83bdVluiN7oSuEvSazy9jci3LWahr8RL5SuMxIlSqGRD6Yr8aPQPXLhiTdHO",
	"rcpWPGBwplpXQn1373GHjFzlSwc2eIipzYRI0yi1x6yfe6aMIRew1D50gS94MWt/gJQbPJkV1HaZiXLP",
	"XdsBa5e1b21zgwveTN9RuGfgmIBRfdUSqRXo+KW5m6bLNnNliaJtZ1OfdakKGypds6b9j7TvnMuauh4K",
	"Ad8SOi8Wo1AUZ4lEmJoZCjCUkFJG+3lEPjedxdpGpV9yUeM/A8RGxFPPuTyipxrZXRp607Xe/RCTqB78",
	"tyyBKdLvnRqgZ50xDVCAJUZwC9T+rM9SHY3+57/+W1fl0NNAgO4WJgDLARFhWtM50t8bzBN8A4OEWiTO",
	"AuyuE9WVAP6Gsyh/Z9/a+domU61DFsyWvqwiri1Xkv3W1iyRiSKbzH5D6V4CDUAH6G2RtYxTrB82WPvG",
	"o1xj7vGc4uI8Tpva5bhrfWRdWzFHvm4mW72f1C8uXQlVIdOlK+EWQhZHRrnn1db2h0PdYcGE3H85ejly",
	"pJIEoAuvlku0qT8OAritVrarDv6C62O/YD00RWgziB0HiJ0uIPSPdWQpVmVQivkUuQeFTpvgxZwFie8E",
	"h2NSGX2dyWYt4zmtgneQX1cZmDbOgBO5cEyfjTsieKqNoXaws2G6SO26YUrBHd/H5neK0x/+Nt/XDMve",
	"5JaS8fSI0g99F//iMzojtoah57qgrygQ44dYo9SXLK3Qh3wWRQmtUSgTltX16n8DAAD//8CM16WCfwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

