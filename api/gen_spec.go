// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/0p562LGiwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

