// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"y/+YAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

