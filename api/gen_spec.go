// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
