// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

