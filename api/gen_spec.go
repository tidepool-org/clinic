// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"oiihNQplwrK6Xv1vAAAA//8FGXwd1H8AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

