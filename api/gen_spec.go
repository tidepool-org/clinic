// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/wIAAP//OPcjGPDjAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
