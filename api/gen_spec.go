// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//lPkEMOR4AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

