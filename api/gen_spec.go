// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

