// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"LK+X/xUAAP//UmEoWnyXAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

