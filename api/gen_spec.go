// Package api provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"2+X/BgAA//84S8l+TGAAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

