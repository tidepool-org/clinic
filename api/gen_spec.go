// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

