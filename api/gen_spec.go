// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

