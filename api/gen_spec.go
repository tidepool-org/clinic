// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"ACARumO4IKQh+B8BAAD//1V1AdAy/wAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
