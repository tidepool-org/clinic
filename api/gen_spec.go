// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"lArL8nr5/wEAAP//PBspK2S6AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

