// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{
	"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",
	"OvPmaAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

