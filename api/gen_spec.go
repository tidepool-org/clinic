// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

