// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

