// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//952pztp4QAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

