// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
