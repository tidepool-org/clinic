// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
