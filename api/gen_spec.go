// Package Clinic provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"github.com/getkin/kin-openapi/openapi3"
	"strings"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xZX2/bNhD/KsQ9q7G7xi96a721yLZsQTZgD0UeGOkSsRP/lDx59Qx/94KkJEu2FKdN",
	"0jaAAgQSSN7x7vj73fHkDWRaGq1QkYN0s01AqBsN6QZIUImQQlYKJTJIYIXWCa0ghZcnc9gmoA0qbgSk",
	"8OpkfjKHBAynwquBWS2VbuAWyT+0QctJaHWWQwrvkJaNXovOaOUwCP40n/tHphWhCoLcmFJkQXT2wfn9",
	"N+CyAiX3bzm6zApD0bA/rz9gRiwOXgt1yzhr7TfW20AibsTz3KILr6gqCel7IHQEVwnQ2njHHVmhbr2j",
	"Ig8B2R8udTRrcFIi8ZwT70zqYJ2fVFyin5BC/Y7qlgpIXw7sawqt8I9KXqMNhgpCGV76rqiwYtCKOHAw",
	"0c50bKoHuLV8HVfUAGgPqi+SwKcX+IlLU0Yr6vdebOHVfD5n51wolluxQoixhMXp6QK6AYR/eKkqYkuL",
	"+C/0oteGC37VhWLnlbBwGJomBrBYLF7U/4udzZILBdvwl+xj5rfgrauk5HYNqQds7bI/Au3oEGdLi5zQ",
	"Mc7a4PTxfaFdF+AfK3T0RufrCdsTtp8Q29vhbHoE8FlAc4P5bdJk79kmPkW+jVpKJDzU93MYH2NCnI2T",
	"y1od3NvMbXKkfhxROXFt4tqPUUe45RIp7PJ+A8JL+NsStFZlXSR/rITFHFKyFSYdmO7H/yrcubLiEMLn",
	"Ohc36x1q9+qTFxpg0FSoJvL8WIVquB7VI4KrdpCrI3XqEqVeIePO6UwEl9l/gooam4yrnLWq7lXGls3q",
	"5c4C+KoK3NUuuHqr7ZNnjuQuVa0nD89Dr+tw4y643bDfJzONxvnrslWft9GMs+Hk0po8Mj+SkwxaKXyv",
	"3E8YI4lhlO2tx5dYBmdcIcxBCngMNhlOAhXNNvXLESbFcVYvZjdWy7HjHOLNRZS7aPa6N2cSOB2aesNz",
	"dhnB4NcshtacKUKreMn+QrtCy36xVts9Fka3arPeWi2/EwlNLzCPdhVoDrnOd7YPqqMsHDy1J2fgGMOi",
	"FWd38e8hBKy9fGz6ddHG8yakf+tj3xte53nLNtKjqbP96DCd2bdKma7zibMv/A6JlcIR0zfN2bn28oH5",
	"nUXwoL29aHZ7YJs7cnl95sd5oOULmjPBlfsW962rHYzGMXOJZAWusAVOLXDCQoETFh3juRSKcWMYr6jQ",
	"Vvwfr++jGHo80Ex93tTnfUmf9xBedj9EusHOzx3/dckdtBDfJYM+izbieSRRv3+4wUfFlS0hhYLIpLOZ",
	"R3hZaEepZwJsr7afAwAA//9GqXf93hwAAA==",
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file.
func GetSwagger() (*openapi3.Swagger, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	swagger, err := openapi3.NewSwaggerLoader().LoadSwaggerFromData(buf.Bytes())
	if err != nil {
		return nil, fmt.Errorf("error loading Swagger: %s", err)
	}
	return swagger, nil
}

