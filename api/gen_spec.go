// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

