// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"h2Hs/gAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
