// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.9.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+R97XLbOJboq6A4XXWT29SXY3cSV92a69hORnccx9cfPbsTex2IhCRMSIANgLY1aVXt",
	"a+zr7ZNs4YMkSIISKVtOevdPIhnAwcHB+cLBwdE3L6BxQgkignv737wEMhgjgZj6FkSY4GAcys+YePte",
	"AsXc8z0CY+TtF82+x9BvKWYo9PYFS5Hv8WCOYqghCoGYHPxvn2FvOuy9vfm2s7v8yfM9sUgkGC4YJjNv",
	"ufQNRAzJmjl1j5bTvvg87L2FvenNt9Fw+Xv+5c2yl3/ebfF5tLN82YA1Q1Cg8BLH6JgoxEPEA4YTganE",
	"4ByJlBHAUEBZyIHpDiZoShkCYo7ADN8hAkIoEHiBHoIo5fgOvfR8TYHfUsQWFgnK09mrnlIWQ+HtexJU",
	"T+AYrUP4QkAmWqMMpwKxGsaYtMdYz7cBziiGOMqZojKBbnRCzZrqEDG5wwI1clrevIrNYkxOEJmJubc/",
	"cs0R4RiLJqx1ow0uRFOYRsLbHw19CRvHaWxDxkSgGWIKNJ1OOWqEbVoruGp4Qye8BAqMiGikR9H+o8id",
	"wegSztYhrbs8mZpiNEJNhFdtNuT6cI4gC+Z1oXufRhEQ6EEA3QNkoF3zGCBrZppDhg5p2Iht0WENIOrS",
	"EheUCUBZiBiAJARQCIYnqVJi/Vkf/CwnAZSBnvzQpBwUaPdWvPjzfu/36+ufX7748/5n2PvnQe/vN7/f",
	"vvzZuSkpR6yRD0zjKg74iaGpt+/9aVBYxIFu5YNLHKKE0uhKg1kqkug2OfSAcxpgKNBhZp0uqeyqVsNo",
	"gpjASPUskHRwVY7a56zfje8JLCSzFXOAfJKCDHTyDxQIb+l7B3eIwRn6EKUB5ai+Ze8iSkMw083gDkYp",
	"8gEm4Esc02hw8sXzqxgTrF0DRKTu+Ozpjp6vP0QSR/QA40RhmTdmaOv5rggW4IVufFnbPd976Ak44xL6",
	"ERTQu1n6nkKtjv8BmEYUCkxmIKGYCL0EwFDCEEdENcB8Nbq171ko7vX3/MI6KGByLfBB68a9Pb+sKEvr",
	"+FVNVl8ISeMJYq6FVPdVUTNb3U0Vvtk2xwxmh52k0gxRp5X5e3VHYRgyxLlDnAVDSADTLqlWMW8GV9Pv",
	"wMCpCaPvBZB8xDMGhdpBhmD4iUSLTOZM9wmlEYJE9cdi4cAfiwWQAlzaQO8MRhQcRII2IigHOtFSBLnA",
	"/0Q2Qw97O7tvPd/b2Rv2dt/KT3vDYe+t+jQaDoc/q31yw7pUfy5gJYze4RCx24TBQOBA6tU5gpGYB5Ch",
	"W77gAsVy/6WPjQlki9sg2yUq5oqHJCNL3Y6YnHilh+F7AU2JYC7i6QYH/a4uDpopZ8C5ZiqcuEa3rWGn",
	"CyA4XKdqpXrN1HZ1TafKnkyVA6rJZph0LFDMywtRzUCOcC2m8AuUHGA9fjVmZ/kYCcGAhIzBhYI4pwSd",
	"Kj3gEK0DAlRPib3qCbTKUFLWbvYCvpzOuWjVB5QwqSDqSw30W4rMWLlLEnfKBYwyP6GM+ZlqAwENUR+M",
	"iaL9Vf+i7wOxSHAAo2ih/vZPnKhOgKfBHEAOvrzdfTUcfZH2X3/sjV4Pd7+UeVE1NHKjmdv4J/VNZGiK",
	"GEPhu9lVzUrNBmFupE6cElxyjsqL/hDRiVqZphZQXfXyppQBmHEfuJyXGjEHr8CM0TThcqd3QZokiAWQ",
	"IwCjZA5JGiOGAxDModQPiHFpexEM5npUHxzEEzxLacrtPjlJx1+Uo/Vl9MVXdP1kvg+/AImDOjqGKJQ0",
	"th3ag3eHR8fvP/zl//315OPp2f8/v7i8+vVv//Kvf995tbv3y+s3b7XD/XS9fnKpgrJgXiiiNe0sF8Z0",
	"VA2U9H8oA0rNkqCZIzmNkZhLZyDCXxH4cnigGfEQRnhKGcGwwoiHByvMnUTGgaXA2sUroMi/DEfDYQ3W",
	"WsUoRx7Zi7XBvmcIdQeZJuHjFfY9mnAsygBSht3HIsvRwWHmfPulQ4blGZRNShnfOkEMuR1Sf1NlLpdf",
	"XDjNNa6SMvwFh19ADBdgggCKE7EA2DYzGBKg4wFgDjkgVIAJQgTAIECJMAJXcrKexFrmMY810QzpFc5o",
	"bwNrWz3YlKMidTrhMLO/hhx4CrCQRCH/q0ITl8S4zboETGqmXR9w1rg/8rS91nTme3+uej+NaFT4PdsY",
	"jdAq1q6xa8NJLm/UH85RBCW9+Bwn9XNlkB8B1hPCswOtrWlXW7G9S2Z619Ic2HdbbHsHbdWcy1ao1fwl",
	"G7XzjNdyZDJn4/BkfDo+vD04+jg+9fzs68fjj++Ozz3fOzs/vjg8H8svLj9khf8q9c4ZYjHmXGLYzpvL",
	"h25AOZdnqxu7AnNCUkJh/Og6E0uPRVp+TMlFOomxkFqkCJVY50XMjRFpaI/QDAaLw/JtQjc9mFhkb3cw",
	"sDdqafObWjXIlu3g/mPGqCNYFBjfNHcEdoe79dCt78WIczgrd/XO0W8p4gKFgCFOUxYgDu6N7ZrSlIRr",
	"TXigLXYG3RJuja9jIS6zYRw+HCIi8BQj1tfxlkyt7+yWtLz8uiIYu8atHB+5zM5HJKCLvKnmQkcwPAOr",
	"RjoWqtnPOGqNXPw46/8kLoTEJF3LwflyLnT3p/Iei3Bn3eLLNsuf0CJr+VswUBsExBwKQBAKORBU+mex",
	"Ef3+OvfAHVNtaZuLHV61/Rc5eesLDFLGEBFAb0G2ztiCm9mPs+PTo/HpB8/3zq9OT/Wnw08fz06OL4+P",
	"nEgBM7GL2bM+V2phdQbdkCUq1DRQXMiZiVfRrb01KfZh6ZjKZbCfwL5MMBPzI0O9QqfuDEc7veGb3it5",
	"wCtJxNYCZo89AkzTKDpt9Lpla8n1TnIjtcbx3uRoEUEurpKIwvAcxZiEiD2ONjFrOM3FKMQBjMz1tQm1",
	"dV7iIz0A3+NpHEMdm20x+ML0lmwO2QyJI3SHg4rHWY8bVJj/6U826iSfs5EtGy016QrHxzRt44STFFqg",
	"BfFrqy64pH62aca6yxI7B55Xn2pWzNOoIs/KHF4heMoFDc0RsbYsQrVyrDWkSsCdTXcY3Tsa6otwn3lq",
	"NL0o5KuM+hQzLtT1WMv8Et+b49nc3L5dzhnicxrZi7Au+Aotqy4Pf9nNVFu3CbUyVAKTGZouAyWRO46j",
	"949YIE2FwvUCk6DDpAlimIa8mwo8M4MkY1ABoyO44OtQxUSzGGKLvzxuKyWIk0fQymJno0SMHejfjdYz",
	"s167w3ep3euvomclC2Dpe+bG/yMkcIZiRMSYSBsp9LmzJWnkLh9++HjF0UdMUoHa7kox7gyxAJVOXe3n",
	"PNfJaB3mHBPJC91x1eM2w1WP3QTXE3q/Caon9H5TTE/o/SaIXir3ZBNc9chN0dWjN8H4V6MWNsE5G7sp",
	"1tn4TfHekC3M0Mdg3ZE9GhWfNgId1J/DGxnthpsYkbVYcRdacnFc0CTCs7nOsAzlIt++nc7SOJiw+2Su",
	"AFsZATWEcehMsMFkViQr6aM8nQKYB+mAcrefPDz2SS0MjDveygg4AyHmSQR1IkkFtWH1DGVjdn39sDPq",
	"XV8/vD6++TZa2t+vr/nN//6pwx1i3fkGkujN7PSEiR2mtTO4VbDOEU8o4Y7gTGicyBYTcB37Xd9fBTEd",
	"bnaBhouQVr6JHQT5lmmAfe/nEXixt7f3Euzt7fVGO6OdAk4MMdEpGvbiSA5uzdFbmLSqLuE9A/ymmg5z",
	"mims2hIrEYou4poNBXIsGB/1wacoBFwsIgTGR1xlY4yGvRDPsAAaYQ4CSjjmKkWRTgEl0QLM0QMM0QOO",
	"AxgB1Zv3wSm6r4B69YsB9fnqanwE7nZvXsyFSPj+YIBI/x5/xQkKMexTNhvIb4Mrgu8Q4zCKFrf6jui2",
	"CMD/6VfE5Nnqdvf2BYMkpPHLl+WMkSdO3W7SSlUqto5qXWaZFyaAauVdqI87xcdXxcfd4bCcrVoaVk5P",
	"QewOBwhcYpt1LAQYns0Qa3cNsDLYaIllDaiDZ/WRMVt/ecosH2V1VM7ccNiiowZagmNN0oiC3LIjJCCO",
	"HNa6OWq5TqLLKNiT+I64AUdByrBYXMjVmeg2UnGDS/oVEVf6cM5zpiMQqqfJTZ8jGKpVm7zxh54w/Xum",
	"fy/rn+n2BP8VLXRKOCZTqm+WiICBsCjh8TRJKBP/NwMnRbWYJkPK872Uye6ZdN/f3/dLQ5Z+ZUV/QxPA",
	"DbeqqxIuKEMcSFwk7eUS4YSmwlytcL+4Y+Eqe0zMEWZZWFTSOcIBMsbJ4Pfu4qi30zuMYKqMRRnHGRbz",
	"dNIPaDzIiSUVkZ5mMInoZBBDLhAbnIwPj08vjuu38RwcnI1VXqzSTN6+N+oPlfhHdKZoCiNxiR6ErTVO",
	"ZFNbbLJRBwkuoQQ5R4IPcAxnqAha30rYtyfS/7s9kceOfqIFv8QQiurtKaHiKAkiMMHevveqP1RLTKCY",
	"K84d3I0GQenufoYan2ZxEGEulDGKomJHDQDA7AAgwDpJTmcf98GYSD0PI4BIqJPoU45CldnIkORSlV2f",
	"soRypBJUpWgrcNJKeieYi4MostIM/NK7wc9uDVR0GZjHSUt/bU/9RKpFx9oTs25jjknoLW9U7rXyiBT5",
	"pRUx0myOUDBJIhwoUgz+wbXaL16QPEmSSsljXNbE/dNfteLLQp9qN8BBFIHSfjz0sNlkkxay9Cv8Nfim",
	"70OX5m/rGQ46WI7nubAqRU5+jZG5bXEyjhH395TZyU9bZp/HbuyG+8nbb2CmBaUMlrLCzFuP7BJi2ZVW",
	"5tJ7ebOCAXQqX+3975MCH3zLEguXm8+zfsPz7MWVOMXF25QKIps9Hau6MTc6pb4uSrnmVc5/rn4FBYjA",
	"SYQAQfdGngB6SBDDiARZznlThkQ/Sy3i4J7qNMw8RwKkRODIyqoEoXan1LEioUka6Ye9JCwyE6Qcowcp",
	"EFhEC/AVB19R2KPTKZgswCTCSd0mHCv0T9G9Zt7jHHdv66LXSsg0fpmY1QXL93J9ebNOe67UlAyjO/2m",
	"O1OWQT5nozbsrAFbm8X2qrJI0v6DWNv1nNGof31v9wkn09lwjqnewRCYNDw956vtz/mesgkOQ6SiL3vP",
	"scpcp8kzM2Ig69hk4xxWTUqcyeT+7F2Oj47PPn06qabTVr7q/8YHp9ooOtWtybyEllqtiaHukz8cYHq/",
	"3tFwsQU9tXwObeiXgDzEURlG9RS9WkLacPR6DuzOMWbrigcdK1jmpqKftS67DWiIBt9yvbZcr7YzXxZo",
	"4oB7LOYAWg+8atzzARkd/m5xYb1y+RFM3geUiZw02+X3Vmu9SocfxEvr26wgxk1lo75lJWS6bM5koS9J",
	"Gnbiu5Hf9yJMvmbeQa98lC8jW7TzrF9oD/CdhXjULdRPRkP1VRmFft6itct3ltqC57wn0OmdXKK8GJHy",
	"vlMHJ+mQIoAEoAcThm+wCbrn89iErtp6+d20y/fiLhPjVUxQju5+vpGbXbCf2eHuHFizIIViahmSa/L7",
	"TTiE98GKA8BGQTRTAOZJDwGtzxU6rN2ioyqH8zwBmM7hFkP2R8dYyqpn9cHfPvMHdfdUR32aPVTdvj2F",
	"pB/6NSmZNaQt+WwN8as2cpb9Vb3cWuqJI+R6EH6OYnqHykHIKaNx/ocaMY8UpDIxOy9UA1kXqFvnzuSB",
	"0kxV6Jpq+jrGvI5pdnOakX96dujgaz5R2LIQKb9lX/3Mb53xr1h+l7jZxv+HFreStessbllctmzeNlZ8",
	"XSZ6VCy4C2c0RYPb4zcIynUD3GrIqd11Z5BXDggtHZXnmbmU01h3fxodZYBtpKucy2KZAqutqu9SVi0X",
	"8510VkvqPAuHqptgV1lA5zbAvBycbftkgzId9b1orFG3Hf3WON2zHGHa8oCjqJ6koaHLBto0sZIFt6hL",
	"s2l+LE3a6VqtVfHg1hdrJnXKVCbBAsOo9NK2LAum91h3tPOttiEKtbSuLYtAaaK1IpBRzkW1x1yS1Rkj",
	"e2bmtDXyWFZ61Vs/K5eat0+9dsfJ3J93Pc12xKwrNPOfXVJM4Qz7KSzXOa2l++Xicrm2FwbCSbnGxlmR",
	"P7YNIVojPTvPIz0HWW2jMhNkNNUksWyJRZSnl6U8n6FRqKSLA617/cli1bmyrAd/COUkF1AqAFCRFmel",
	"EZVHvKkcrStN2cJW5lkx3Tw6/XpaJ+rlFSPgCiumz3/btl7Vqg4/lPEyR2B7UKPgGGV3K8zTkM6RXAMA",
	"KAAuA2W/PdkiiexpWkc8rWczzxXzLN2+W8RrCHBar3C2w8n2M59Hhjgrj5DanxNsJhx8s6vTt4xzWnQs",
	"Rzp1KjeczVBo53K7AgwVSm8aWlhDhG0em0tl/VvH/FbxoO77h+BBs6zH8iBvc+WeqcCyp9gQW7d04B/s",
	"Okv9BoHsV6l9rB/Pwpmuj4N1nZzDDx+Bfgfh/DkD89g/e1462g379ffvtstRvEe6TofDV+j/DPt7ledY",
	"puF3/b/+LzBfg5fX1+H1dV/9G/7Z+ayyxcImKKL3YG8XZJWTuyyu9tx4zfpeP//6MAEMkhkCe7u918MN",
	"V/nHWOHrYW/0ZtMllp/o/8CrHL0Z9nb2Nl2m/aL/x1sknNA7ZNa5+RqrlQu+8zrH2c9ErVlIucDNe0bj",
	"DX4vqjr58cMmk1/S7lPfbN/1Lx5ud/X/n933z6pIRXk9R/2YoaivteIscKCHbNcX2/aJ1prG73i8KNa/",
	"gXuXHy/WnC20N89z77h0quir1C7MEFcnYrMNWSFOGCIwWVhHkDDGBFAdhjflL6MFgKmYIyIk+VCY1/0U",
	"FMRQBHM7Eglw2F99aKmfWHYdvxNCwaHZulUnl83SNjJUO+dtNK7g+/DaByRWE2Lrx7eOGVNScaiUKf0b",
	"T2V+tZI6U317t0KvSJuyxbvPcpnrH1e9KModZ2RruvTseLhedUAsHbL/52j18oH98dp8UKlM+myCuoIP",
	"LJR0GYLcKMwhB/QOWUa/uFsa67fE9mDIpJm5o19RCCDXlZHSSGTVW3WU3C8ZjYTRKY4QuMdRJO0SU9Gy",
	"UPO39VtR1+SafCLRoohmBJCAYK7cbAWwwKO/mnnLBSq3yMflovLPwdKVGTtyd7V059Nx+uBb8aVFsBRA",
	"wDGZRfau/jflzJKDVND/KV0lUAL7vZwF3/0br+UVN93sZbWCirq2piJtXrPWVLW96fJuyc22GuAtM2Wu",
	"n1VJO72pC0RCDjRaIENLuuDlithlvpKDyvW6N7svkHCABgQsSB10Q1bZ6Hny8s1NrNESeXEd7HArS5WS",
	"tmEGrAkee2GQ1XNan5ViNsLJ2lZR8267sZnTfz/HwdzsiD6DGgQAJlpDGwWV/VS5HlCcLM2BbI09z0pJ",
	"d91EE0bj1ufeSH7Jf762XrjX/KJu9vu5+U/djoZ7S9+uXe3tDEdve8M3vZ3dy9Hu/mhvf2fn797qWr7D",
	"/vCXpmrWQ7tOdRPwWl3q1R2LOtSN/Vy1lIe1itJNwxMdvLzMr1DkGt+W/q6jufLvo8rfT+i9Isle5e86",
	"yC2bXldaspipC5q549AQrd+A7lrgv4Mc+96u22oL8F79iI9L0ms8vYnIt60OpHKMSvWAtMTxUqhkTS2g",
	"4mj0B64EtKIC/0Z1gJ4wOFMt1CO/u/e4wxMH6UuHJngIiUkty/LSlces3s9njCHmaKF8aIsvmP0MSnnB",
	"46mltcs8VDjuygwYs6xca/PWwnJmeo5CaK4JKFG3LrFcgApf6itusmgzV55433Y2+VmV/jGR0hVr2r8m",
	"PedcxtL5IELwDpOZXdxHEpymAkCiZ7BgSBkllPSKgHxhOe1acaXfYJTjvyKUaAnPHOfyCF820vss8qZ+",
	"pSmIII7rsX/DEZAA9X60AXreGZIQhFBAgO4QMT/IuZAno//89/9QVY7UNCgE93Mdf2UIYK5bszmyXzMv",
	"HkyEGgm5SJjH110HqiuO2HtG46JuSWvfa5PM3w5ZhRu6spK4pvxT/sO501Skkmwi//XTB4FIiFR83hSt",
	"zDnFuGH9lW/myjU7t+cT2/M4TWqX065xkVUd2gL5upVs9R5dvWB3JahGVJX5RXcookmsdXtRvXJ/MFAd",
	"5pSL/TfDN0NHRkqIVLnycslL+cd+iO6qlUKrg3+D9bG/QTU0Q2g9iB0HiJ0uINTP7OUpq2VQkvkkuftW",
	"p3XwEkbDNHCCgwmujL7JZbP2giSrKnpQ3FZpmCbMAFMxd0yfjzvCcKJsofKv82GqoPeqYVLBHT9IOSsG",
	"If19xbC8xkEpuVmNMH/RT3bsvwSUTLGpCeu57ucrCkS7IcYo9QTNKp6CgMZxSmoUyoVlebP8rwAAAP//",
	"o1Xpb1mMAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}

