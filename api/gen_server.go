// Package Clinic provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"fmt"
	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/labstack/echo/v4"
	"net/http"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// CreateClinic
	// (POST /clinic)
	PostClinic(ctx echo.Context) error
	// DeleteClinic
	// (DELETE /clinic/{clinicid})
	DeleteClinicClinicid(ctx echo.Context, clinicid string) error
	// GetClinic
	// (GET /clinic/{clinicid})
	GetClinicClinicid(ctx echo.Context, clinicid string) error
	// ModifyClinic
	// (PATCH /clinic/{clinicid})
	PatchClinicClinicid(ctx echo.Context, clinicid string) error
	// DeleteClinicianForClinic
	// (DELETE /clinic/{clinicid}/clinician/{clinicianid})
	DeleteClinicClinicidClinicianClinicianid(ctx echo.Context, clinicid string, clinicianid string) error
	// AddClinicianToClinic
	// (POST /clinic/{clinicid}/clinician/{clinicianid})
	PostClinicClinicidClinicianClinicianid(ctx echo.Context, clinicid string, clinicianid string) error
	// DeletePatientFromClinic
	// (DELETE /clinic/{clinicid}/patient/{patientid})
	DeleteClinicClinicidPatientPatientid(ctx echo.Context, clinicid string, patientid string) error
	// AddPatientToClinic
	// (POST /clinic/{clinicid}/patient/{patientid})
	PostClinicClinicidPatientPatientid(ctx echo.Context, clinicid string, patientid string) error
	// GetCliniciansForClinic
	// (GET /clinic/{clinicid}/patients)
	GetClinicClinicidPatients(ctx echo.Context, clinicid string, params GetClinicClinicidPatientsParams) error
	// GetClinic
	// (GET /clinics)
	GetClinics(ctx echo.Context, params GetClinicsParams) error
	// GetCliniciansForClinic
	// (GET /clinics/{clinicid}/clinicians)
	GetClinicsClinicidClinicians(ctx echo.Context, clinicid string, params GetClinicsClinicidCliniciansParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostClinic converts echo context to params.
func (w *ServerInterfaceWrapper) PostClinic(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClinic(ctx)
	return err
}

// DeleteClinicClinicid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClinicClinicid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicid" -------------
	var clinicid string

	err = runtime.BindStyledParameter("simple", false, "clinicid", ctx.Param("clinicid"), &clinicid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteClinicClinicid(ctx, clinicid)
	return err
}

// GetClinicClinicid converts echo context to params.
func (w *ServerInterfaceWrapper) GetClinicClinicid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicid" -------------
	var clinicid string

	err = runtime.BindStyledParameter("simple", false, "clinicid", ctx.Param("clinicid"), &clinicid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClinicClinicid(ctx, clinicid)
	return err
}

// PatchClinicClinicid converts echo context to params.
func (w *ServerInterfaceWrapper) PatchClinicClinicid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicid" -------------
	var clinicid string

	err = runtime.BindStyledParameter("simple", false, "clinicid", ctx.Param("clinicid"), &clinicid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PatchClinicClinicid(ctx, clinicid)
	return err
}

// DeleteClinicClinicidClinicianClinicianid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClinicClinicidClinicianClinicianid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicid" -------------
	var clinicid string

	err = runtime.BindStyledParameter("simple", false, "clinicid", ctx.Param("clinicid"), &clinicid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicid: %s", err))
	}

	// ------------- Path parameter "clinicianid" -------------
	var clinicianid string

	err = runtime.BindStyledParameter("simple", false, "clinicianid", ctx.Param("clinicianid"), &clinicianid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicianid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteClinicClinicidClinicianClinicianid(ctx, clinicid, clinicianid)
	return err
}

// PostClinicClinicidClinicianClinicianid converts echo context to params.
func (w *ServerInterfaceWrapper) PostClinicClinicidClinicianClinicianid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicid" -------------
	var clinicid string

	err = runtime.BindStyledParameter("simple", false, "clinicid", ctx.Param("clinicid"), &clinicid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicid: %s", err))
	}

	// ------------- Path parameter "clinicianid" -------------
	var clinicianid string

	err = runtime.BindStyledParameter("simple", false, "clinicianid", ctx.Param("clinicianid"), &clinicianid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicianid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClinicClinicidClinicianClinicianid(ctx, clinicid, clinicianid)
	return err
}

// DeleteClinicClinicidPatientPatientid converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClinicClinicidPatientPatientid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicid" -------------
	var clinicid string

	err = runtime.BindStyledParameter("simple", false, "clinicid", ctx.Param("clinicid"), &clinicid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicid: %s", err))
	}

	// ------------- Path parameter "patientid" -------------
	var patientid string

	err = runtime.BindStyledParameter("simple", false, "patientid", ctx.Param("patientid"), &patientid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.DeleteClinicClinicidPatientPatientid(ctx, clinicid, patientid)
	return err
}

// PostClinicClinicidPatientPatientid converts echo context to params.
func (w *ServerInterfaceWrapper) PostClinicClinicidPatientPatientid(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicid" -------------
	var clinicid string

	err = runtime.BindStyledParameter("simple", false, "clinicid", ctx.Param("clinicid"), &clinicid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicid: %s", err))
	}

	// ------------- Path parameter "patientid" -------------
	var patientid string

	err = runtime.BindStyledParameter("simple", false, "patientid", ctx.Param("patientid"), &patientid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientid: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.PostClinicClinicidPatientPatientid(ctx, clinicid, patientid)
	return err
}

// GetClinicClinicidPatients converts echo context to params.
func (w *ServerInterfaceWrapper) GetClinicClinicidPatients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicid" -------------
	var clinicid string

	err = runtime.BindStyledParameter("simple", false, "clinicid", ctx.Param("clinicid"), &clinicid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClinicClinicidPatientsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClinicClinicidPatients(ctx, clinicid, params)
	return err
}

// GetClinics converts echo context to params.
func (w *ServerInterfaceWrapper) GetClinics(ctx echo.Context) error {
	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClinicsParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClinics(ctx, params)
	return err
}

// GetClinicsClinicidClinicians converts echo context to params.
func (w *ServerInterfaceWrapper) GetClinicsClinicidClinicians(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicid" -------------
	var clinicid string

	err = runtime.BindStyledParameter("simple", false, "clinicid", ctx.Param("clinicid"), &clinicid)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicid: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetClinicsClinicidCliniciansParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "sortOrder" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortOrder", ctx.QueryParams(), &params.SortOrder)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortOrder: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetClinicsClinicidClinicians(ctx, clinicid, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST("/clinic", wrapper.PostClinic)
	router.DELETE("/clinic/:clinicid", wrapper.DeleteClinicClinicid)
	router.GET("/clinic/:clinicid", wrapper.GetClinicClinicid)
	router.PATCH("/clinic/:clinicid", wrapper.PatchClinicClinicid)
	router.DELETE("/clinic/:clinicid/clinician/:clinicianid", wrapper.DeleteClinicClinicidClinicianClinicianid)
	router.POST("/clinic/:clinicid/clinician/:clinicianid", wrapper.PostClinicClinicidClinicianClinicianid)
	router.DELETE("/clinic/:clinicid/patient/:patientid", wrapper.DeleteClinicClinicidPatientPatientid)
	router.POST("/clinic/:clinicid/patient/:patientid", wrapper.PostClinicClinicidPatientPatientid)
	router.GET("/clinic/:clinicid/patients", wrapper.GetClinicClinicidPatients)
	router.GET("/clinics", wrapper.GetClinics)
	router.GET("/clinics/:clinicid/clinicians", wrapper.GetClinicsClinicidClinicians)

}

