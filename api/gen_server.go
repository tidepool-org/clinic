// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// List All Clinicians
	// (GET /v1/clinicians)
	ListAllClinicians(ctx echo.Context, params ListAllCliniciansParams) error
	// List Clinics for Clinician
	// (GET /v1/clinicians/{userId}/clinics)
	ListClinicsForClinician(ctx echo.Context, userId UserId, params ListClinicsForClinicianParams) error
	// Enable Clinics
	// (POST /v1/clinicians/{userId}/migrate)
	EnableNewClinicExperience(ctx echo.Context, userId string) error
	// List Clinics
	// (GET /v1/clinics)
	ListClinics(ctx echo.Context, params ListClinicsParams) error
	// Create Clinic
	// (POST /v1/clinics)
	CreateClinic(ctx echo.Context) error
	// Get Clinic by Share Code
	// (GET /v1/clinics/share_code/{shareCode})
	GetClinicByShareCode(ctx echo.Context, shareCode string) error
	// Delete Clinic
	// (DELETE /v1/clinics/{clinicId})
	DeleteClinic(ctx echo.Context, clinicId ClinicId) error
	// Get Clinic
	// (GET /v1/clinics/{clinicId})
	GetClinic(ctx echo.Context, clinicId ClinicId) error
	// Update Clinic
	// (PUT /v1/clinics/{clinicId})
	UpdateClinic(ctx echo.Context, clinicId ClinicId) error
	// List Clinicians
	// (GET /v1/clinics/{clinicId}/clinicians)
	ListClinicians(ctx echo.Context, clinicId ClinicId, params ListCliniciansParams) error
	// Create Clinician
	// (POST /v1/clinics/{clinicId}/clinicians)
	CreateClinician(ctx echo.Context, clinicId ClinicId) error
	// Delete Clinician
	// (DELETE /v1/clinics/{clinicId}/clinicians/{clinicianId})
	DeleteClinician(ctx echo.Context, clinicId ClinicId, clinicianId ClinicianId) error
	// Get Clinician
	// (GET /v1/clinics/{clinicId}/clinicians/{clinicianId})
	GetClinician(ctx echo.Context, clinicId ClinicId, clinicianId ClinicianId) error
	// Update Clinician
	// (PUT /v1/clinics/{clinicId}/clinicians/{clinicianId})
	UpdateClinician(ctx echo.Context, clinicId ClinicId, clinicianId ClinicianId) error
	// Sync EHR Data
	// (POST /v1/clinics/{clinicId}/ehr/sync)
	SyncEHRData(ctx echo.Context, clinicId ClinicId) error
	// Delete Invited Clinician
	// (DELETE /v1/clinics/{clinicId}/invites/clinicians/{inviteId}/clinician)
	DeleteInvitedClinician(ctx echo.Context, clinicId ClinicId, inviteId InviteId) error
	// Get Invited Clinician
	// (GET /v1/clinics/{clinicId}/invites/clinicians/{inviteId}/clinician)
	GetInvitedClinician(ctx echo.Context, clinicId ClinicId, inviteId InviteId) error
	// Associate Clinician to User
	// (PATCH /v1/clinics/{clinicId}/invites/clinicians/{inviteId}/clinician)
	AssociateClinicianToUser(ctx echo.Context, clinicId ClinicId, inviteId InviteId) error
	// List Membership Restrictions
	// (GET /v1/clinics/{clinicId}/membership_restrictions)
	ListMembershipRestrictions(ctx echo.Context, clinicId ClinicId) error
	// Update Membership Restrictions
	// (PUT /v1/clinics/{clinicId}/membership_restrictions)
	UpdateMembershipRestrictions(ctx echo.Context, clinicId ClinicId) error
	// Trigger initial migration
	// (POST /v1/clinics/{clinicId}/migrate)
	TriggerInitialMigration(ctx echo.Context, clinicId string) error
	// Retrieve Migration Status
	// (GET /v1/clinics/{clinicId}/migrations)
	ListMigrations(ctx echo.Context, clinicId string) error
	// Migrate Legacy Clinician Patients
	// (POST /v1/clinics/{clinicId}/migrations)
	MigrateLegacyClinicianPatients(ctx echo.Context, clinicId string) error
	// Get Migration
	// (GET /v1/clinics/{clinicId}/migrations/{userId})
	GetMigration(ctx echo.Context, clinicId Id, userId UserId) error
	// Update Migration
	// (PATCH /v1/clinics/{clinicId}/migrations/{userId})
	UpdateMigration(ctx echo.Context, clinicId Id, userId UserId) error
	// Get Patient Count
	// (GET /v1/clinics/{clinicId}/patient_count)
	GetPatientCount(ctx echo.Context, clinicId ClinicId) error
	// Create Patient Tag
	// (POST /v1/clinics/{clinicId}/patient_tags)
	CreatePatientTag(ctx echo.Context, clinicId ClinicId) error
	// Delete Patient Tag
	// (DELETE /v1/clinics/{clinicId}/patient_tags/{patientTagId})
	DeletePatientTag(ctx echo.Context, clinicId ClinicId, patientTagId PatientTagId) error
	// Update Patient Tag
	// (PUT /v1/clinics/{clinicId}/patient_tags/{patientTagId})
	UpdatePatientTag(ctx echo.Context, clinicId ClinicId, patientTagId PatientTagId) error
	// List Patients
	// (GET /v1/clinics/{clinicId}/patients)
	ListPatients(ctx echo.Context, clinicId ClinicId, params ListPatientsParams) error
	// Create Patient Account
	// (POST /v1/clinics/{clinicId}/patients)
	CreatePatientAccount(ctx echo.Context, clinicId ClinicId) error
	// Assign Patient Tag To Clinic Patients
	// (POST /v1/clinics/{clinicId}/patients/assign_tag/{patientTagId})
	AssignPatientTagToClinicPatients(ctx echo.Context, clinicId ClinicId, patientTagId PatientTagId) error
	// Delete Patient Tag From Clinic Patients
	// (POST /v1/clinics/{clinicId}/patients/delete_tag/{patientTagId})
	DeletePatientTagFromClinicPatients(ctx echo.Context, clinicId ClinicId, patientTagId PatientTagId) error
	// Delete Patient
	// (DELETE /v1/clinics/{clinicId}/patients/{patientId})
	DeletePatient(ctx echo.Context, clinicId ClinicId, patientId PatientId) error
	// Get Patient
	// (GET /v1/clinics/{clinicId}/patients/{patientId})
	GetPatient(ctx echo.Context, clinicId ClinicId, patientId PatientId) error
	// Create Patient from Existing User
	// (POST /v1/clinics/{clinicId}/patients/{patientId})
	CreatePatientFromUser(ctx echo.Context, clinicId ClinicId, patientId PatientId) error
	// Update Patient
	// (PUT /v1/clinics/{clinicId}/patients/{patientId})
	UpdatePatient(ctx echo.Context, clinicId ClinicId, patientId PatientId) error
	// Update Patient Permissions
	// (PUT /v1/clinics/{clinicId}/patients/{patientId}/permissions)
	UpdatePatientPermissions(ctx echo.Context, clinicId ClinicId, patientId PatientId) error
	// Delete Patient Permission
	// (DELETE /v1/clinics/{clinicId}/patients/{patientId}/permissions/{permission})
	DeletePatientPermission(ctx echo.Context, clinicId ClinicId, patientId PatientId, permission string) error
	// Resend Dexcom connect request email
	// (POST /v1/clinics/{clinicId}/patients/{patientId}/send_dexcom_connect_request)
	SendDexcomConnectRequest(ctx echo.Context, clinicId ClinicId, patientId PatientId) error
	// Send Upload Reminder
	// (POST /v1/clinics/{clinicId}/patients/{patientId}/upload_reminder)
	SendUploadReminder(ctx echo.Context, clinicId ClinicId, patientId PatientId) error
	// Get EHR Settings
	// (GET /v1/clinics/{clinicId}/settings/ehr)
	GetEHRSettings(ctx echo.Context, clinicId ClinicId) error
	// Update EHR Settings
	// (PUT /v1/clinics/{clinicId}/settings/ehr)
	UpdateEHRSettings(ctx echo.Context, clinicId ClinicId) error
	// Get MRN Settings
	// (GET /v1/clinics/{clinicId}/settings/mrn)
	GetMRNSettings(ctx echo.Context, clinicId ClinicId) error
	// Update MRN Settings
	// (PUT /v1/clinics/{clinicId}/settings/mrn)
	UpdateMRNSettings(ctx echo.Context, clinicId ClinicId) error
	// Get Patient Count Settings
	// (GET /v1/clinics/{clinicId}/settings/patient_count)
	GetPatientCountSettings(ctx echo.Context, clinicId ClinicId) error
	// Update Patient Count Settings
	// (PUT /v1/clinics/{clinicId}/settings/patient_count)
	UpdatePatientCountSettings(ctx echo.Context, clinicId ClinicId) error
	// Update Suppressed Notifications
	// (POST /v1/clinics/{clinicId}/suppressed_notifications)
	UpdateSuppressedNotifications(ctx echo.Context, clinicId ClinicId) error
	// View TIDE Report
	// (GET /v1/clinics/{clinicId}/tide_report)
	TideReport(ctx echo.Context, clinicId ClinicId, params TideReportParams) error
	// Update Tier
	// (POST /v1/clinics/{clinicId}/tier)
	UpdateTier(ctx echo.Context, clinicId ClinicId) error
	// Find Patients
	// (GET /v1/patients)
	FindPatients(ctx echo.Context, params FindPatientsParams) error
	// UpdatePatientSummary
	// (POST /v1/patients/{patientId}/summary)
	UpdatePatientSummary(ctx echo.Context, patientId PatientId) error
	// List Clinics for Patient
	// (GET /v1/patients/{userId}/clinics)
	ListClinicsForPatient(ctx echo.Context, userId UserId, params ListClinicsForPatientParams) error
	// Create or update a data source for a patient
	// (PUT /v1/patients/{userId}/data_sources)
	UpdatePatientDataSources(ctx echo.Context, userId UserId) error
	// Redox EHR Endpoint
	// (POST /v1/redox)
	ProcessEHRMessage(ctx echo.Context) error
	// Match Clinic and Patient
	// (POST /v1/redox/match)
	MatchClinicAndPatient(ctx echo.Context) error
	// Redox Verify Endpoint
	// (POST /v1/redox/verify)
	VerifyEndpoint(ctx echo.Context) error
	// Remove User from Clinics
	// (DELETE /v1/users/{userId}/clinics)
	DeleteUserFromClinics(ctx echo.Context, userId UserId) error
	// Update User Details
	// (POST /v1/users/{userId}/clinics)
	UpdateClinicUserDetails(ctx echo.Context, userId UserId) error
	// Notification Webhook
	// (POST /v1/xealth/notification)
	XealthNotification(ctx echo.Context) error
	// Preorder Form Webhook
	// (POST /v1/xealth/preorder)
	XealthPreorder(ctx echo.Context) error
	// Get Program Url
	// (PUT /v1/xealth/program)
	XealthGetProgramUrl(ctx echo.Context) error
	// Get Programs
	// (PUT /v1/xealth/programs)
	XealthGetPrograms(ctx echo.Context) error
	// View PDF Report
	// (GET /v1/xealth/report/web/viewer.html)
	ViewPDFReport(ctx echo.Context, params ViewPDFReportParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// ListAllClinicians converts echo context to params.
func (w *ServerInterfaceWrapper) ListAllClinicians(ctx echo.Context) error {
	var err error

	ctx.Set(SessionTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListAllCliniciansParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "createdTimeStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdTimeStart", ctx.QueryParams(), &params.CreatedTimeStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdTimeStart: %s", err))
	}

	// ------------- Optional query parameter "createdTimeEnd" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdTimeEnd", ctx.QueryParams(), &params.CreatedTimeEnd)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdTimeEnd: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListAllClinicians(ctx, params)
	return err
}

// ListClinicsForClinician converts echo context to params.
func (w *ServerInterfaceWrapper) ListClinicsForClinician(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClinicsForClinicianParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListClinicsForClinician(ctx, userId, params)
	return err
}

// EnableNewClinicExperience converts echo context to params.
func (w *ServerInterfaceWrapper) EnableNewClinicExperience(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EnableNewClinicExperience(ctx, userId)
	return err
}

// ListClinics converts echo context to params.
func (w *ServerInterfaceWrapper) ListClinics(ctx echo.Context) error {
	var err error

	ctx.Set(SessionTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClinicsParams
	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "shareCode" -------------

	err = runtime.BindQueryParameter("form", true, false, "shareCode", ctx.QueryParams(), &params.ShareCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shareCode: %s", err))
	}

	// ------------- Optional query parameter "createdTimeStart" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdTimeStart", ctx.QueryParams(), &params.CreatedTimeStart)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdTimeStart: %s", err))
	}

	// ------------- Optional query parameter "createdTimeEnd" -------------

	err = runtime.BindQueryParameter("form", true, false, "createdTimeEnd", ctx.QueryParams(), &params.CreatedTimeEnd)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter createdTimeEnd: %s", err))
	}

	// ------------- Optional query parameter "ehrEnabled" -------------

	err = runtime.BindQueryParameter("form", true, false, "ehrEnabled", ctx.QueryParams(), &params.EhrEnabled)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter ehrEnabled: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListClinics(ctx, params)
	return err
}

// CreateClinic converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClinic(ctx echo.Context) error {
	var err error

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateClinic(ctx)
	return err
}

// GetClinicByShareCode converts echo context to params.
func (w *ServerInterfaceWrapper) GetClinicByShareCode(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "shareCode" -------------
	var shareCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "shareCode", runtime.ParamLocationPath, ctx.Param("shareCode"), &shareCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter shareCode: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClinicByShareCode(ctx, shareCode)
	return err
}

// DeleteClinic converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClinic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteClinic(ctx, clinicId)
	return err
}

// GetClinic converts echo context to params.
func (w *ServerInterfaceWrapper) GetClinic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClinic(ctx, clinicId)
	return err
}

// UpdateClinic converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClinic(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateClinic(ctx, clinicId)
	return err
}

// ListClinicians converts echo context to params.
func (w *ServerInterfaceWrapper) ListClinicians(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListCliniciansParams
	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "email" -------------

	err = runtime.BindQueryParameter("form", true, false, "email", ctx.QueryParams(), &params.Email)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter email: %s", err))
	}

	// ------------- Optional query parameter "role" -------------

	err = runtime.BindQueryParameter("form", true, false, "role", ctx.QueryParams(), &params.Role)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter role: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListClinicians(ctx, clinicId, params)
	return err
}

// CreateClinician converts echo context to params.
func (w *ServerInterfaceWrapper) CreateClinician(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateClinician(ctx, clinicId)
	return err
}

// DeleteClinician converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteClinician(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "clinicianId" -------------
	var clinicianId ClinicianId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicianId", runtime.ParamLocationPath, ctx.Param("clinicianId"), &clinicianId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicianId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteClinician(ctx, clinicId, clinicianId)
	return err
}

// GetClinician converts echo context to params.
func (w *ServerInterfaceWrapper) GetClinician(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "clinicianId" -------------
	var clinicianId ClinicianId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicianId", runtime.ParamLocationPath, ctx.Param("clinicianId"), &clinicianId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicianId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetClinician(ctx, clinicId, clinicianId)
	return err
}

// UpdateClinician converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClinician(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "clinicianId" -------------
	var clinicianId ClinicianId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicianId", runtime.ParamLocationPath, ctx.Param("clinicianId"), &clinicianId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicianId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateClinician(ctx, clinicId, clinicianId)
	return err
}

// SyncEHRData converts echo context to params.
func (w *ServerInterfaceWrapper) SyncEHRData(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SyncEHRData(ctx, clinicId)
	return err
}

// DeleteInvitedClinician converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteInvitedClinician(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "inviteId" -------------
	var inviteId InviteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, ctx.Param("inviteId"), &inviteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter inviteId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteInvitedClinician(ctx, clinicId, inviteId)
	return err
}

// GetInvitedClinician converts echo context to params.
func (w *ServerInterfaceWrapper) GetInvitedClinician(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "inviteId" -------------
	var inviteId InviteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, ctx.Param("inviteId"), &inviteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter inviteId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetInvitedClinician(ctx, clinicId, inviteId)
	return err
}

// AssociateClinicianToUser converts echo context to params.
func (w *ServerInterfaceWrapper) AssociateClinicianToUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "inviteId" -------------
	var inviteId InviteId

	err = runtime.BindStyledParameterWithLocation("simple", false, "inviteId", runtime.ParamLocationPath, ctx.Param("inviteId"), &inviteId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter inviteId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssociateClinicianToUser(ctx, clinicId, inviteId)
	return err
}

// ListMembershipRestrictions converts echo context to params.
func (w *ServerInterfaceWrapper) ListMembershipRestrictions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMembershipRestrictions(ctx, clinicId)
	return err
}

// UpdateMembershipRestrictions converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMembershipRestrictions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateMembershipRestrictions(ctx, clinicId)
	return err
}

// TriggerInitialMigration converts echo context to params.
func (w *ServerInterfaceWrapper) TriggerInitialMigration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TriggerInitialMigration(ctx, clinicId)
	return err
}

// ListMigrations converts echo context to params.
func (w *ServerInterfaceWrapper) ListMigrations(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListMigrations(ctx, clinicId)
	return err
}

// MigrateLegacyClinicianPatients converts echo context to params.
func (w *ServerInterfaceWrapper) MigrateLegacyClinicianPatients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MigrateLegacyClinicianPatients(ctx, clinicId)
	return err
}

// GetMigration converts echo context to params.
func (w *ServerInterfaceWrapper) GetMigration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMigration(ctx, clinicId, userId)
	return err
}

// UpdateMigration converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMigration(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId Id

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateMigration(ctx, clinicId, userId)
	return err
}

// GetPatientCount converts echo context to params.
func (w *ServerInterfaceWrapper) GetPatientCount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPatientCount(ctx, clinicId)
	return err
}

// CreatePatientTag converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePatientTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePatientTag(ctx, clinicId)
	return err
}

// DeletePatientTag converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePatientTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "patientTagId" -------------
	var patientTagId PatientTagId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientTagId", runtime.ParamLocationPath, ctx.Param("patientTagId"), &patientTagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientTagId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePatientTag(ctx, clinicId, patientTagId)
	return err
}

// UpdatePatientTag converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePatientTag(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "patientTagId" -------------
	var patientTagId PatientTagId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientTagId", runtime.ParamLocationPath, ctx.Param("patientTagId"), &patientTagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientTagId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePatientTag(ctx, clinicId, patientTagId)
	return err
}

// ListPatients converts echo context to params.
func (w *ServerInterfaceWrapper) ListPatients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListPatientsParams
	// ------------- Optional query parameter "search" -------------

	err = runtime.BindQueryParameter("form", true, false, "search", ctx.QueryParams(), &params.Search)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter search: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", ctx.QueryParams(), &params.Sort)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sort: %s", err))
	}

	// ------------- Optional query parameter "sortType" -------------

	err = runtime.BindQueryParameter("form", true, false, "sortType", ctx.QueryParams(), &params.SortType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sortType: %s", err))
	}

	// ------------- Optional query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, false, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// ------------- Optional query parameter "offsetPeriods" -------------

	err = runtime.BindQueryParameter("form", true, false, "offsetPeriods", ctx.QueryParams(), &params.OffsetPeriods)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offsetPeriods: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeCGMUsePercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeCGMUsePercent", ctx.QueryParams(), &params.CgmTimeCGMUsePercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeCGMUsePercent: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInVeryLowPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInVeryLowPercent", ctx.QueryParams(), &params.CgmTimeInVeryLowPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInVeryLowPercent: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInAnyLowPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInAnyLowPercent", ctx.QueryParams(), &params.CgmTimeInAnyLowPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInAnyLowPercent: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInLowPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInLowPercent", ctx.QueryParams(), &params.CgmTimeInLowPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInLowPercent: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInTargetPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInTargetPercent", ctx.QueryParams(), &params.CgmTimeInTargetPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInTargetPercent: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInHighPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInHighPercent", ctx.QueryParams(), &params.CgmTimeInHighPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInHighPercent: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInVeryHighPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInVeryHighPercent", ctx.QueryParams(), &params.CgmTimeInVeryHighPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInVeryHighPercent: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInAnyHighPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInAnyHighPercent", ctx.QueryParams(), &params.CgmTimeInAnyHighPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInAnyHighPercent: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeCGMUseRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeCGMUseRecords", ctx.QueryParams(), &params.CgmTimeCGMUseRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeCGMUseRecords: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInVeryLowRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInVeryLowRecords", ctx.QueryParams(), &params.CgmTimeInVeryLowRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInVeryLowRecords: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInAnyLowRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInAnyLowRecords", ctx.QueryParams(), &params.CgmTimeInAnyLowRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInAnyLowRecords: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInLowRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInLowRecords", ctx.QueryParams(), &params.CgmTimeInLowRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInLowRecords: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInTargetRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInTargetRecords", ctx.QueryParams(), &params.CgmTimeInTargetRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInTargetRecords: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInHighRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInHighRecords", ctx.QueryParams(), &params.CgmTimeInHighRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInHighRecords: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInVeryHighRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInVeryHighRecords", ctx.QueryParams(), &params.CgmTimeInVeryHighRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInVeryHighRecords: %s", err))
	}

	// ------------- Optional query parameter "cgm.timeInAnyHighRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.timeInAnyHighRecords", ctx.QueryParams(), &params.CgmTimeInAnyHighRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.timeInAnyHighRecords: %s", err))
	}

	// ------------- Optional query parameter "cgm.averageDailyRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.averageDailyRecords", ctx.QueryParams(), &params.CgmAverageDailyRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.averageDailyRecords: %s", err))
	}

	// ------------- Optional query parameter "cgm.totalRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.totalRecords", ctx.QueryParams(), &params.CgmTotalRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.totalRecords: %s", err))
	}

	// ------------- Optional query parameter "cgm.lastUploadDateFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.lastUploadDateFrom", ctx.QueryParams(), &params.CgmLastUploadDateFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.lastUploadDateFrom: %s", err))
	}

	// ------------- Optional query parameter "cgm.lastUploadDateTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.lastUploadDateTo", ctx.QueryParams(), &params.CgmLastUploadDateTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.lastUploadDateTo: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInVeryLowPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInVeryLowPercent", ctx.QueryParams(), &params.BgmTimeInVeryLowPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInVeryLowPercent: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInAnyLowPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInAnyLowPercent", ctx.QueryParams(), &params.BgmTimeInAnyLowPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInAnyLowPercent: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInLowPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInLowPercent", ctx.QueryParams(), &params.BgmTimeInLowPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInLowPercent: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInTargetPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInTargetPercent", ctx.QueryParams(), &params.BgmTimeInTargetPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInTargetPercent: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInHighPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInHighPercent", ctx.QueryParams(), &params.BgmTimeInHighPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInHighPercent: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInVeryHighPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInVeryHighPercent", ctx.QueryParams(), &params.BgmTimeInVeryHighPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInVeryHighPercent: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInAnyHighPercent" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInAnyHighPercent", ctx.QueryParams(), &params.BgmTimeInAnyHighPercent)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInAnyHighPercent: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInVeryLowRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInVeryLowRecords", ctx.QueryParams(), &params.BgmTimeInVeryLowRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInVeryLowRecords: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInAnyLowRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInAnyLowRecords", ctx.QueryParams(), &params.BgmTimeInAnyLowRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInAnyLowRecords: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInLowRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInLowRecords", ctx.QueryParams(), &params.BgmTimeInLowRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInLowRecords: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInTargetRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInTargetRecords", ctx.QueryParams(), &params.BgmTimeInTargetRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInTargetRecords: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInHighRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInHighRecords", ctx.QueryParams(), &params.BgmTimeInHighRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInHighRecords: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInVeryHighRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInVeryHighRecords", ctx.QueryParams(), &params.BgmTimeInVeryHighRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInVeryHighRecords: %s", err))
	}

	// ------------- Optional query parameter "bgm.timeInAnyHighRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.timeInAnyHighRecords", ctx.QueryParams(), &params.BgmTimeInAnyHighRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.timeInAnyHighRecords: %s", err))
	}

	// ------------- Optional query parameter "bgm.averageDailyRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.averageDailyRecords", ctx.QueryParams(), &params.BgmAverageDailyRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.averageDailyRecords: %s", err))
	}

	// ------------- Optional query parameter "bgm.totalRecords" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.totalRecords", ctx.QueryParams(), &params.BgmTotalRecords)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.totalRecords: %s", err))
	}

	// ------------- Optional query parameter "bgm.lastUploadDateFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.lastUploadDateFrom", ctx.QueryParams(), &params.BgmLastUploadDateFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.lastUploadDateFrom: %s", err))
	}

	// ------------- Optional query parameter "bgm.lastUploadDateTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "bgm.lastUploadDateTo", ctx.QueryParams(), &params.BgmLastUploadDateTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter bgm.lastUploadDateTo: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListPatients(ctx, clinicId, params)
	return err
}

// CreatePatientAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePatientAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePatientAccount(ctx, clinicId)
	return err
}

// AssignPatientTagToClinicPatients converts echo context to params.
func (w *ServerInterfaceWrapper) AssignPatientTagToClinicPatients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "patientTagId" -------------
	var patientTagId PatientTagId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientTagId", runtime.ParamLocationPath, ctx.Param("patientTagId"), &patientTagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientTagId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AssignPatientTagToClinicPatients(ctx, clinicId, patientTagId)
	return err
}

// DeletePatientTagFromClinicPatients converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePatientTagFromClinicPatients(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "patientTagId" -------------
	var patientTagId PatientTagId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientTagId", runtime.ParamLocationPath, ctx.Param("patientTagId"), &patientTagId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientTagId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePatientTagFromClinicPatients(ctx, clinicId, patientTagId)
	return err
}

// DeletePatient converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePatient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "patientId" -------------
	var patientId PatientId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePatient(ctx, clinicId, patientId)
	return err
}

// GetPatient converts echo context to params.
func (w *ServerInterfaceWrapper) GetPatient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "patientId" -------------
	var patientId PatientId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPatient(ctx, clinicId, patientId)
	return err
}

// CreatePatientFromUser converts echo context to params.
func (w *ServerInterfaceWrapper) CreatePatientFromUser(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "patientId" -------------
	var patientId PatientId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreatePatientFromUser(ctx, clinicId, patientId)
	return err
}

// UpdatePatient converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePatient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "patientId" -------------
	var patientId PatientId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePatient(ctx, clinicId, patientId)
	return err
}

// UpdatePatientPermissions converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePatientPermissions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "patientId" -------------
	var patientId PatientId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePatientPermissions(ctx, clinicId, patientId)
	return err
}

// DeletePatientPermission converts echo context to params.
func (w *ServerInterfaceWrapper) DeletePatientPermission(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "patientId" -------------
	var patientId PatientId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	// ------------- Path parameter "permission" -------------
	var permission string

	err = runtime.BindStyledParameterWithLocation("simple", false, "permission", runtime.ParamLocationPath, ctx.Param("permission"), &permission)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter permission: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeletePatientPermission(ctx, clinicId, patientId, permission)
	return err
}

// SendDexcomConnectRequest converts echo context to params.
func (w *ServerInterfaceWrapper) SendDexcomConnectRequest(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "patientId" -------------
	var patientId PatientId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendDexcomConnectRequest(ctx, clinicId, patientId)
	return err
}

// SendUploadReminder converts echo context to params.
func (w *ServerInterfaceWrapper) SendUploadReminder(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Path parameter "patientId" -------------
	var patientId PatientId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.SendUploadReminder(ctx, clinicId, patientId)
	return err
}

// GetEHRSettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetEHRSettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEHRSettings(ctx, clinicId)
	return err
}

// UpdateEHRSettings converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateEHRSettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateEHRSettings(ctx, clinicId)
	return err
}

// GetMRNSettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetMRNSettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMRNSettings(ctx, clinicId)
	return err
}

// UpdateMRNSettings converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateMRNSettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateMRNSettings(ctx, clinicId)
	return err
}

// GetPatientCountSettings converts echo context to params.
func (w *ServerInterfaceWrapper) GetPatientCountSettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetPatientCountSettings(ctx, clinicId)
	return err
}

// UpdatePatientCountSettings converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePatientCountSettings(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePatientCountSettings(ctx, clinicId)
	return err
}

// UpdateSuppressedNotifications converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateSuppressedNotifications(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateSuppressedNotifications(ctx, clinicId)
	return err
}

// TideReport converts echo context to params.
func (w *ServerInterfaceWrapper) TideReport(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params TideReportParams
	// ------------- Optional query parameter "period" -------------

	err = runtime.BindQueryParameter("form", true, false, "period", ctx.QueryParams(), &params.Period)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter period: %s", err))
	}

	// ------------- Optional query parameter "tags" -------------

	err = runtime.BindQueryParameter("form", false, false, "tags", ctx.QueryParams(), &params.Tags)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter tags: %s", err))
	}

	// ------------- Optional query parameter "cgm.lastUploadDateFrom" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.lastUploadDateFrom", ctx.QueryParams(), &params.CgmLastUploadDateFrom)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.lastUploadDateFrom: %s", err))
	}

	// ------------- Optional query parameter "cgm.lastUploadDateTo" -------------

	err = runtime.BindQueryParameter("form", true, false, "cgm.lastUploadDateTo", ctx.QueryParams(), &params.CgmLastUploadDateTo)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter cgm.lastUploadDateTo: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.TideReport(ctx, clinicId, params)
	return err
}

// UpdateTier converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateTier(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "clinicId" -------------
	var clinicId ClinicId

	err = runtime.BindStyledParameterWithLocation("simple", false, "clinicId", runtime.ParamLocationPath, ctx.Param("clinicId"), &clinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateTier(ctx, clinicId)
	return err
}

// FindPatients converts echo context to params.
func (w *ServerInterfaceWrapper) FindPatients(ctx echo.Context) error {
	var err error

	ctx.Set(SessionTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params FindPatientsParams
	// ------------- Optional query parameter "mrn" -------------

	err = runtime.BindQueryParameter("form", true, false, "mrn", ctx.QueryParams(), &params.Mrn)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter mrn: %s", err))
	}

	// ------------- Optional query parameter "birthDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "birthDate", ctx.QueryParams(), &params.BirthDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter birthDate: %s", err))
	}

	// ------------- Optional query parameter "workspaceId" -------------

	err = runtime.BindQueryParameter("form", true, false, "workspaceId", ctx.QueryParams(), &params.WorkspaceId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceId: %s", err))
	}

	// ------------- Optional query parameter "workspaceIdType" -------------

	err = runtime.BindQueryParameter("form", true, false, "workspaceIdType", ctx.QueryParams(), &params.WorkspaceIdType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter workspaceIdType: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.FindPatients(ctx, params)
	return err
}

// UpdatePatientSummary converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePatientSummary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "patientId" -------------
	var patientId PatientId

	err = runtime.BindStyledParameterWithLocation("simple", false, "patientId", runtime.ParamLocationPath, ctx.Param("patientId"), &patientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePatientSummary(ctx, patientId)
	return err
}

// ListClinicsForPatient converts echo context to params.
func (w *ServerInterfaceWrapper) ListClinicsForPatient(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ListClinicsForPatientParams
	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ListClinicsForPatient(ctx, userId, params)
	return err
}

// UpdatePatientDataSources converts echo context to params.
func (w *ServerInterfaceWrapper) UpdatePatientDataSources(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdatePatientDataSources(ctx, userId)
	return err
}

// ProcessEHRMessage converts echo context to params.
func (w *ServerInterfaceWrapper) ProcessEHRMessage(ctx echo.Context) error {
	var err error

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ProcessEHRMessage(ctx)
	return err
}

// MatchClinicAndPatient converts echo context to params.
func (w *ServerInterfaceWrapper) MatchClinicAndPatient(ctx echo.Context) error {
	var err error

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.MatchClinicAndPatient(ctx)
	return err
}

// VerifyEndpoint converts echo context to params.
func (w *ServerInterfaceWrapper) VerifyEndpoint(ctx echo.Context) error {
	var err error

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.VerifyEndpoint(ctx)
	return err
}

// DeleteUserFromClinics converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteUserFromClinics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteUserFromClinics(ctx, userId)
	return err
}

// UpdateClinicUserDetails converts echo context to params.
func (w *ServerInterfaceWrapper) UpdateClinicUserDetails(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "userId" -------------
	var userId UserId

	err = runtime.BindStyledParameterWithLocation("simple", false, "userId", runtime.ParamLocationPath, ctx.Param("userId"), &userId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter userId: %s", err))
	}

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.UpdateClinicUserDetails(ctx, userId)
	return err
}

// XealthNotification converts echo context to params.
func (w *ServerInterfaceWrapper) XealthNotification(ctx echo.Context) error {
	var err error

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.XealthNotification(ctx)
	return err
}

// XealthPreorder converts echo context to params.
func (w *ServerInterfaceWrapper) XealthPreorder(ctx echo.Context) error {
	var err error

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.XealthPreorder(ctx)
	return err
}

// XealthGetProgramUrl converts echo context to params.
func (w *ServerInterfaceWrapper) XealthGetProgramUrl(ctx echo.Context) error {
	var err error

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.XealthGetProgramUrl(ctx)
	return err
}

// XealthGetPrograms converts echo context to params.
func (w *ServerInterfaceWrapper) XealthGetPrograms(ctx echo.Context) error {
	var err error

	ctx.Set(SessionTokenScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.XealthGetPrograms(ctx)
	return err
}

// ViewPDFReport converts echo context to params.
func (w *ServerInterfaceWrapper) ViewPDFReport(ctx echo.Context) error {
	var err error

	ctx.Set(SessionTokenScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params ViewPDFReportParams
	// ------------- Required query parameter "clinicId" -------------

	err = runtime.BindQueryParameter("form", true, true, "clinicId", ctx.QueryParams(), &params.ClinicId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clinicId: %s", err))
	}

	// ------------- Required query parameter "patientId" -------------

	err = runtime.BindQueryParameter("form", true, true, "patientId", ctx.QueryParams(), &params.PatientId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter patientId: %s", err))
	}

	// ------------- Required query parameter "restricted_token" -------------

	err = runtime.BindQueryParameter("form", true, true, "restricted_token", ctx.QueryParams(), &params.RestrictedToken)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter restricted_token: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ViewPDFReport(ctx, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/v1/clinicians", wrapper.ListAllClinicians)
	router.GET(baseURL+"/v1/clinicians/:userId/clinics", wrapper.ListClinicsForClinician)
	router.POST(baseURL+"/v1/clinicians/:userId/migrate", wrapper.EnableNewClinicExperience)
	router.GET(baseURL+"/v1/clinics", wrapper.ListClinics)
	router.POST(baseURL+"/v1/clinics", wrapper.CreateClinic)
	router.GET(baseURL+"/v1/clinics/share_code/:shareCode", wrapper.GetClinicByShareCode)
	router.DELETE(baseURL+"/v1/clinics/:clinicId", wrapper.DeleteClinic)
	router.GET(baseURL+"/v1/clinics/:clinicId", wrapper.GetClinic)
	router.PUT(baseURL+"/v1/clinics/:clinicId", wrapper.UpdateClinic)
	router.GET(baseURL+"/v1/clinics/:clinicId/clinicians", wrapper.ListClinicians)
	router.POST(baseURL+"/v1/clinics/:clinicId/clinicians", wrapper.CreateClinician)
	router.DELETE(baseURL+"/v1/clinics/:clinicId/clinicians/:clinicianId", wrapper.DeleteClinician)
	router.GET(baseURL+"/v1/clinics/:clinicId/clinicians/:clinicianId", wrapper.GetClinician)
	router.PUT(baseURL+"/v1/clinics/:clinicId/clinicians/:clinicianId", wrapper.UpdateClinician)
	router.POST(baseURL+"/v1/clinics/:clinicId/ehr/sync", wrapper.SyncEHRData)
	router.DELETE(baseURL+"/v1/clinics/:clinicId/invites/clinicians/:inviteId/clinician", wrapper.DeleteInvitedClinician)
	router.GET(baseURL+"/v1/clinics/:clinicId/invites/clinicians/:inviteId/clinician", wrapper.GetInvitedClinician)
	router.PATCH(baseURL+"/v1/clinics/:clinicId/invites/clinicians/:inviteId/clinician", wrapper.AssociateClinicianToUser)
	router.GET(baseURL+"/v1/clinics/:clinicId/membership_restrictions", wrapper.ListMembershipRestrictions)
	router.PUT(baseURL+"/v1/clinics/:clinicId/membership_restrictions", wrapper.UpdateMembershipRestrictions)
	router.POST(baseURL+"/v1/clinics/:clinicId/migrate", wrapper.TriggerInitialMigration)
	router.GET(baseURL+"/v1/clinics/:clinicId/migrations", wrapper.ListMigrations)
	router.POST(baseURL+"/v1/clinics/:clinicId/migrations", wrapper.MigrateLegacyClinicianPatients)
	router.GET(baseURL+"/v1/clinics/:clinicId/migrations/:userId", wrapper.GetMigration)
	router.PATCH(baseURL+"/v1/clinics/:clinicId/migrations/:userId", wrapper.UpdateMigration)
	router.GET(baseURL+"/v1/clinics/:clinicId/patient_count", wrapper.GetPatientCount)
	router.POST(baseURL+"/v1/clinics/:clinicId/patient_tags", wrapper.CreatePatientTag)
	router.DELETE(baseURL+"/v1/clinics/:clinicId/patient_tags/:patientTagId", wrapper.DeletePatientTag)
	router.PUT(baseURL+"/v1/clinics/:clinicId/patient_tags/:patientTagId", wrapper.UpdatePatientTag)
	router.GET(baseURL+"/v1/clinics/:clinicId/patients", wrapper.ListPatients)
	router.POST(baseURL+"/v1/clinics/:clinicId/patients", wrapper.CreatePatientAccount)
	router.POST(baseURL+"/v1/clinics/:clinicId/patients/assign_tag/:patientTagId", wrapper.AssignPatientTagToClinicPatients)
	router.POST(baseURL+"/v1/clinics/:clinicId/patients/delete_tag/:patientTagId", wrapper.DeletePatientTagFromClinicPatients)
	router.DELETE(baseURL+"/v1/clinics/:clinicId/patients/:patientId", wrapper.DeletePatient)
	router.GET(baseURL+"/v1/clinics/:clinicId/patients/:patientId", wrapper.GetPatient)
	router.POST(baseURL+"/v1/clinics/:clinicId/patients/:patientId", wrapper.CreatePatientFromUser)
	router.PUT(baseURL+"/v1/clinics/:clinicId/patients/:patientId", wrapper.UpdatePatient)
	router.PUT(baseURL+"/v1/clinics/:clinicId/patients/:patientId/permissions", wrapper.UpdatePatientPermissions)
	router.DELETE(baseURL+"/v1/clinics/:clinicId/patients/:patientId/permissions/:permission", wrapper.DeletePatientPermission)
	router.POST(baseURL+"/v1/clinics/:clinicId/patients/:patientId/send_dexcom_connect_request", wrapper.SendDexcomConnectRequest)
	router.POST(baseURL+"/v1/clinics/:clinicId/patients/:patientId/upload_reminder", wrapper.SendUploadReminder)
	router.GET(baseURL+"/v1/clinics/:clinicId/settings/ehr", wrapper.GetEHRSettings)
	router.PUT(baseURL+"/v1/clinics/:clinicId/settings/ehr", wrapper.UpdateEHRSettings)
	router.GET(baseURL+"/v1/clinics/:clinicId/settings/mrn", wrapper.GetMRNSettings)
	router.PUT(baseURL+"/v1/clinics/:clinicId/settings/mrn", wrapper.UpdateMRNSettings)
	router.GET(baseURL+"/v1/clinics/:clinicId/settings/patient_count", wrapper.GetPatientCountSettings)
	router.PUT(baseURL+"/v1/clinics/:clinicId/settings/patient_count", wrapper.UpdatePatientCountSettings)
	router.POST(baseURL+"/v1/clinics/:clinicId/suppressed_notifications", wrapper.UpdateSuppressedNotifications)
	router.GET(baseURL+"/v1/clinics/:clinicId/tide_report", wrapper.TideReport)
	router.POST(baseURL+"/v1/clinics/:clinicId/tier", wrapper.UpdateTier)
	router.GET(baseURL+"/v1/patients", wrapper.FindPatients)
	router.POST(baseURL+"/v1/patients/:patientId/summary", wrapper.UpdatePatientSummary)
	router.GET(baseURL+"/v1/patients/:userId/clinics", wrapper.ListClinicsForPatient)
	router.PUT(baseURL+"/v1/patients/:userId/data_sources", wrapper.UpdatePatientDataSources)
	router.POST(baseURL+"/v1/redox", wrapper.ProcessEHRMessage)
	router.POST(baseURL+"/v1/redox/match", wrapper.MatchClinicAndPatient)
	router.POST(baseURL+"/v1/redox/verify", wrapper.VerifyEndpoint)
	router.DELETE(baseURL+"/v1/users/:userId/clinics", wrapper.DeleteUserFromClinics)
	router.POST(baseURL+"/v1/users/:userId/clinics", wrapper.UpdateClinicUserDetails)
	router.POST(baseURL+"/v1/xealth/notification", wrapper.XealthNotification)
	router.POST(baseURL+"/v1/xealth/preorder", wrapper.XealthPreorder)
	router.PUT(baseURL+"/v1/xealth/program", wrapper.XealthGetProgramUrl)
	router.PUT(baseURL+"/v1/xealth/programs", wrapper.XealthGetPrograms)
	router.GET(baseURL+"/v1/xealth/report/web/viewer.html", wrapper.ViewPDFReport)

}
