// Package Clinic provides primitives to interact the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen DO NOT EDIT.
package api

import (
	"bytes"
	"context"
	"encoding/json"
	"encoding/xml"
	"fmt"
	"github.com/tidepool-org/oapi-codegen/pkg/runtime"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A callback for modifying requests which are generated before sending over
	// the network.
	RequestEditor RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = http.DefaultClient
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditor = fn
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetClinics request
	GetClinics(ctx context.Context, params *GetClinicsParams) (*http.Response, error)

	// PostClinics request  with any body
	PostClinicsWithBody(ctx context.Context, params *PostClinicsParams, contentType string, body io.Reader) (*http.Response, error)

	PostClinics(ctx context.Context, params *PostClinicsParams, body PostClinicsJSONRequestBody) (*http.Response, error)

	// DeleteClinicsCliniciansClinicianid request
	DeleteClinicsCliniciansClinicianid(ctx context.Context, clinicianid string) (*http.Response, error)

	// GetClinicsCliniciansClinicianid request
	GetClinicsCliniciansClinicianid(ctx context.Context, clinicianid string) (*http.Response, error)

	// DeleteClinicsPatientsPatientid request
	DeleteClinicsPatientsPatientid(ctx context.Context, patientid string) (*http.Response, error)

	// GetClinicsPatientsPatientid request
	GetClinicsPatientsPatientid(ctx context.Context, patientid string) (*http.Response, error)

	// DeleteClinicsClinicid request
	DeleteClinicsClinicid(ctx context.Context, clinicid string) (*http.Response, error)

	// GetClinicsClinicid request
	GetClinicsClinicid(ctx context.Context, clinicid string, params *GetClinicsClinicidParams) (*http.Response, error)

	// PatchClinicsClinicid request  with any body
	PatchClinicsClinicidWithBody(ctx context.Context, clinicid string, contentType string, body io.Reader) (*http.Response, error)

	PatchClinicsClinicid(ctx context.Context, clinicid string, body PatchClinicsClinicidJSONRequestBody) (*http.Response, error)

	// GetClinicsClinicidClinicians request
	GetClinicsClinicidClinicians(ctx context.Context, clinicid string, params *GetClinicsClinicidCliniciansParams) (*http.Response, error)

	// PostClinicsClinicidClinicians request  with any body
	PostClinicsClinicidCliniciansWithBody(ctx context.Context, clinicid string, contentType string, body io.Reader) (*http.Response, error)

	PostClinicsClinicidClinicians(ctx context.Context, clinicid string, body PostClinicsClinicidCliniciansJSONRequestBody) (*http.Response, error)

	// DeleteClinicsClinicidCliniciansClinicianid request
	DeleteClinicsClinicidCliniciansClinicianid(ctx context.Context, clinicid string, clinicianid string) (*http.Response, error)

	// GetClinicsClinicidCliniciansClinicianid request
	GetClinicsClinicidCliniciansClinicianid(ctx context.Context, clinicid string, clinicianid string) (*http.Response, error)

	// PatchClinicsClinicidCliniciansClinicianid request  with any body
	PatchClinicsClinicidCliniciansClinicianidWithBody(ctx context.Context, clinicid string, clinicianid string, contentType string, body io.Reader) (*http.Response, error)

	PatchClinicsClinicidCliniciansClinicianid(ctx context.Context, clinicid string, clinicianid string, body PatchClinicsClinicidCliniciansClinicianidJSONRequestBody) (*http.Response, error)

	// GetClinicsClinicidPatients request
	GetClinicsClinicidPatients(ctx context.Context, clinicid string, params *GetClinicsClinicidPatientsParams) (*http.Response, error)

	// PostClinicsClinicidPatients request  with any body
	PostClinicsClinicidPatientsWithBody(ctx context.Context, clinicid string, contentType string, body io.Reader) (*http.Response, error)

	PostClinicsClinicidPatients(ctx context.Context, clinicid string, body PostClinicsClinicidPatientsJSONRequestBody) (*http.Response, error)

	// DeleteClinicClinicidPatientsPatientid request
	DeleteClinicClinicidPatientsPatientid(ctx context.Context, clinicid string, patientid string) (*http.Response, error)

	// GetClinicsClinicidPatientsPatientid request
	GetClinicsClinicidPatientsPatientid(ctx context.Context, clinicid string, patientid string) (*http.Response, error)

	// PatchClinicsClinicidPatientsPatientid request  with any body
	PatchClinicsClinicidPatientsPatientidWithBody(ctx context.Context, clinicid string, patientid string, contentType string, body io.Reader) (*http.Response, error)

	PatchClinicsClinicidPatientsPatientid(ctx context.Context, clinicid string, patientid string, body PatchClinicsClinicidPatientsPatientidJSONRequestBody) (*http.Response, error)
}

func (c *Client) GetClinics(ctx context.Context, params *GetClinicsParams) (*http.Response, error) {
	req, err := NewGetClinicsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostClinicsWithBody(ctx context.Context, params *PostClinicsParams, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostClinicsRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostClinics(ctx context.Context, params *PostClinicsParams, body PostClinicsJSONRequestBody) (*http.Response, error) {
	req, err := NewPostClinicsRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClinicsCliniciansClinicianid(ctx context.Context, clinicianid string) (*http.Response, error) {
	req, err := NewDeleteClinicsCliniciansClinicianidRequest(c.Server, clinicianid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClinicsCliniciansClinicianid(ctx context.Context, clinicianid string) (*http.Response, error) {
	req, err := NewGetClinicsCliniciansClinicianidRequest(c.Server, clinicianid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClinicsPatientsPatientid(ctx context.Context, patientid string) (*http.Response, error) {
	req, err := NewDeleteClinicsPatientsPatientidRequest(c.Server, patientid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClinicsPatientsPatientid(ctx context.Context, patientid string) (*http.Response, error) {
	req, err := NewGetClinicsPatientsPatientidRequest(c.Server, patientid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClinicsClinicid(ctx context.Context, clinicid string) (*http.Response, error) {
	req, err := NewDeleteClinicsClinicidRequest(c.Server, clinicid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClinicsClinicid(ctx context.Context, clinicid string, params *GetClinicsClinicidParams) (*http.Response, error) {
	req, err := NewGetClinicsClinicidRequest(c.Server, clinicid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClinicsClinicidWithBody(ctx context.Context, clinicid string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPatchClinicsClinicidRequestWithBody(c.Server, clinicid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClinicsClinicid(ctx context.Context, clinicid string, body PatchClinicsClinicidJSONRequestBody) (*http.Response, error) {
	req, err := NewPatchClinicsClinicidRequest(c.Server, clinicid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClinicsClinicidClinicians(ctx context.Context, clinicid string, params *GetClinicsClinicidCliniciansParams) (*http.Response, error) {
	req, err := NewGetClinicsClinicidCliniciansRequest(c.Server, clinicid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostClinicsClinicidCliniciansWithBody(ctx context.Context, clinicid string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostClinicsClinicidCliniciansRequestWithBody(c.Server, clinicid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostClinicsClinicidClinicians(ctx context.Context, clinicid string, body PostClinicsClinicidCliniciansJSONRequestBody) (*http.Response, error) {
	req, err := NewPostClinicsClinicidCliniciansRequest(c.Server, clinicid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClinicsClinicidCliniciansClinicianid(ctx context.Context, clinicid string, clinicianid string) (*http.Response, error) {
	req, err := NewDeleteClinicsClinicidCliniciansClinicianidRequest(c.Server, clinicid, clinicianid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClinicsClinicidCliniciansClinicianid(ctx context.Context, clinicid string, clinicianid string) (*http.Response, error) {
	req, err := NewGetClinicsClinicidCliniciansClinicianidRequest(c.Server, clinicid, clinicianid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClinicsClinicidCliniciansClinicianidWithBody(ctx context.Context, clinicid string, clinicianid string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPatchClinicsClinicidCliniciansClinicianidRequestWithBody(c.Server, clinicid, clinicianid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClinicsClinicidCliniciansClinicianid(ctx context.Context, clinicid string, clinicianid string, body PatchClinicsClinicidCliniciansClinicianidJSONRequestBody) (*http.Response, error) {
	req, err := NewPatchClinicsClinicidCliniciansClinicianidRequest(c.Server, clinicid, clinicianid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClinicsClinicidPatients(ctx context.Context, clinicid string, params *GetClinicsClinicidPatientsParams) (*http.Response, error) {
	req, err := NewGetClinicsClinicidPatientsRequest(c.Server, clinicid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostClinicsClinicidPatientsWithBody(ctx context.Context, clinicid string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPostClinicsClinicidPatientsRequestWithBody(c.Server, clinicid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PostClinicsClinicidPatients(ctx context.Context, clinicid string, body PostClinicsClinicidPatientsJSONRequestBody) (*http.Response, error) {
	req, err := NewPostClinicsClinicidPatientsRequest(c.Server, clinicid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteClinicClinicidPatientsPatientid(ctx context.Context, clinicid string, patientid string) (*http.Response, error) {
	req, err := NewDeleteClinicClinicidPatientsPatientidRequest(c.Server, clinicid, patientid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) GetClinicsClinicidPatientsPatientid(ctx context.Context, clinicid string, patientid string) (*http.Response, error) {
	req, err := NewGetClinicsClinicidPatientsPatientidRequest(c.Server, clinicid, patientid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClinicsClinicidPatientsPatientidWithBody(ctx context.Context, clinicid string, patientid string, contentType string, body io.Reader) (*http.Response, error) {
	req, err := NewPatchClinicsClinicidPatientsPatientidRequestWithBody(c.Server, clinicid, patientid, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

func (c *Client) PatchClinicsClinicidPatientsPatientid(ctx context.Context, clinicid string, patientid string, body PatchClinicsClinicidPatientsPatientidJSONRequestBody) (*http.Response, error) {
	req, err := NewPatchClinicsClinicidPatientsPatientidRequest(c.Server, clinicid, patientid, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if c.RequestEditor != nil {
		err = c.RequestEditor(ctx, req)
		if err != nil {
			return nil, err
		}
	}
	return c.Client.Do(req)
}

// NewGetClinicsRequest generates requests for GetClinics
func NewGetClinicsRequest(server string, params *GetClinicsParams) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sortOrder", *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.ClinicianId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "clinicianId", *params.ClinicianId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.PatientId != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "patientId", *params.PatientId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClinicsRequest calls the generic PostClinics builder with application/json body
func NewPostClinicsRequest(server string, params *PostClinicsParams, body PostClinicsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClinicsRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostClinicsRequestWithBody generates requests for PostClinics with any type of body
func NewPostClinicsRequestWithBody(server string, params *PostClinicsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics")
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	if params.XTIDEPOOLUSERID != nil {
		var headerParam0 string

		headerParam0, err = runtime.StyleParam("simple", false, "X-TIDEPOOL-USERID", *params.XTIDEPOOLUSERID)
		if err != nil {
			return nil, err
		}

		req.Header.Add("X-TIDEPOOL-USERID", headerParam0)
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteClinicsCliniciansClinicianidRequest generates requests for DeleteClinicsCliniciansClinicianid
func NewDeleteClinicsCliniciansClinicianidRequest(server string, clinicianid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicianid", clinicianid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/clinicians/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClinicsCliniciansClinicianidRequest generates requests for GetClinicsCliniciansClinicianid
func NewGetClinicsCliniciansClinicianidRequest(server string, clinicianid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicianid", clinicianid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/clinicians/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClinicsPatientsPatientidRequest generates requests for DeleteClinicsPatientsPatientid
func NewDeleteClinicsPatientsPatientidRequest(server string, patientid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "patientid", patientid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/patients/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClinicsPatientsPatientidRequest generates requests for GetClinicsPatientsPatientid
func NewGetClinicsPatientsPatientidRequest(server string, patientid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "patientid", patientid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/patients/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteClinicsClinicidRequest generates requests for DeleteClinicsClinicid
func NewDeleteClinicsClinicidRequest(server string, clinicid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClinicsClinicidRequest generates requests for GetClinicsClinicid
func NewGetClinicsClinicidRequest(server string, clinicid string, params *GetClinicsClinicidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Clinicians != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "clinicians", *params.Clinicians); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Patients != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "patients", *params.Patients); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludeClinicians != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "includeClinicians", *params.IncludeClinicians); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.IncludePatients != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "includePatients", *params.IncludePatients); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchClinicsClinicidRequest calls the generic PatchClinicsClinicid builder with application/json body
func NewPatchClinicsClinicidRequest(server string, clinicid string, body PatchClinicsClinicidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchClinicsClinicidRequestWithBody(server, clinicid, "application/json", bodyReader)
}

// NewPatchClinicsClinicidRequestWithBody generates requests for PatchClinicsClinicid with any type of body
func NewPatchClinicsClinicidRequestWithBody(server string, clinicid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetClinicsClinicidCliniciansRequest generates requests for GetClinicsClinicidClinicians
func NewGetClinicsClinicidCliniciansRequest(server string, clinicid string, params *GetClinicsClinicidCliniciansParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s/clinicians", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sortOrder", *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClinicsClinicidCliniciansRequest calls the generic PostClinicsClinicidClinicians builder with application/json body
func NewPostClinicsClinicidCliniciansRequest(server string, clinicid string, body PostClinicsClinicidCliniciansJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClinicsClinicidCliniciansRequestWithBody(server, clinicid, "application/json", bodyReader)
}

// NewPostClinicsClinicidCliniciansRequestWithBody generates requests for PostClinicsClinicidClinicians with any type of body
func NewPostClinicsClinicidCliniciansRequestWithBody(server string, clinicid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s/clinicians", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteClinicsClinicidCliniciansClinicianidRequest generates requests for DeleteClinicsClinicidCliniciansClinicianid
func NewDeleteClinicsClinicidCliniciansClinicianidRequest(server string, clinicid string, clinicianid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "clinicianid", clinicianid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s/clinicians/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClinicsClinicidCliniciansClinicianidRequest generates requests for GetClinicsClinicidCliniciansClinicianid
func NewGetClinicsClinicidCliniciansClinicianidRequest(server string, clinicid string, clinicianid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "clinicianid", clinicianid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s/clinicians/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchClinicsClinicidCliniciansClinicianidRequest calls the generic PatchClinicsClinicidCliniciansClinicianid builder with application/json body
func NewPatchClinicsClinicidCliniciansClinicianidRequest(server string, clinicid string, clinicianid string, body PatchClinicsClinicidCliniciansClinicianidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchClinicsClinicidCliniciansClinicianidRequestWithBody(server, clinicid, clinicianid, "application/json", bodyReader)
}

// NewPatchClinicsClinicidCliniciansClinicianidRequestWithBody generates requests for PatchClinicsClinicidCliniciansClinicianid with any type of body
func NewPatchClinicsClinicidCliniciansClinicianidRequestWithBody(server string, clinicid string, clinicianid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "clinicianid", clinicianid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s/clinicians/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewGetClinicsClinicidPatientsRequest generates requests for GetClinicsClinicidPatients
func NewGetClinicsClinicidPatientsRequest(server string, clinicid string, params *GetClinicsClinicidPatientsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s/patients", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	queryValues := queryUrl.Query()

	if params.Offset != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "offset", *params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.Limit != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "limit", *params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	if params.SortOrder != nil {

		if queryFrag, err := runtime.StyleParam("form", true, "sortOrder", *params.SortOrder); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

	}

	queryUrl.RawQuery = queryValues.Encode()

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostClinicsClinicidPatientsRequest calls the generic PostClinicsClinicidPatients builder with application/json body
func NewPostClinicsClinicidPatientsRequest(server string, clinicid string, body PostClinicsClinicidPatientsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostClinicsClinicidPatientsRequestWithBody(server, clinicid, "application/json", bodyReader)
}

// NewPostClinicsClinicidPatientsRequestWithBody generates requests for PostClinicsClinicidPatients with any type of body
func NewPostClinicsClinicidPatientsRequestWithBody(server string, clinicid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s/patients", pathParam0)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// NewDeleteClinicClinicidPatientsPatientidRequest generates requests for DeleteClinicClinicidPatientsPatientid
func NewDeleteClinicClinicidPatientsPatientidRequest(server string, clinicid string, patientid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "patientid", patientid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s/patients/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetClinicsClinicidPatientsPatientidRequest generates requests for GetClinicsClinicidPatientsPatientid
func NewGetClinicsClinicidPatientsPatientidRequest(server string, clinicid string, patientid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "patientid", patientid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s/patients/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryUrl.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPatchClinicsClinicidPatientsPatientidRequest calls the generic PatchClinicsClinicidPatientsPatientid builder with application/json body
func NewPatchClinicsClinicidPatientsPatientidRequest(server string, clinicid string, patientid string, body PatchClinicsClinicidPatientsPatientidJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPatchClinicsClinicidPatientsPatientidRequestWithBody(server, clinicid, patientid, "application/json", bodyReader)
}

// NewPatchClinicsClinicidPatientsPatientidRequestWithBody generates requests for PatchClinicsClinicidPatientsPatientid with any type of body
func NewPatchClinicsClinicidPatientsPatientidRequestWithBody(server string, clinicid string, patientid string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParam("simple", false, "clinicid", clinicid)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParam("simple", false, "patientid", patientid)
	if err != nil {
		return nil, err
	}

	queryUrl, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	basePath := fmt.Sprintf("/clinics/%s/patients/%s", pathParam0, pathParam1)
	if basePath[0] == '/' {
		basePath = basePath[1:]
	}

	queryUrl, err = queryUrl.Parse(basePath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryUrl.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)
	return req, nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetClinics request
	GetClinicsWithResponse(ctx context.Context, params *GetClinicsParams) (*GetClinicsResponse, error)

	// PostClinics request  with any body
	PostClinicsWithBodyWithResponse(ctx context.Context, params *PostClinicsParams, contentType string, body io.Reader) (*PostClinicsResponse, error)

	PostClinicsWithResponse(ctx context.Context, params *PostClinicsParams, body PostClinicsJSONRequestBody) (*PostClinicsResponse, error)

	// DeleteClinicsCliniciansClinicianid request
	DeleteClinicsCliniciansClinicianidWithResponse(ctx context.Context, clinicianid string) (*DeleteClinicsCliniciansClinicianidResponse, error)

	// GetClinicsCliniciansClinicianid request
	GetClinicsCliniciansClinicianidWithResponse(ctx context.Context, clinicianid string) (*GetClinicsCliniciansClinicianidResponse, error)

	// DeleteClinicsPatientsPatientid request
	DeleteClinicsPatientsPatientidWithResponse(ctx context.Context, patientid string) (*DeleteClinicsPatientsPatientidResponse, error)

	// GetClinicsPatientsPatientid request
	GetClinicsPatientsPatientidWithResponse(ctx context.Context, patientid string) (*GetClinicsPatientsPatientidResponse, error)

	// DeleteClinicsClinicid request
	DeleteClinicsClinicidWithResponse(ctx context.Context, clinicid string) (*DeleteClinicsClinicidResponse, error)

	// GetClinicsClinicid request
	GetClinicsClinicidWithResponse(ctx context.Context, clinicid string, params *GetClinicsClinicidParams) (*GetClinicsClinicidResponse, error)

	// PatchClinicsClinicid request  with any body
	PatchClinicsClinicidWithBodyWithResponse(ctx context.Context, clinicid string, contentType string, body io.Reader) (*PatchClinicsClinicidResponse, error)

	PatchClinicsClinicidWithResponse(ctx context.Context, clinicid string, body PatchClinicsClinicidJSONRequestBody) (*PatchClinicsClinicidResponse, error)

	// GetClinicsClinicidClinicians request
	GetClinicsClinicidCliniciansWithResponse(ctx context.Context, clinicid string, params *GetClinicsClinicidCliniciansParams) (*GetClinicsClinicidCliniciansResponse, error)

	// PostClinicsClinicidClinicians request  with any body
	PostClinicsClinicidCliniciansWithBodyWithResponse(ctx context.Context, clinicid string, contentType string, body io.Reader) (*PostClinicsClinicidCliniciansResponse, error)

	PostClinicsClinicidCliniciansWithResponse(ctx context.Context, clinicid string, body PostClinicsClinicidCliniciansJSONRequestBody) (*PostClinicsClinicidCliniciansResponse, error)

	// DeleteClinicsClinicidCliniciansClinicianid request
	DeleteClinicsClinicidCliniciansClinicianidWithResponse(ctx context.Context, clinicid string, clinicianid string) (*DeleteClinicsClinicidCliniciansClinicianidResponse, error)

	// GetClinicsClinicidCliniciansClinicianid request
	GetClinicsClinicidCliniciansClinicianidWithResponse(ctx context.Context, clinicid string, clinicianid string) (*GetClinicsClinicidCliniciansClinicianidResponse, error)

	// PatchClinicsClinicidCliniciansClinicianid request  with any body
	PatchClinicsClinicidCliniciansClinicianidWithBodyWithResponse(ctx context.Context, clinicid string, clinicianid string, contentType string, body io.Reader) (*PatchClinicsClinicidCliniciansClinicianidResponse, error)

	PatchClinicsClinicidCliniciansClinicianidWithResponse(ctx context.Context, clinicid string, clinicianid string, body PatchClinicsClinicidCliniciansClinicianidJSONRequestBody) (*PatchClinicsClinicidCliniciansClinicianidResponse, error)

	// GetClinicsClinicidPatients request
	GetClinicsClinicidPatientsWithResponse(ctx context.Context, clinicid string, params *GetClinicsClinicidPatientsParams) (*GetClinicsClinicidPatientsResponse, error)

	// PostClinicsClinicidPatients request  with any body
	PostClinicsClinicidPatientsWithBodyWithResponse(ctx context.Context, clinicid string, contentType string, body io.Reader) (*PostClinicsClinicidPatientsResponse, error)

	PostClinicsClinicidPatientsWithResponse(ctx context.Context, clinicid string, body PostClinicsClinicidPatientsJSONRequestBody) (*PostClinicsClinicidPatientsResponse, error)

	// DeleteClinicClinicidPatientsPatientid request
	DeleteClinicClinicidPatientsPatientidWithResponse(ctx context.Context, clinicid string, patientid string) (*DeleteClinicClinicidPatientsPatientidResponse, error)

	// GetClinicsClinicidPatientsPatientid request
	GetClinicsClinicidPatientsPatientidWithResponse(ctx context.Context, clinicid string, patientid string) (*GetClinicsClinicidPatientsPatientidResponse, error)

	// PatchClinicsClinicidPatientsPatientid request  with any body
	PatchClinicsClinicidPatientsPatientidWithBodyWithResponse(ctx context.Context, clinicid string, patientid string, contentType string, body io.Reader) (*PatchClinicsClinicidPatientsPatientidResponse, error)

	PatchClinicsClinicidPatientsPatientidWithResponse(ctx context.Context, clinicid string, patientid string, body PatchClinicsClinicidPatientsPatientidJSONRequestBody) (*PatchClinicsClinicidPatientsPatientidResponse, error)
}

type GetClinicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Clinic
	JSON400      *Error
	JSON403      *Error
	JSON500      *Error
}

// Status returns HTTPResponse.Status
func (r GetClinicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClinicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClinicsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PostClinicResponse
	XML200       *map[string]interface{}
}

// Status returns HTTPResponse.Status
func (r PostClinicsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClinicsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClinicsCliniciansClinicianidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClinicsCliniciansClinicianidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClinicsCliniciansClinicianidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClinicsCliniciansClinicianidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClinicsClinicians
}

// Status returns HTTPResponse.Status
func (r GetClinicsCliniciansClinicianidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClinicsCliniciansClinicianidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClinicsPatientsPatientidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClinicsPatientsPatientidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClinicsPatientsPatientidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClinicsPatientsPatientidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClinicsPatients
}

// Status returns HTTPResponse.Status
func (r GetClinicsPatientsPatientidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClinicsPatientsPatientidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClinicsClinicidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClinicsClinicidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClinicsClinicidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClinicsClinicidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClinicsPatientClinician
}

// Status returns HTTPResponse.Status
func (r GetClinicsClinicidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClinicsClinicidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchClinicsClinicidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchClinicsClinicidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchClinicsClinicidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClinicsClinicidCliniciansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClinicsClinicians
}

// Status returns HTTPResponse.Status
func (r GetClinicsClinicidCliniciansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClinicsClinicidCliniciansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClinicsClinicidCliniciansResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CliniciansPostid
}

// Status returns HTTPResponse.Status
func (r PostClinicsClinicidCliniciansResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClinicsClinicidCliniciansResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClinicsClinicidCliniciansClinicianidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClinicsClinicidCliniciansClinicianidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClinicsClinicidCliniciansClinicianidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClinicsClinicidCliniciansClinicianidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClinicsClinicians
}

// Status returns HTTPResponse.Status
func (r GetClinicsClinicidCliniciansClinicianidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClinicsClinicidCliniciansClinicianidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchClinicsClinicidCliniciansClinicianidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchClinicsClinicidCliniciansClinicianidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchClinicsClinicidCliniciansClinicianidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClinicsClinicidPatientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ClinicsPatients
}

// Status returns HTTPResponse.Status
func (r GetClinicsClinicidPatientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClinicsClinicidPatientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostClinicsClinicidPatientsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PatientPostid
}

// Status returns HTTPResponse.Status
func (r PostClinicsClinicidPatientsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostClinicsClinicidPatientsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteClinicClinicidPatientsPatientidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r DeleteClinicClinicidPatientsPatientidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteClinicClinicidPatientsPatientidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetClinicsClinicidPatientsPatientidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ClinicsPatients
}

// Status returns HTTPResponse.Status
func (r GetClinicsClinicidPatientsPatientidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetClinicsClinicidPatientsPatientidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PatchClinicsClinicidPatientsPatientidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PatchClinicsClinicidPatientsPatientidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PatchClinicsClinicidPatientsPatientidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetClinicsWithResponse request returning *GetClinicsResponse
func (c *ClientWithResponses) GetClinicsWithResponse(ctx context.Context, params *GetClinicsParams) (*GetClinicsResponse, error) {
	rsp, err := c.GetClinics(ctx, params)
	if err != nil {
		return nil, err
	}
	return ParseGetClinicsResponse(rsp)
}

// PostClinicsWithBodyWithResponse request with arbitrary body returning *PostClinicsResponse
func (c *ClientWithResponses) PostClinicsWithBodyWithResponse(ctx context.Context, params *PostClinicsParams, contentType string, body io.Reader) (*PostClinicsResponse, error) {
	rsp, err := c.PostClinicsWithBody(ctx, params, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostClinicsResponse(rsp)
}

func (c *ClientWithResponses) PostClinicsWithResponse(ctx context.Context, params *PostClinicsParams, body PostClinicsJSONRequestBody) (*PostClinicsResponse, error) {
	rsp, err := c.PostClinics(ctx, params, body)
	if err != nil {
		return nil, err
	}
	return ParsePostClinicsResponse(rsp)
}

// DeleteClinicsCliniciansClinicianidWithResponse request returning *DeleteClinicsCliniciansClinicianidResponse
func (c *ClientWithResponses) DeleteClinicsCliniciansClinicianidWithResponse(ctx context.Context, clinicianid string) (*DeleteClinicsCliniciansClinicianidResponse, error) {
	rsp, err := c.DeleteClinicsCliniciansClinicianid(ctx, clinicianid)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClinicsCliniciansClinicianidResponse(rsp)
}

// GetClinicsCliniciansClinicianidWithResponse request returning *GetClinicsCliniciansClinicianidResponse
func (c *ClientWithResponses) GetClinicsCliniciansClinicianidWithResponse(ctx context.Context, clinicianid string) (*GetClinicsCliniciansClinicianidResponse, error) {
	rsp, err := c.GetClinicsCliniciansClinicianid(ctx, clinicianid)
	if err != nil {
		return nil, err
	}
	return ParseGetClinicsCliniciansClinicianidResponse(rsp)
}

// DeleteClinicsPatientsPatientidWithResponse request returning *DeleteClinicsPatientsPatientidResponse
func (c *ClientWithResponses) DeleteClinicsPatientsPatientidWithResponse(ctx context.Context, patientid string) (*DeleteClinicsPatientsPatientidResponse, error) {
	rsp, err := c.DeleteClinicsPatientsPatientid(ctx, patientid)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClinicsPatientsPatientidResponse(rsp)
}

// GetClinicsPatientsPatientidWithResponse request returning *GetClinicsPatientsPatientidResponse
func (c *ClientWithResponses) GetClinicsPatientsPatientidWithResponse(ctx context.Context, patientid string) (*GetClinicsPatientsPatientidResponse, error) {
	rsp, err := c.GetClinicsPatientsPatientid(ctx, patientid)
	if err != nil {
		return nil, err
	}
	return ParseGetClinicsPatientsPatientidResponse(rsp)
}

// DeleteClinicsClinicidWithResponse request returning *DeleteClinicsClinicidResponse
func (c *ClientWithResponses) DeleteClinicsClinicidWithResponse(ctx context.Context, clinicid string) (*DeleteClinicsClinicidResponse, error) {
	rsp, err := c.DeleteClinicsClinicid(ctx, clinicid)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClinicsClinicidResponse(rsp)
}

// GetClinicsClinicidWithResponse request returning *GetClinicsClinicidResponse
func (c *ClientWithResponses) GetClinicsClinicidWithResponse(ctx context.Context, clinicid string, params *GetClinicsClinicidParams) (*GetClinicsClinicidResponse, error) {
	rsp, err := c.GetClinicsClinicid(ctx, clinicid, params)
	if err != nil {
		return nil, err
	}
	return ParseGetClinicsClinicidResponse(rsp)
}

// PatchClinicsClinicidWithBodyWithResponse request with arbitrary body returning *PatchClinicsClinicidResponse
func (c *ClientWithResponses) PatchClinicsClinicidWithBodyWithResponse(ctx context.Context, clinicid string, contentType string, body io.Reader) (*PatchClinicsClinicidResponse, error) {
	rsp, err := c.PatchClinicsClinicidWithBody(ctx, clinicid, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchClinicsClinicidResponse(rsp)
}

func (c *ClientWithResponses) PatchClinicsClinicidWithResponse(ctx context.Context, clinicid string, body PatchClinicsClinicidJSONRequestBody) (*PatchClinicsClinicidResponse, error) {
	rsp, err := c.PatchClinicsClinicid(ctx, clinicid, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchClinicsClinicidResponse(rsp)
}

// GetClinicsClinicidCliniciansWithResponse request returning *GetClinicsClinicidCliniciansResponse
func (c *ClientWithResponses) GetClinicsClinicidCliniciansWithResponse(ctx context.Context, clinicid string, params *GetClinicsClinicidCliniciansParams) (*GetClinicsClinicidCliniciansResponse, error) {
	rsp, err := c.GetClinicsClinicidClinicians(ctx, clinicid, params)
	if err != nil {
		return nil, err
	}
	return ParseGetClinicsClinicidCliniciansResponse(rsp)
}

// PostClinicsClinicidCliniciansWithBodyWithResponse request with arbitrary body returning *PostClinicsClinicidCliniciansResponse
func (c *ClientWithResponses) PostClinicsClinicidCliniciansWithBodyWithResponse(ctx context.Context, clinicid string, contentType string, body io.Reader) (*PostClinicsClinicidCliniciansResponse, error) {
	rsp, err := c.PostClinicsClinicidCliniciansWithBody(ctx, clinicid, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostClinicsClinicidCliniciansResponse(rsp)
}

func (c *ClientWithResponses) PostClinicsClinicidCliniciansWithResponse(ctx context.Context, clinicid string, body PostClinicsClinicidCliniciansJSONRequestBody) (*PostClinicsClinicidCliniciansResponse, error) {
	rsp, err := c.PostClinicsClinicidClinicians(ctx, clinicid, body)
	if err != nil {
		return nil, err
	}
	return ParsePostClinicsClinicidCliniciansResponse(rsp)
}

// DeleteClinicsClinicidCliniciansClinicianidWithResponse request returning *DeleteClinicsClinicidCliniciansClinicianidResponse
func (c *ClientWithResponses) DeleteClinicsClinicidCliniciansClinicianidWithResponse(ctx context.Context, clinicid string, clinicianid string) (*DeleteClinicsClinicidCliniciansClinicianidResponse, error) {
	rsp, err := c.DeleteClinicsClinicidCliniciansClinicianid(ctx, clinicid, clinicianid)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClinicsClinicidCliniciansClinicianidResponse(rsp)
}

// GetClinicsClinicidCliniciansClinicianidWithResponse request returning *GetClinicsClinicidCliniciansClinicianidResponse
func (c *ClientWithResponses) GetClinicsClinicidCliniciansClinicianidWithResponse(ctx context.Context, clinicid string, clinicianid string) (*GetClinicsClinicidCliniciansClinicianidResponse, error) {
	rsp, err := c.GetClinicsClinicidCliniciansClinicianid(ctx, clinicid, clinicianid)
	if err != nil {
		return nil, err
	}
	return ParseGetClinicsClinicidCliniciansClinicianidResponse(rsp)
}

// PatchClinicsClinicidCliniciansClinicianidWithBodyWithResponse request with arbitrary body returning *PatchClinicsClinicidCliniciansClinicianidResponse
func (c *ClientWithResponses) PatchClinicsClinicidCliniciansClinicianidWithBodyWithResponse(ctx context.Context, clinicid string, clinicianid string, contentType string, body io.Reader) (*PatchClinicsClinicidCliniciansClinicianidResponse, error) {
	rsp, err := c.PatchClinicsClinicidCliniciansClinicianidWithBody(ctx, clinicid, clinicianid, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchClinicsClinicidCliniciansClinicianidResponse(rsp)
}

func (c *ClientWithResponses) PatchClinicsClinicidCliniciansClinicianidWithResponse(ctx context.Context, clinicid string, clinicianid string, body PatchClinicsClinicidCliniciansClinicianidJSONRequestBody) (*PatchClinicsClinicidCliniciansClinicianidResponse, error) {
	rsp, err := c.PatchClinicsClinicidCliniciansClinicianid(ctx, clinicid, clinicianid, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchClinicsClinicidCliniciansClinicianidResponse(rsp)
}

// GetClinicsClinicidPatientsWithResponse request returning *GetClinicsClinicidPatientsResponse
func (c *ClientWithResponses) GetClinicsClinicidPatientsWithResponse(ctx context.Context, clinicid string, params *GetClinicsClinicidPatientsParams) (*GetClinicsClinicidPatientsResponse, error) {
	rsp, err := c.GetClinicsClinicidPatients(ctx, clinicid, params)
	if err != nil {
		return nil, err
	}
	return ParseGetClinicsClinicidPatientsResponse(rsp)
}

// PostClinicsClinicidPatientsWithBodyWithResponse request with arbitrary body returning *PostClinicsClinicidPatientsResponse
func (c *ClientWithResponses) PostClinicsClinicidPatientsWithBodyWithResponse(ctx context.Context, clinicid string, contentType string, body io.Reader) (*PostClinicsClinicidPatientsResponse, error) {
	rsp, err := c.PostClinicsClinicidPatientsWithBody(ctx, clinicid, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePostClinicsClinicidPatientsResponse(rsp)
}

func (c *ClientWithResponses) PostClinicsClinicidPatientsWithResponse(ctx context.Context, clinicid string, body PostClinicsClinicidPatientsJSONRequestBody) (*PostClinicsClinicidPatientsResponse, error) {
	rsp, err := c.PostClinicsClinicidPatients(ctx, clinicid, body)
	if err != nil {
		return nil, err
	}
	return ParsePostClinicsClinicidPatientsResponse(rsp)
}

// DeleteClinicClinicidPatientsPatientidWithResponse request returning *DeleteClinicClinicidPatientsPatientidResponse
func (c *ClientWithResponses) DeleteClinicClinicidPatientsPatientidWithResponse(ctx context.Context, clinicid string, patientid string) (*DeleteClinicClinicidPatientsPatientidResponse, error) {
	rsp, err := c.DeleteClinicClinicidPatientsPatientid(ctx, clinicid, patientid)
	if err != nil {
		return nil, err
	}
	return ParseDeleteClinicClinicidPatientsPatientidResponse(rsp)
}

// GetClinicsClinicidPatientsPatientidWithResponse request returning *GetClinicsClinicidPatientsPatientidResponse
func (c *ClientWithResponses) GetClinicsClinicidPatientsPatientidWithResponse(ctx context.Context, clinicid string, patientid string) (*GetClinicsClinicidPatientsPatientidResponse, error) {
	rsp, err := c.GetClinicsClinicidPatientsPatientid(ctx, clinicid, patientid)
	if err != nil {
		return nil, err
	}
	return ParseGetClinicsClinicidPatientsPatientidResponse(rsp)
}

// PatchClinicsClinicidPatientsPatientidWithBodyWithResponse request with arbitrary body returning *PatchClinicsClinicidPatientsPatientidResponse
func (c *ClientWithResponses) PatchClinicsClinicidPatientsPatientidWithBodyWithResponse(ctx context.Context, clinicid string, patientid string, contentType string, body io.Reader) (*PatchClinicsClinicidPatientsPatientidResponse, error) {
	rsp, err := c.PatchClinicsClinicidPatientsPatientidWithBody(ctx, clinicid, patientid, contentType, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchClinicsClinicidPatientsPatientidResponse(rsp)
}

func (c *ClientWithResponses) PatchClinicsClinicidPatientsPatientidWithResponse(ctx context.Context, clinicid string, patientid string, body PatchClinicsClinicidPatientsPatientidJSONRequestBody) (*PatchClinicsClinicidPatientsPatientidResponse, error) {
	rsp, err := c.PatchClinicsClinicidPatientsPatientid(ctx, clinicid, patientid, body)
	if err != nil {
		return nil, err
	}
	return ParsePatchClinicsClinicidPatientsPatientidResponse(rsp)
}

// ParseGetClinicsResponse parses an HTTP response from a GetClinicsWithResponse call
func ParseGetClinicsResponse(rsp *http.Response) (*GetClinicsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClinicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Clinic
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest Error
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParsePostClinicsResponse parses an HTTP response from a PostClinicsWithResponse call
func ParsePostClinicsResponse(rsp *http.Response) (*PostClinicsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostClinicsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "xml") && rsp.StatusCode == 200:
		var dest map[string]interface{}
		if err := xml.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.XML200 = &dest

	}

	return response, nil
}

// ParseDeleteClinicsCliniciansClinicianidResponse parses an HTTP response from a DeleteClinicsCliniciansClinicianidWithResponse call
func ParseDeleteClinicsCliniciansClinicianidResponse(rsp *http.Response) (*DeleteClinicsCliniciansClinicianidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClinicsCliniciansClinicianidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClinicsCliniciansClinicianidResponse parses an HTTP response from a GetClinicsCliniciansClinicianidWithResponse call
func ParseGetClinicsCliniciansClinicianidResponse(rsp *http.Response) (*GetClinicsCliniciansClinicianidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClinicsCliniciansClinicianidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClinicsClinicians
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClinicsPatientsPatientidResponse parses an HTTP response from a DeleteClinicsPatientsPatientidWithResponse call
func ParseDeleteClinicsPatientsPatientidResponse(rsp *http.Response) (*DeleteClinicsPatientsPatientidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClinicsPatientsPatientidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClinicsPatientsPatientidResponse parses an HTTP response from a GetClinicsPatientsPatientidWithResponse call
func ParseGetClinicsPatientsPatientidResponse(rsp *http.Response) (*GetClinicsPatientsPatientidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClinicsPatientsPatientidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClinicsPatients
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClinicsClinicidResponse parses an HTTP response from a DeleteClinicsClinicidWithResponse call
func ParseDeleteClinicsClinicidResponse(rsp *http.Response) (*DeleteClinicsClinicidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClinicsClinicidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClinicsClinicidResponse parses an HTTP response from a GetClinicsClinicidWithResponse call
func ParseGetClinicsClinicidResponse(rsp *http.Response) (*GetClinicsClinicidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClinicsClinicidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClinicsPatientClinician
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchClinicsClinicidResponse parses an HTTP response from a PatchClinicsClinicidWithResponse call
func ParsePatchClinicsClinicidResponse(rsp *http.Response) (*PatchClinicsClinicidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchClinicsClinicidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClinicsClinicidCliniciansResponse parses an HTTP response from a GetClinicsClinicidCliniciansWithResponse call
func ParseGetClinicsClinicidCliniciansResponse(rsp *http.Response) (*GetClinicsClinicidCliniciansResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClinicsClinicidCliniciansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClinicsClinicians
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClinicsClinicidCliniciansResponse parses an HTTP response from a PostClinicsClinicidCliniciansWithResponse call
func ParsePostClinicsClinicidCliniciansResponse(rsp *http.Response) (*PostClinicsClinicidCliniciansResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostClinicsClinicidCliniciansResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CliniciansPostid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClinicsClinicidCliniciansClinicianidResponse parses an HTTP response from a DeleteClinicsClinicidCliniciansClinicianidWithResponse call
func ParseDeleteClinicsClinicidCliniciansClinicianidResponse(rsp *http.Response) (*DeleteClinicsClinicidCliniciansClinicianidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClinicsClinicidCliniciansClinicianidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClinicsClinicidCliniciansClinicianidResponse parses an HTTP response from a GetClinicsClinicidCliniciansClinicianidWithResponse call
func ParseGetClinicsClinicidCliniciansClinicianidResponse(rsp *http.Response) (*GetClinicsClinicidCliniciansClinicianidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClinicsClinicidCliniciansClinicianidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClinicsClinicians
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchClinicsClinicidCliniciansClinicianidResponse parses an HTTP response from a PatchClinicsClinicidCliniciansClinicianidWithResponse call
func ParsePatchClinicsClinicidCliniciansClinicianidResponse(rsp *http.Response) (*PatchClinicsClinicidCliniciansClinicianidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchClinicsClinicidCliniciansClinicianidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClinicsClinicidPatientsResponse parses an HTTP response from a GetClinicsClinicidPatientsWithResponse call
func ParseGetClinicsClinicidPatientsResponse(rsp *http.Response) (*GetClinicsClinicidPatientsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClinicsClinicidPatientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ClinicsPatients
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePostClinicsClinicidPatientsResponse parses an HTTP response from a PostClinicsClinicidPatientsWithResponse call
func ParsePostClinicsClinicidPatientsResponse(rsp *http.Response) (*PostClinicsClinicidPatientsResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PostClinicsClinicidPatientsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PatientPostid
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseDeleteClinicClinicidPatientsPatientidResponse parses an HTTP response from a DeleteClinicClinicidPatientsPatientidWithResponse call
func ParseDeleteClinicClinicidPatientsPatientidResponse(rsp *http.Response) (*DeleteClinicClinicidPatientsPatientidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &DeleteClinicClinicidPatientsPatientidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

// ParseGetClinicsClinicidPatientsPatientidResponse parses an HTTP response from a GetClinicsClinicidPatientsPatientidWithResponse call
func ParseGetClinicsClinicidPatientsPatientidResponse(rsp *http.Response) (*GetClinicsClinicidPatientsPatientidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &GetClinicsClinicidPatientsPatientidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ClinicsPatients
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePatchClinicsClinicidPatientsPatientidResponse parses an HTTP response from a PatchClinicsClinicidPatientsPatientidWithResponse call
func ParsePatchClinicsClinicidPatientsPatientidResponse(rsp *http.Response) (*PatchClinicsClinicidPatientsPatientidResponse, error) {
	bodyBytes, err := ioutil.ReadAll(rsp.Body)
	defer rsp.Body.Close()
	if err != nil {
		return nil, err
	}

	response := &PatchClinicsClinicidPatientsPatientidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	}

	return response, nil
}

