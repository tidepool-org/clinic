// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package client

import (
	"time"

	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	SessionTokenScopes = "sessionToken.Scopes"
)

// Defines values for ClinicV1ClinicSize.
const (
	N0249   ClinicV1ClinicSize = "0-249"
	N1000   ClinicV1ClinicSize = "1000+"
	N250499 ClinicV1ClinicSize = "250-499"
	N500999 ClinicV1ClinicSize = "500-999"
)

// Defines values for ClinicV1ClinicType.
const (
	HealthcareSystem ClinicV1ClinicType = "healthcare_system"
	Other            ClinicV1ClinicType = "other"
	ProviderPractice ClinicV1ClinicType = "provider_practice"
	Researcher       ClinicV1ClinicType = "researcher"
	VeterinaryClinic ClinicV1ClinicType = "veterinary_clinic"
)

// Defines values for ClinicV1PreferredBgUnits.
const (
	MgdL  ClinicV1PreferredBgUnits = "mg/dL"
	MmolL ClinicV1PreferredBgUnits = "mmol/L"
)

// Defines values for ClinicTimezoneV1.
const (
	AfricaAbidjan                  ClinicTimezoneV1 = "Africa/Abidjan"
	AfricaAccra                    ClinicTimezoneV1 = "Africa/Accra"
	AfricaAddisAbaba               ClinicTimezoneV1 = "Africa/Addis_Ababa"
	AfricaAlgiers                  ClinicTimezoneV1 = "Africa/Algiers"
	AfricaAsmara                   ClinicTimezoneV1 = "Africa/Asmara"
	AfricaAsmera                   ClinicTimezoneV1 = "Africa/Asmera"
	AfricaBamako                   ClinicTimezoneV1 = "Africa/Bamako"
	AfricaBangui                   ClinicTimezoneV1 = "Africa/Bangui"
	AfricaBanjul                   ClinicTimezoneV1 = "Africa/Banjul"
	AfricaBissau                   ClinicTimezoneV1 = "Africa/Bissau"
	AfricaBlantyre                 ClinicTimezoneV1 = "Africa/Blantyre"
	AfricaBrazzaville              ClinicTimezoneV1 = "Africa/Brazzaville"
	AfricaBujumbura                ClinicTimezoneV1 = "Africa/Bujumbura"
	AfricaCairo                    ClinicTimezoneV1 = "Africa/Cairo"
	AfricaCasablanca               ClinicTimezoneV1 = "Africa/Casablanca"
	AfricaCeuta                    ClinicTimezoneV1 = "Africa/Ceuta"
	AfricaConakry                  ClinicTimezoneV1 = "Africa/Conakry"
	AfricaDakar                    ClinicTimezoneV1 = "Africa/Dakar"
	AfricaDarEsSalaam              ClinicTimezoneV1 = "Africa/Dar_es_Salaam"
	AfricaDjibouti                 ClinicTimezoneV1 = "Africa/Djibouti"
	AfricaDouala                   ClinicTimezoneV1 = "Africa/Douala"
	AfricaElAaiun                  ClinicTimezoneV1 = "Africa/El_Aaiun"
	AfricaFreetown                 ClinicTimezoneV1 = "Africa/Freetown"
	AfricaGaborone                 ClinicTimezoneV1 = "Africa/Gaborone"
	AfricaHarare                   ClinicTimezoneV1 = "Africa/Harare"
	AfricaJohannesburg             ClinicTimezoneV1 = "Africa/Johannesburg"
	AfricaJuba                     ClinicTimezoneV1 = "Africa/Juba"
	AfricaKampala                  ClinicTimezoneV1 = "Africa/Kampala"
	AfricaKhartoum                 ClinicTimezoneV1 = "Africa/Khartoum"
	AfricaKigali                   ClinicTimezoneV1 = "Africa/Kigali"
	AfricaKinshasa                 ClinicTimezoneV1 = "Africa/Kinshasa"
	AfricaLagos                    ClinicTimezoneV1 = "Africa/Lagos"
	AfricaLibreville               ClinicTimezoneV1 = "Africa/Libreville"
	AfricaLome                     ClinicTimezoneV1 = "Africa/Lome"
	AfricaLuanda                   ClinicTimezoneV1 = "Africa/Luanda"
	AfricaLubumbashi               ClinicTimezoneV1 = "Africa/Lubumbashi"
	AfricaLusaka                   ClinicTimezoneV1 = "Africa/Lusaka"
	AfricaMalabo                   ClinicTimezoneV1 = "Africa/Malabo"
	AfricaMaputo                   ClinicTimezoneV1 = "Africa/Maputo"
	AfricaMaseru                   ClinicTimezoneV1 = "Africa/Maseru"
	AfricaMbabane                  ClinicTimezoneV1 = "Africa/Mbabane"
	AfricaMogadishu                ClinicTimezoneV1 = "Africa/Mogadishu"
	AfricaMonrovia                 ClinicTimezoneV1 = "Africa/Monrovia"
	AfricaNairobi                  ClinicTimezoneV1 = "Africa/Nairobi"
	AfricaNdjamena                 ClinicTimezoneV1 = "Africa/Ndjamena"
	AfricaNiamey                   ClinicTimezoneV1 = "Africa/Niamey"
	AfricaNouakchott               ClinicTimezoneV1 = "Africa/Nouakchott"
	AfricaOuagadougou              ClinicTimezoneV1 = "Africa/Ouagadougou"
	AfricaPortoNovo                ClinicTimezoneV1 = "Africa/Porto-Novo"
	AfricaSaoTome                  ClinicTimezoneV1 = "Africa/Sao_Tome"
	AfricaTimbuktu                 ClinicTimezoneV1 = "Africa/Timbuktu"
	AfricaTripoli                  ClinicTimezoneV1 = "Africa/Tripoli"
	AfricaTunis                    ClinicTimezoneV1 = "Africa/Tunis"
	AfricaWindhoek                 ClinicTimezoneV1 = "Africa/Windhoek"
	AmericaAdak                    ClinicTimezoneV1 = "America/Adak"
	AmericaAnchorage               ClinicTimezoneV1 = "America/Anchorage"
	AmericaAnguilla                ClinicTimezoneV1 = "America/Anguilla"
	AmericaAntigua                 ClinicTimezoneV1 = "America/Antigua"
	AmericaAraguaina               ClinicTimezoneV1 = "America/Araguaina"
	AmericaArgentinaBuenosAires    ClinicTimezoneV1 = "America/Argentina/Buenos_Aires"
	AmericaArgentinaCatamarca      ClinicTimezoneV1 = "America/Argentina/Catamarca"
	AmericaArgentinaComodRivadavia ClinicTimezoneV1 = "America/Argentina/ComodRivadavia"
	AmericaArgentinaCordoba        ClinicTimezoneV1 = "America/Argentina/Cordoba"
	AmericaArgentinaJujuy          ClinicTimezoneV1 = "America/Argentina/Jujuy"
	AmericaArgentinaLaRioja        ClinicTimezoneV1 = "America/Argentina/La_Rioja"
	AmericaArgentinaMendoza        ClinicTimezoneV1 = "America/Argentina/Mendoza"
	AmericaArgentinaRioGallegos    ClinicTimezoneV1 = "America/Argentina/Rio_Gallegos"
	AmericaArgentinaSalta          ClinicTimezoneV1 = "America/Argentina/Salta"
	AmericaArgentinaSanJuan        ClinicTimezoneV1 = "America/Argentina/San_Juan"
	AmericaArgentinaSanLuis        ClinicTimezoneV1 = "America/Argentina/San_Luis"
	AmericaArgentinaTucuman        ClinicTimezoneV1 = "America/Argentina/Tucuman"
	AmericaArgentinaUshuaia        ClinicTimezoneV1 = "America/Argentina/Ushuaia"
	AmericaAruba                   ClinicTimezoneV1 = "America/Aruba"
	AmericaAsuncion                ClinicTimezoneV1 = "America/Asuncion"
	AmericaAtikokan                ClinicTimezoneV1 = "America/Atikokan"
	AmericaAtka                    ClinicTimezoneV1 = "America/Atka"
	AmericaBahia                   ClinicTimezoneV1 = "America/Bahia"
	AmericaBahiaBanderas           ClinicTimezoneV1 = "America/Bahia_Banderas"
	AmericaBarbados                ClinicTimezoneV1 = "America/Barbados"
	AmericaBelem                   ClinicTimezoneV1 = "America/Belem"
	AmericaBelize                  ClinicTimezoneV1 = "America/Belize"
	AmericaBlancSablon             ClinicTimezoneV1 = "America/Blanc-Sablon"
	AmericaBoaVista                ClinicTimezoneV1 = "America/Boa_Vista"
	AmericaBogota                  ClinicTimezoneV1 = "America/Bogota"
	AmericaBoise                   ClinicTimezoneV1 = "America/Boise"
	AmericaBuenosAires             ClinicTimezoneV1 = "America/Buenos_Aires"
	AmericaCambridgeBay            ClinicTimezoneV1 = "America/Cambridge_Bay"
	AmericaCampoGrande             ClinicTimezoneV1 = "America/Campo_Grande"
	AmericaCancun                  ClinicTimezoneV1 = "America/Cancun"
	AmericaCaracas                 ClinicTimezoneV1 = "America/Caracas"
	AmericaCatamarca               ClinicTimezoneV1 = "America/Catamarca"
	AmericaCayenne                 ClinicTimezoneV1 = "America/Cayenne"
	AmericaCayman                  ClinicTimezoneV1 = "America/Cayman"
	AmericaChicago                 ClinicTimezoneV1 = "America/Chicago"
	AmericaChihuahua               ClinicTimezoneV1 = "America/Chihuahua"
	AmericaCiudadJuarez            ClinicTimezoneV1 = "America/Ciudad_Juarez"
	AmericaCoralHarbour            ClinicTimezoneV1 = "America/Coral_Harbour"
	AmericaCordoba                 ClinicTimezoneV1 = "America/Cordoba"
	AmericaCostaRica               ClinicTimezoneV1 = "America/Costa_Rica"
	AmericaCreston                 ClinicTimezoneV1 = "America/Creston"
	AmericaCuiaba                  ClinicTimezoneV1 = "America/Cuiaba"
	AmericaCuracao                 ClinicTimezoneV1 = "America/Curacao"
	AmericaDanmarkshavn            ClinicTimezoneV1 = "America/Danmarkshavn"
	AmericaDawson                  ClinicTimezoneV1 = "America/Dawson"
	AmericaDawsonCreek             ClinicTimezoneV1 = "America/Dawson_Creek"
	AmericaDenver                  ClinicTimezoneV1 = "America/Denver"
	AmericaDetroit                 ClinicTimezoneV1 = "America/Detroit"
	AmericaDominica                ClinicTimezoneV1 = "America/Dominica"
	AmericaEdmonton                ClinicTimezoneV1 = "America/Edmonton"
	AmericaEirunepe                ClinicTimezoneV1 = "America/Eirunepe"
	AmericaElSalvador              ClinicTimezoneV1 = "America/El_Salvador"
	AmericaEnsenada                ClinicTimezoneV1 = "America/Ensenada"
	AmericaFortNelson              ClinicTimezoneV1 = "America/Fort_Nelson"
	AmericaFortWayne               ClinicTimezoneV1 = "America/Fort_Wayne"
	AmericaFortaleza               ClinicTimezoneV1 = "America/Fortaleza"
	AmericaGlaceBay                ClinicTimezoneV1 = "America/Glace_Bay"
	AmericaGodthab                 ClinicTimezoneV1 = "America/Godthab"
	AmericaGooseBay                ClinicTimezoneV1 = "America/Goose_Bay"
	AmericaGrandTurk               ClinicTimezoneV1 = "America/Grand_Turk"
	AmericaGrenada                 ClinicTimezoneV1 = "America/Grenada"
	AmericaGuadeloupe              ClinicTimezoneV1 = "America/Guadeloupe"
	AmericaGuatemala               ClinicTimezoneV1 = "America/Guatemala"
	AmericaGuayaquil               ClinicTimezoneV1 = "America/Guayaquil"
	AmericaGuyana                  ClinicTimezoneV1 = "America/Guyana"
	AmericaHalifax                 ClinicTimezoneV1 = "America/Halifax"
	AmericaHavana                  ClinicTimezoneV1 = "America/Havana"
	AmericaHermosillo              ClinicTimezoneV1 = "America/Hermosillo"
	AmericaIndianaIndianapolis     ClinicTimezoneV1 = "America/Indiana/Indianapolis"
	AmericaIndianaKnox             ClinicTimezoneV1 = "America/Indiana/Knox"
	AmericaIndianaMarengo          ClinicTimezoneV1 = "America/Indiana/Marengo"
	AmericaIndianaPetersburg       ClinicTimezoneV1 = "America/Indiana/Petersburg"
	AmericaIndianaTellCity         ClinicTimezoneV1 = "America/Indiana/Tell_City"
	AmericaIndianaVevay            ClinicTimezoneV1 = "America/Indiana/Vevay"
	AmericaIndianaVincennes        ClinicTimezoneV1 = "America/Indiana/Vincennes"
	AmericaIndianaWinamac          ClinicTimezoneV1 = "America/Indiana/Winamac"
	AmericaIndianapolis            ClinicTimezoneV1 = "America/Indianapolis"
	AmericaInuvik                  ClinicTimezoneV1 = "America/Inuvik"
	AmericaIqaluit                 ClinicTimezoneV1 = "America/Iqaluit"
	AmericaJamaica                 ClinicTimezoneV1 = "America/Jamaica"
	AmericaJujuy                   ClinicTimezoneV1 = "America/Jujuy"
	AmericaJuneau                  ClinicTimezoneV1 = "America/Juneau"
	AmericaKentuckyLouisville      ClinicTimezoneV1 = "America/Kentucky/Louisville"
	AmericaKentuckyMonticello      ClinicTimezoneV1 = "America/Kentucky/Monticello"
	AmericaKnoxIN                  ClinicTimezoneV1 = "America/Knox_IN"
	AmericaKralendijk              ClinicTimezoneV1 = "America/Kralendijk"
	AmericaLaPaz                   ClinicTimezoneV1 = "America/La_Paz"
	AmericaLima                    ClinicTimezoneV1 = "America/Lima"
	AmericaLosAngeles              ClinicTimezoneV1 = "America/Los_Angeles"
	AmericaLouisville              ClinicTimezoneV1 = "America/Louisville"
	AmericaLowerPrinces            ClinicTimezoneV1 = "America/Lower_Princes"
	AmericaMaceio                  ClinicTimezoneV1 = "America/Maceio"
	AmericaManagua                 ClinicTimezoneV1 = "America/Managua"
	AmericaManaus                  ClinicTimezoneV1 = "America/Manaus"
	AmericaMarigot                 ClinicTimezoneV1 = "America/Marigot"
	AmericaMartinique              ClinicTimezoneV1 = "America/Martinique"
	AmericaMatamoros               ClinicTimezoneV1 = "America/Matamoros"
	AmericaMazatlan                ClinicTimezoneV1 = "America/Mazatlan"
	AmericaMendoza                 ClinicTimezoneV1 = "America/Mendoza"
	AmericaMenominee               ClinicTimezoneV1 = "America/Menominee"
	AmericaMerida                  ClinicTimezoneV1 = "America/Merida"
	AmericaMetlakatla              ClinicTimezoneV1 = "America/Metlakatla"
	AmericaMexicoCity              ClinicTimezoneV1 = "America/Mexico_City"
	AmericaMiquelon                ClinicTimezoneV1 = "America/Miquelon"
	AmericaMoncton                 ClinicTimezoneV1 = "America/Moncton"
	AmericaMonterrey               ClinicTimezoneV1 = "America/Monterrey"
	AmericaMontevideo              ClinicTimezoneV1 = "America/Montevideo"
	AmericaMontreal                ClinicTimezoneV1 = "America/Montreal"
	AmericaMontserrat              ClinicTimezoneV1 = "America/Montserrat"
	AmericaNassau                  ClinicTimezoneV1 = "America/Nassau"
	AmericaNewYork                 ClinicTimezoneV1 = "America/New_York"
	AmericaNipigon                 ClinicTimezoneV1 = "America/Nipigon"
	AmericaNome                    ClinicTimezoneV1 = "America/Nome"
	AmericaNoronha                 ClinicTimezoneV1 = "America/Noronha"
	AmericaNorthDakotaBeulah       ClinicTimezoneV1 = "America/North_Dakota/Beulah"
	AmericaNorthDakotaCenter       ClinicTimezoneV1 = "America/North_Dakota/Center"
	AmericaNorthDakotaNewSalem     ClinicTimezoneV1 = "America/North_Dakota/New_Salem"
	AmericaNuuk                    ClinicTimezoneV1 = "America/Nuuk"
	AmericaOjinaga                 ClinicTimezoneV1 = "America/Ojinaga"
	AmericaPanama                  ClinicTimezoneV1 = "America/Panama"
	AmericaPangnirtung             ClinicTimezoneV1 = "America/Pangnirtung"
	AmericaParamaribo              ClinicTimezoneV1 = "America/Paramaribo"
	AmericaPhoenix                 ClinicTimezoneV1 = "America/Phoenix"
	AmericaPortAuPrince            ClinicTimezoneV1 = "America/Port-au-Prince"
	AmericaPortOfSpain             ClinicTimezoneV1 = "America/Port_of_Spain"
	AmericaPortoAcre               ClinicTimezoneV1 = "America/Porto_Acre"
	AmericaPortoVelho              ClinicTimezoneV1 = "America/Porto_Velho"
	AmericaPuertoRico              ClinicTimezoneV1 = "America/Puerto_Rico"
	AmericaPuntaArenas             ClinicTimezoneV1 = "America/Punta_Arenas"
	AmericaRainyRiver              ClinicTimezoneV1 = "America/Rainy_River"
	AmericaRankinInlet             ClinicTimezoneV1 = "America/Rankin_Inlet"
	AmericaRecife                  ClinicTimezoneV1 = "America/Recife"
	AmericaRegina                  ClinicTimezoneV1 = "America/Regina"
	AmericaResolute                ClinicTimezoneV1 = "America/Resolute"
	AmericaRioBranco               ClinicTimezoneV1 = "America/Rio_Branco"
	AmericaRosario                 ClinicTimezoneV1 = "America/Rosario"
	AmericaSantaIsabel             ClinicTimezoneV1 = "America/Santa_Isabel"
	AmericaSantarem                ClinicTimezoneV1 = "America/Santarem"
	AmericaSantiago                ClinicTimezoneV1 = "America/Santiago"
	AmericaSantoDomingo            ClinicTimezoneV1 = "America/Santo_Domingo"
	AmericaSaoPaulo                ClinicTimezoneV1 = "America/Sao_Paulo"
	AmericaScoresbysund            ClinicTimezoneV1 = "America/Scoresbysund"
	AmericaShiprock                ClinicTimezoneV1 = "America/Shiprock"
	AmericaSitka                   ClinicTimezoneV1 = "America/Sitka"
	AmericaStBarthelemy            ClinicTimezoneV1 = "America/St_Barthelemy"
	AmericaStJohns                 ClinicTimezoneV1 = "America/St_Johns"
	AmericaStKitts                 ClinicTimezoneV1 = "America/St_Kitts"
	AmericaStLucia                 ClinicTimezoneV1 = "America/St_Lucia"
	AmericaStThomas                ClinicTimezoneV1 = "America/St_Thomas"
	AmericaStVincent               ClinicTimezoneV1 = "America/St_Vincent"
	AmericaSwiftCurrent            ClinicTimezoneV1 = "America/Swift_Current"
	AmericaTegucigalpa             ClinicTimezoneV1 = "America/Tegucigalpa"
	AmericaThule                   ClinicTimezoneV1 = "America/Thule"
	AmericaThunderBay              ClinicTimezoneV1 = "America/Thunder_Bay"
	AmericaTijuana                 ClinicTimezoneV1 = "America/Tijuana"
	AmericaToronto                 ClinicTimezoneV1 = "America/Toronto"
	AmericaTortola                 ClinicTimezoneV1 = "America/Tortola"
	AmericaVancouver               ClinicTimezoneV1 = "America/Vancouver"
	AmericaVirgin                  ClinicTimezoneV1 = "America/Virgin"
	AmericaWhitehorse              ClinicTimezoneV1 = "America/Whitehorse"
	AmericaWinnipeg                ClinicTimezoneV1 = "America/Winnipeg"
	AmericaYakutat                 ClinicTimezoneV1 = "America/Yakutat"
	AmericaYellowknife             ClinicTimezoneV1 = "America/Yellowknife"
	AntarcticaCasey                ClinicTimezoneV1 = "Antarctica/Casey"
	AntarcticaDavis                ClinicTimezoneV1 = "Antarctica/Davis"
	AntarcticaDumontDUrville       ClinicTimezoneV1 = "Antarctica/DumontDUrville"
	AntarcticaMacquarie            ClinicTimezoneV1 = "Antarctica/Macquarie"
	AntarcticaMawson               ClinicTimezoneV1 = "Antarctica/Mawson"
	AntarcticaMcMurdo              ClinicTimezoneV1 = "Antarctica/McMurdo"
	AntarcticaPalmer               ClinicTimezoneV1 = "Antarctica/Palmer"
	AntarcticaRothera              ClinicTimezoneV1 = "Antarctica/Rothera"
	AntarcticaSouthPole            ClinicTimezoneV1 = "Antarctica/South_Pole"
	AntarcticaSyowa                ClinicTimezoneV1 = "Antarctica/Syowa"
	AntarcticaTroll                ClinicTimezoneV1 = "Antarctica/Troll"
	AntarcticaVostok               ClinicTimezoneV1 = "Antarctica/Vostok"
	ArcticLongyearbyen             ClinicTimezoneV1 = "Arctic/Longyearbyen"
	AsiaAden                       ClinicTimezoneV1 = "Asia/Aden"
	AsiaAlmaty                     ClinicTimezoneV1 = "Asia/Almaty"
	AsiaAmman                      ClinicTimezoneV1 = "Asia/Amman"
	AsiaAnadyr                     ClinicTimezoneV1 = "Asia/Anadyr"
	AsiaAqtau                      ClinicTimezoneV1 = "Asia/Aqtau"
	AsiaAqtobe                     ClinicTimezoneV1 = "Asia/Aqtobe"
	AsiaAshgabat                   ClinicTimezoneV1 = "Asia/Ashgabat"
	AsiaAshkhabad                  ClinicTimezoneV1 = "Asia/Ashkhabad"
	AsiaAtyrau                     ClinicTimezoneV1 = "Asia/Atyrau"
	AsiaBaghdad                    ClinicTimezoneV1 = "Asia/Baghdad"
	AsiaBahrain                    ClinicTimezoneV1 = "Asia/Bahrain"
	AsiaBaku                       ClinicTimezoneV1 = "Asia/Baku"
	AsiaBangkok                    ClinicTimezoneV1 = "Asia/Bangkok"
	AsiaBarnaul                    ClinicTimezoneV1 = "Asia/Barnaul"
	AsiaBeirut                     ClinicTimezoneV1 = "Asia/Beirut"
	AsiaBishkek                    ClinicTimezoneV1 = "Asia/Bishkek"
	AsiaBrunei                     ClinicTimezoneV1 = "Asia/Brunei"
	AsiaCalcutta                   ClinicTimezoneV1 = "Asia/Calcutta"
	AsiaChita                      ClinicTimezoneV1 = "Asia/Chita"
	AsiaChoibalsan                 ClinicTimezoneV1 = "Asia/Choibalsan"
	AsiaChongqing                  ClinicTimezoneV1 = "Asia/Chongqing"
	AsiaChungking                  ClinicTimezoneV1 = "Asia/Chungking"
	AsiaColombo                    ClinicTimezoneV1 = "Asia/Colombo"
	AsiaDacca                      ClinicTimezoneV1 = "Asia/Dacca"
	AsiaDamascus                   ClinicTimezoneV1 = "Asia/Damascus"
	AsiaDhaka                      ClinicTimezoneV1 = "Asia/Dhaka"
	AsiaDili                       ClinicTimezoneV1 = "Asia/Dili"
	AsiaDubai                      ClinicTimezoneV1 = "Asia/Dubai"
	AsiaDushanbe                   ClinicTimezoneV1 = "Asia/Dushanbe"
	AsiaFamagusta                  ClinicTimezoneV1 = "Asia/Famagusta"
	AsiaGaza                       ClinicTimezoneV1 = "Asia/Gaza"
	AsiaHarbin                     ClinicTimezoneV1 = "Asia/Harbin"
	AsiaHebron                     ClinicTimezoneV1 = "Asia/Hebron"
	AsiaHoChiMinh                  ClinicTimezoneV1 = "Asia/Ho_Chi_Minh"
	AsiaHongKong                   ClinicTimezoneV1 = "Asia/Hong_Kong"
	AsiaHovd                       ClinicTimezoneV1 = "Asia/Hovd"
	AsiaIrkutsk                    ClinicTimezoneV1 = "Asia/Irkutsk"
	AsiaIstanbul                   ClinicTimezoneV1 = "Asia/Istanbul"
	AsiaJakarta                    ClinicTimezoneV1 = "Asia/Jakarta"
	AsiaJayapura                   ClinicTimezoneV1 = "Asia/Jayapura"
	AsiaJerusalem                  ClinicTimezoneV1 = "Asia/Jerusalem"
	AsiaKabul                      ClinicTimezoneV1 = "Asia/Kabul"
	AsiaKamchatka                  ClinicTimezoneV1 = "Asia/Kamchatka"
	AsiaKarachi                    ClinicTimezoneV1 = "Asia/Karachi"
	AsiaKashgar                    ClinicTimezoneV1 = "Asia/Kashgar"
	AsiaKathmandu                  ClinicTimezoneV1 = "Asia/Kathmandu"
	AsiaKatmandu                   ClinicTimezoneV1 = "Asia/Katmandu"
	AsiaKhandyga                   ClinicTimezoneV1 = "Asia/Khandyga"
	AsiaKolkata                    ClinicTimezoneV1 = "Asia/Kolkata"
	AsiaKrasnoyarsk                ClinicTimezoneV1 = "Asia/Krasnoyarsk"
	AsiaKualaLumpur                ClinicTimezoneV1 = "Asia/Kuala_Lumpur"
	AsiaKuching                    ClinicTimezoneV1 = "Asia/Kuching"
	AsiaKuwait                     ClinicTimezoneV1 = "Asia/Kuwait"
	AsiaMacao                      ClinicTimezoneV1 = "Asia/Macao"
	AsiaMacau                      ClinicTimezoneV1 = "Asia/Macau"
	AsiaMagadan                    ClinicTimezoneV1 = "Asia/Magadan"
	AsiaMakassar                   ClinicTimezoneV1 = "Asia/Makassar"
	AsiaManila                     ClinicTimezoneV1 = "Asia/Manila"
	AsiaMuscat                     ClinicTimezoneV1 = "Asia/Muscat"
	AsiaNicosia                    ClinicTimezoneV1 = "Asia/Nicosia"
	AsiaNovokuznetsk               ClinicTimezoneV1 = "Asia/Novokuznetsk"
	AsiaNovosibirsk                ClinicTimezoneV1 = "Asia/Novosibirsk"
	AsiaOmsk                       ClinicTimezoneV1 = "Asia/Omsk"
	AsiaOral                       ClinicTimezoneV1 = "Asia/Oral"
	AsiaPhnomPenh                  ClinicTimezoneV1 = "Asia/Phnom_Penh"
	AsiaPontianak                  ClinicTimezoneV1 = "Asia/Pontianak"
	AsiaPyongyang                  ClinicTimezoneV1 = "Asia/Pyongyang"
	AsiaQatar                      ClinicTimezoneV1 = "Asia/Qatar"
	AsiaQostanay                   ClinicTimezoneV1 = "Asia/Qostanay"
	AsiaQyzylorda                  ClinicTimezoneV1 = "Asia/Qyzylorda"
	AsiaRangoon                    ClinicTimezoneV1 = "Asia/Rangoon"
	AsiaRiyadh                     ClinicTimezoneV1 = "Asia/Riyadh"
	AsiaSaigon                     ClinicTimezoneV1 = "Asia/Saigon"
	AsiaSakhalin                   ClinicTimezoneV1 = "Asia/Sakhalin"
	AsiaSamarkand                  ClinicTimezoneV1 = "Asia/Samarkand"
	AsiaSeoul                      ClinicTimezoneV1 = "Asia/Seoul"
	AsiaShanghai                   ClinicTimezoneV1 = "Asia/Shanghai"
	AsiaSingapore                  ClinicTimezoneV1 = "Asia/Singapore"
	AsiaSrednekolymsk              ClinicTimezoneV1 = "Asia/Srednekolymsk"
	AsiaTaipei                     ClinicTimezoneV1 = "Asia/Taipei"
	AsiaTashkent                   ClinicTimezoneV1 = "Asia/Tashkent"
	AsiaTbilisi                    ClinicTimezoneV1 = "Asia/Tbilisi"
	AsiaTehran                     ClinicTimezoneV1 = "Asia/Tehran"
	AsiaTelAviv                    ClinicTimezoneV1 = "Asia/Tel_Aviv"
	AsiaThimbu                     ClinicTimezoneV1 = "Asia/Thimbu"
	AsiaThimphu                    ClinicTimezoneV1 = "Asia/Thimphu"
	AsiaTokyo                      ClinicTimezoneV1 = "Asia/Tokyo"
	AsiaTomsk                      ClinicTimezoneV1 = "Asia/Tomsk"
	AsiaUjungPandang               ClinicTimezoneV1 = "Asia/Ujung_Pandang"
	AsiaUlaanbaatar                ClinicTimezoneV1 = "Asia/Ulaanbaatar"
	AsiaUlanBator                  ClinicTimezoneV1 = "Asia/Ulan_Bator"
	AsiaUrumqi                     ClinicTimezoneV1 = "Asia/Urumqi"
	AsiaUstNera                    ClinicTimezoneV1 = "Asia/Ust-Nera"
	AsiaVientiane                  ClinicTimezoneV1 = "Asia/Vientiane"
	AsiaVladivostok                ClinicTimezoneV1 = "Asia/Vladivostok"
	AsiaYakutsk                    ClinicTimezoneV1 = "Asia/Yakutsk"
	AsiaYangon                     ClinicTimezoneV1 = "Asia/Yangon"
	AsiaYekaterinburg              ClinicTimezoneV1 = "Asia/Yekaterinburg"
	AsiaYerevan                    ClinicTimezoneV1 = "Asia/Yerevan"
	AtlanticAzores                 ClinicTimezoneV1 = "Atlantic/Azores"
	AtlanticBermuda                ClinicTimezoneV1 = "Atlantic/Bermuda"
	AtlanticCanary                 ClinicTimezoneV1 = "Atlantic/Canary"
	AtlanticCapeVerde              ClinicTimezoneV1 = "Atlantic/Cape_Verde"
	AtlanticFaeroe                 ClinicTimezoneV1 = "Atlantic/Faeroe"
	AtlanticFaroe                  ClinicTimezoneV1 = "Atlantic/Faroe"
	AtlanticJanMayen               ClinicTimezoneV1 = "Atlantic/Jan_Mayen"
	AtlanticMadeira                ClinicTimezoneV1 = "Atlantic/Madeira"
	AtlanticReykjavik              ClinicTimezoneV1 = "Atlantic/Reykjavik"
	AtlanticSouthGeorgia           ClinicTimezoneV1 = "Atlantic/South_Georgia"
	AtlanticStHelena               ClinicTimezoneV1 = "Atlantic/St_Helena"
	AtlanticStanley                ClinicTimezoneV1 = "Atlantic/Stanley"
	AustraliaACT                   ClinicTimezoneV1 = "Australia/ACT"
	AustraliaAdelaide              ClinicTimezoneV1 = "Australia/Adelaide"
	AustraliaBrisbane              ClinicTimezoneV1 = "Australia/Brisbane"
	AustraliaBrokenHill            ClinicTimezoneV1 = "Australia/Broken_Hill"
	AustraliaCanberra              ClinicTimezoneV1 = "Australia/Canberra"
	AustraliaCurrie                ClinicTimezoneV1 = "Australia/Currie"
	AustraliaDarwin                ClinicTimezoneV1 = "Australia/Darwin"
	AustraliaEucla                 ClinicTimezoneV1 = "Australia/Eucla"
	AustraliaHobart                ClinicTimezoneV1 = "Australia/Hobart"
	AustraliaLHI                   ClinicTimezoneV1 = "Australia/LHI"
	AustraliaLindeman              ClinicTimezoneV1 = "Australia/Lindeman"
	AustraliaLordHowe              ClinicTimezoneV1 = "Australia/Lord_Howe"
	AustraliaMelbourne             ClinicTimezoneV1 = "Australia/Melbourne"
	AustraliaNSW                   ClinicTimezoneV1 = "Australia/NSW"
	AustraliaNorth                 ClinicTimezoneV1 = "Australia/North"
	AustraliaPerth                 ClinicTimezoneV1 = "Australia/Perth"
	AustraliaQueensland            ClinicTimezoneV1 = "Australia/Queensland"
	AustraliaSouth                 ClinicTimezoneV1 = "Australia/South"
	AustraliaSydney                ClinicTimezoneV1 = "Australia/Sydney"
	AustraliaTasmania              ClinicTimezoneV1 = "Australia/Tasmania"
	AustraliaVictoria              ClinicTimezoneV1 = "Australia/Victoria"
	AustraliaWest                  ClinicTimezoneV1 = "Australia/West"
	AustraliaYancowinna            ClinicTimezoneV1 = "Australia/Yancowinna"
	BrazilAcre                     ClinicTimezoneV1 = "Brazil/Acre"
	BrazilDeNoronha                ClinicTimezoneV1 = "Brazil/DeNoronha"
	BrazilEast                     ClinicTimezoneV1 = "Brazil/East"
	BrazilWest                     ClinicTimezoneV1 = "Brazil/West"
	CET                            ClinicTimezoneV1 = "CET"
	CST6CDT                        ClinicTimezoneV1 = "CST6CDT"
	CanadaAtlantic                 ClinicTimezoneV1 = "Canada/Atlantic"
	CanadaCentral                  ClinicTimezoneV1 = "Canada/Central"
	CanadaEastern                  ClinicTimezoneV1 = "Canada/Eastern"
	CanadaMountain                 ClinicTimezoneV1 = "Canada/Mountain"
	CanadaNewfoundland             ClinicTimezoneV1 = "Canada/Newfoundland"
	CanadaPacific                  ClinicTimezoneV1 = "Canada/Pacific"
	CanadaSaskatchewan             ClinicTimezoneV1 = "Canada/Saskatchewan"
	CanadaYukon                    ClinicTimezoneV1 = "Canada/Yukon"
	ChileContinental               ClinicTimezoneV1 = "Chile/Continental"
	ChileEasterIsland              ClinicTimezoneV1 = "Chile/EasterIsland"
	Cuba                           ClinicTimezoneV1 = "Cuba"
	EET                            ClinicTimezoneV1 = "EET"
	EST                            ClinicTimezoneV1 = "EST"
	EST5EDT                        ClinicTimezoneV1 = "EST5EDT"
	Egypt                          ClinicTimezoneV1 = "Egypt"
	Eire                           ClinicTimezoneV1 = "Eire"
	EtcGMT                         ClinicTimezoneV1 = "Etc/GMT"
	EtcGMT0                        ClinicTimezoneV1 = "Etc/GMT+0"
	EtcGMT01                       ClinicTimezoneV1 = "Etc/GMT-0"
	EtcGMT02                       ClinicTimezoneV1 = "Etc/GMT0"
	EtcGMT1                        ClinicTimezoneV1 = "Etc/GMT+1"
	EtcGMT10                       ClinicTimezoneV1 = "Etc/GMT+10"
	EtcGMT101                      ClinicTimezoneV1 = "Etc/GMT-10"
	EtcGMT11                       ClinicTimezoneV1 = "Etc/GMT-1"
	EtcGMT111                      ClinicTimezoneV1 = "Etc/GMT-11"
	EtcGMT12                       ClinicTimezoneV1 = "Etc/GMT+12"
	EtcGMT121                      ClinicTimezoneV1 = "Etc/GMT-12"
	EtcGMT13                       ClinicTimezoneV1 = "Etc/GMT-13"
	EtcGMT14                       ClinicTimezoneV1 = "Etc/GMT-14"
	EtcGMT2                        ClinicTimezoneV1 = "Etc/GMT+2"
	EtcGMT21                       ClinicTimezoneV1 = "Etc/GMT-2"
	EtcGMT3                        ClinicTimezoneV1 = "Etc/GMT+3"
	EtcGMT31                       ClinicTimezoneV1 = "Etc/GMT-3"
	EtcGMT4                        ClinicTimezoneV1 = "Etc/GMT+4"
	EtcGMT41                       ClinicTimezoneV1 = "Etc/GMT-4"
	EtcGMT5                        ClinicTimezoneV1 = "Etc/GMT+5"
	EtcGMT51                       ClinicTimezoneV1 = "Etc/GMT-5"
	EtcGMT6                        ClinicTimezoneV1 = "Etc/GMT+6"
	EtcGMT61                       ClinicTimezoneV1 = "Etc/GMT-6"
	EtcGMT7                        ClinicTimezoneV1 = "Etc/GMT+7"
	EtcGMT71                       ClinicTimezoneV1 = "Etc/GMT-7"
	EtcGMT8                        ClinicTimezoneV1 = "Etc/GMT+8"
	EtcGMT81                       ClinicTimezoneV1 = "Etc/GMT-8"
	EtcGMT9                        ClinicTimezoneV1 = "Etc/GMT+9"
	EtcGMT91                       ClinicTimezoneV1 = "Etc/GMT-9"
	EtcGreenwich                   ClinicTimezoneV1 = "Etc/Greenwich"
	EtcUCT                         ClinicTimezoneV1 = "Etc/UCT"
	EtcUTC                         ClinicTimezoneV1 = "Etc/UTC"
	EtcUniversal                   ClinicTimezoneV1 = "Etc/Universal"
	EtcZulu                        ClinicTimezoneV1 = "Etc/Zulu"
	EuropeAmsterdam                ClinicTimezoneV1 = "Europe/Amsterdam"
	EuropeAndorra                  ClinicTimezoneV1 = "Europe/Andorra"
	EuropeAstrakhan                ClinicTimezoneV1 = "Europe/Astrakhan"
	EuropeAthens                   ClinicTimezoneV1 = "Europe/Athens"
	EuropeBelfast                  ClinicTimezoneV1 = "Europe/Belfast"
	EuropeBelgrade                 ClinicTimezoneV1 = "Europe/Belgrade"
	EuropeBerlin                   ClinicTimezoneV1 = "Europe/Berlin"
	EuropeBratislava               ClinicTimezoneV1 = "Europe/Bratislava"
	EuropeBrussels                 ClinicTimezoneV1 = "Europe/Brussels"
	EuropeBucharest                ClinicTimezoneV1 = "Europe/Bucharest"
	EuropeBudapest                 ClinicTimezoneV1 = "Europe/Budapest"
	EuropeBusingen                 ClinicTimezoneV1 = "Europe/Busingen"
	EuropeChisinau                 ClinicTimezoneV1 = "Europe/Chisinau"
	EuropeCopenhagen               ClinicTimezoneV1 = "Europe/Copenhagen"
	EuropeDublin                   ClinicTimezoneV1 = "Europe/Dublin"
	EuropeGibraltar                ClinicTimezoneV1 = "Europe/Gibraltar"
	EuropeGuernsey                 ClinicTimezoneV1 = "Europe/Guernsey"
	EuropeHelsinki                 ClinicTimezoneV1 = "Europe/Helsinki"
	EuropeIsleOfMan                ClinicTimezoneV1 = "Europe/Isle_of_Man"
	EuropeIstanbul                 ClinicTimezoneV1 = "Europe/Istanbul"
	EuropeJersey                   ClinicTimezoneV1 = "Europe/Jersey"
	EuropeKaliningrad              ClinicTimezoneV1 = "Europe/Kaliningrad"
	EuropeKiev                     ClinicTimezoneV1 = "Europe/Kiev"
	EuropeKirov                    ClinicTimezoneV1 = "Europe/Kirov"
	EuropeKyiv                     ClinicTimezoneV1 = "Europe/Kyiv"
	EuropeLisbon                   ClinicTimezoneV1 = "Europe/Lisbon"
	EuropeLjubljana                ClinicTimezoneV1 = "Europe/Ljubljana"
	EuropeLondon                   ClinicTimezoneV1 = "Europe/London"
	EuropeLuxembourg               ClinicTimezoneV1 = "Europe/Luxembourg"
	EuropeMadrid                   ClinicTimezoneV1 = "Europe/Madrid"
	EuropeMalta                    ClinicTimezoneV1 = "Europe/Malta"
	EuropeMariehamn                ClinicTimezoneV1 = "Europe/Mariehamn"
	EuropeMinsk                    ClinicTimezoneV1 = "Europe/Minsk"
	EuropeMonaco                   ClinicTimezoneV1 = "Europe/Monaco"
	EuropeMoscow                   ClinicTimezoneV1 = "Europe/Moscow"
	EuropeNicosia                  ClinicTimezoneV1 = "Europe/Nicosia"
	EuropeOslo                     ClinicTimezoneV1 = "Europe/Oslo"
	EuropeParis                    ClinicTimezoneV1 = "Europe/Paris"
	EuropePodgorica                ClinicTimezoneV1 = "Europe/Podgorica"
	EuropePrague                   ClinicTimezoneV1 = "Europe/Prague"
	EuropeRiga                     ClinicTimezoneV1 = "Europe/Riga"
	EuropeRome                     ClinicTimezoneV1 = "Europe/Rome"
	EuropeSamara                   ClinicTimezoneV1 = "Europe/Samara"
	EuropeSanMarino                ClinicTimezoneV1 = "Europe/San_Marino"
	EuropeSarajevo                 ClinicTimezoneV1 = "Europe/Sarajevo"
	EuropeSaratov                  ClinicTimezoneV1 = "Europe/Saratov"
	EuropeSimferopol               ClinicTimezoneV1 = "Europe/Simferopol"
	EuropeSkopje                   ClinicTimezoneV1 = "Europe/Skopje"
	EuropeSofia                    ClinicTimezoneV1 = "Europe/Sofia"
	EuropeStockholm                ClinicTimezoneV1 = "Europe/Stockholm"
	EuropeTallinn                  ClinicTimezoneV1 = "Europe/Tallinn"
	EuropeTirane                   ClinicTimezoneV1 = "Europe/Tirane"
	EuropeTiraspol                 ClinicTimezoneV1 = "Europe/Tiraspol"
	EuropeUlyanovsk                ClinicTimezoneV1 = "Europe/Ulyanovsk"
	EuropeUzhgorod                 ClinicTimezoneV1 = "Europe/Uzhgorod"
	EuropeVaduz                    ClinicTimezoneV1 = "Europe/Vaduz"
	EuropeVatican                  ClinicTimezoneV1 = "Europe/Vatican"
	EuropeVienna                   ClinicTimezoneV1 = "Europe/Vienna"
	EuropeVilnius                  ClinicTimezoneV1 = "Europe/Vilnius"
	EuropeVolgograd                ClinicTimezoneV1 = "Europe/Volgograd"
	EuropeWarsaw                   ClinicTimezoneV1 = "Europe/Warsaw"
	EuropeZagreb                   ClinicTimezoneV1 = "Europe/Zagreb"
	EuropeZaporozhye               ClinicTimezoneV1 = "Europe/Zaporozhye"
	EuropeZurich                   ClinicTimezoneV1 = "Europe/Zurich"
	GB                             ClinicTimezoneV1 = "GB"
	GBEire                         ClinicTimezoneV1 = "GB-Eire"
	GMT                            ClinicTimezoneV1 = "GMT"
	GMT0                           ClinicTimezoneV1 = "GMT+0"
	GMT01                          ClinicTimezoneV1 = "GMT-0"
	GMT02                          ClinicTimezoneV1 = "GMT0"
	Greenwich                      ClinicTimezoneV1 = "Greenwich"
	HST                            ClinicTimezoneV1 = "HST"
	Hongkong                       ClinicTimezoneV1 = "Hongkong"
	Iceland                        ClinicTimezoneV1 = "Iceland"
	IndianAntananarivo             ClinicTimezoneV1 = "Indian/Antananarivo"
	IndianChagos                   ClinicTimezoneV1 = "Indian/Chagos"
	IndianChristmas                ClinicTimezoneV1 = "Indian/Christmas"
	IndianCocos                    ClinicTimezoneV1 = "Indian/Cocos"
	IndianComoro                   ClinicTimezoneV1 = "Indian/Comoro"
	IndianKerguelen                ClinicTimezoneV1 = "Indian/Kerguelen"
	IndianMahe                     ClinicTimezoneV1 = "Indian/Mahe"
	IndianMaldives                 ClinicTimezoneV1 = "Indian/Maldives"
	IndianMauritius                ClinicTimezoneV1 = "Indian/Mauritius"
	IndianMayotte                  ClinicTimezoneV1 = "Indian/Mayotte"
	IndianReunion                  ClinicTimezoneV1 = "Indian/Reunion"
	Iran                           ClinicTimezoneV1 = "Iran"
	Israel                         ClinicTimezoneV1 = "Israel"
	Jamaica                        ClinicTimezoneV1 = "Jamaica"
	Japan                          ClinicTimezoneV1 = "Japan"
	Kwajalein                      ClinicTimezoneV1 = "Kwajalein"
	Libya                          ClinicTimezoneV1 = "Libya"
	MET                            ClinicTimezoneV1 = "MET"
	MST                            ClinicTimezoneV1 = "MST"
	MST7MDT                        ClinicTimezoneV1 = "MST7MDT"
	MexicoBajaNorte                ClinicTimezoneV1 = "Mexico/BajaNorte"
	MexicoBajaSur                  ClinicTimezoneV1 = "Mexico/BajaSur"
	MexicoGeneral                  ClinicTimezoneV1 = "Mexico/General"
	NZ                             ClinicTimezoneV1 = "NZ"
	NZCHAT                         ClinicTimezoneV1 = "NZ-CHAT"
	Navajo                         ClinicTimezoneV1 = "Navajo"
	PRC                            ClinicTimezoneV1 = "PRC"
	PST8PDT                        ClinicTimezoneV1 = "PST8PDT"
	PacificApia                    ClinicTimezoneV1 = "Pacific/Apia"
	PacificAuckland                ClinicTimezoneV1 = "Pacific/Auckland"
	PacificBougainville            ClinicTimezoneV1 = "Pacific/Bougainville"
	PacificChatham                 ClinicTimezoneV1 = "Pacific/Chatham"
	PacificChuuk                   ClinicTimezoneV1 = "Pacific/Chuuk"
	PacificEaster                  ClinicTimezoneV1 = "Pacific/Easter"
	PacificEfate                   ClinicTimezoneV1 = "Pacific/Efate"
	PacificEnderbury               ClinicTimezoneV1 = "Pacific/Enderbury"
	PacificFakaofo                 ClinicTimezoneV1 = "Pacific/Fakaofo"
	PacificFiji                    ClinicTimezoneV1 = "Pacific/Fiji"
	PacificFunafuti                ClinicTimezoneV1 = "Pacific/Funafuti"
	PacificGalapagos               ClinicTimezoneV1 = "Pacific/Galapagos"
	PacificGambier                 ClinicTimezoneV1 = "Pacific/Gambier"
	PacificGuadalcanal             ClinicTimezoneV1 = "Pacific/Guadalcanal"
	PacificGuam                    ClinicTimezoneV1 = "Pacific/Guam"
	PacificHonolulu                ClinicTimezoneV1 = "Pacific/Honolulu"
	PacificJohnston                ClinicTimezoneV1 = "Pacific/Johnston"
	PacificKanton                  ClinicTimezoneV1 = "Pacific/Kanton"
	PacificKiritimati              ClinicTimezoneV1 = "Pacific/Kiritimati"
	PacificKosrae                  ClinicTimezoneV1 = "Pacific/Kosrae"
	PacificKwajalein               ClinicTimezoneV1 = "Pacific/Kwajalein"
	PacificMajuro                  ClinicTimezoneV1 = "Pacific/Majuro"
	PacificMarquesas               ClinicTimezoneV1 = "Pacific/Marquesas"
	PacificMidway                  ClinicTimezoneV1 = "Pacific/Midway"
	PacificNauru                   ClinicTimezoneV1 = "Pacific/Nauru"
	PacificNiue                    ClinicTimezoneV1 = "Pacific/Niue"
	PacificNorfolk                 ClinicTimezoneV1 = "Pacific/Norfolk"
	PacificNoumea                  ClinicTimezoneV1 = "Pacific/Noumea"
	PacificPagoPago                ClinicTimezoneV1 = "Pacific/Pago_Pago"
	PacificPalau                   ClinicTimezoneV1 = "Pacific/Palau"
	PacificPitcairn                ClinicTimezoneV1 = "Pacific/Pitcairn"
	PacificPohnpei                 ClinicTimezoneV1 = "Pacific/Pohnpei"
	PacificPonape                  ClinicTimezoneV1 = "Pacific/Ponape"
	PacificPortMoresby             ClinicTimezoneV1 = "Pacific/Port_Moresby"
	PacificRarotonga               ClinicTimezoneV1 = "Pacific/Rarotonga"
	PacificSaipan                  ClinicTimezoneV1 = "Pacific/Saipan"
	PacificSamoa                   ClinicTimezoneV1 = "Pacific/Samoa"
	PacificTahiti                  ClinicTimezoneV1 = "Pacific/Tahiti"
	PacificTarawa                  ClinicTimezoneV1 = "Pacific/Tarawa"
	PacificTongatapu               ClinicTimezoneV1 = "Pacific/Tongatapu"
	PacificTruk                    ClinicTimezoneV1 = "Pacific/Truk"
	PacificWake                    ClinicTimezoneV1 = "Pacific/Wake"
	PacificWallis                  ClinicTimezoneV1 = "Pacific/Wallis"
	PacificYap                     ClinicTimezoneV1 = "Pacific/Yap"
	Poland                         ClinicTimezoneV1 = "Poland"
	Portugal                       ClinicTimezoneV1 = "Portugal"
	ROC                            ClinicTimezoneV1 = "ROC"
	ROK                            ClinicTimezoneV1 = "ROK"
	Singapore                      ClinicTimezoneV1 = "Singapore"
	Turkey                         ClinicTimezoneV1 = "Turkey"
	UCT                            ClinicTimezoneV1 = "UCT"
	USAlaska                       ClinicTimezoneV1 = "US/Alaska"
	USAleutian                     ClinicTimezoneV1 = "US/Aleutian"
	USArizona                      ClinicTimezoneV1 = "US/Arizona"
	USCentral                      ClinicTimezoneV1 = "US/Central"
	USEastIndiana                  ClinicTimezoneV1 = "US/East-Indiana"
	USEastern                      ClinicTimezoneV1 = "US/Eastern"
	USHawaii                       ClinicTimezoneV1 = "US/Hawaii"
	USIndianaStarke                ClinicTimezoneV1 = "US/Indiana-Starke"
	USMichigan                     ClinicTimezoneV1 = "US/Michigan"
	USMountain                     ClinicTimezoneV1 = "US/Mountain"
	USPacific                      ClinicTimezoneV1 = "US/Pacific"
	USSamoa                        ClinicTimezoneV1 = "US/Samoa"
	UTC                            ClinicTimezoneV1 = "UTC"
	Universal                      ClinicTimezoneV1 = "Universal"
	WET                            ClinicTimezoneV1 = "WET"
	WSU                            ClinicTimezoneV1 = "W-SU"
	Zulu                           ClinicTimezoneV1 = "Zulu"
)

// Defines values for DataSourceV1State.
const (
	Connected        DataSourceV1State = "connected"
	Disconnected     DataSourceV1State = "disconnected"
	Error            DataSourceV1State = "error"
	Pending          DataSourceV1State = "pending"
	PendingReconnect DataSourceV1State = "pendingReconnect"
)

// Defines values for EhrMatchMessageRefV1DataModel.
const (
	Order EhrMatchMessageRefV1DataModel = "Order"
)

// Defines values for EhrMatchMessageRefV1EventType.
const (
	EhrMatchMessageRefV1EventTypeNew EhrMatchMessageRefV1EventType = "New"
)

// Defines values for EhrMatchRequestPatientsOptionsV1Criteria.
const (
	DOBFULLNAME EhrMatchRequestPatientsOptionsV1Criteria = "DOB_FULLNAME"
	MRN         EhrMatchRequestPatientsOptionsV1Criteria = "MRN"
	MRNDOB      EhrMatchRequestPatientsOptionsV1Criteria = "MRN_DOB"
)

// Defines values for EhrMatchRequestPatientsOptionsV1OnUniqueMatch.
const (
	DISABLEREPORTS EhrMatchRequestPatientsOptionsV1OnUniqueMatch = "DISABLE_REPORTS"
	ENABLEREPORTS  EhrMatchRequestPatientsOptionsV1OnUniqueMatch = "ENABLE_REPORTS"
)

// Defines values for EhrSettingsV1Provider.
const (
	Redox  EhrSettingsV1Provider = "redox"
	Xealth EhrSettingsV1Provider = "xealth"
)

// Defines values for MigrationStatusV1.
const (
	COMPLETED MigrationStatusV1 = "COMPLETED"
	PENDING   MigrationStatusV1 = "PENDING"
	RUNNING   MigrationStatusV1 = "RUNNING"
)

// Defines values for ProviderIdV1.
const (
	Abbott ProviderIdV1 = "abbott"
	Dexcom ProviderIdV1 = "dexcom"
	Twiist ProviderIdV1 = "twiist"
)

// Defines values for ScheduledReportsV1Cadence.
const (
	DISABLED ScheduledReportsV1Cadence = "DISABLED"
	N14d     ScheduledReportsV1Cadence = "14d"
	N1d      ScheduledReportsV1Cadence = "1d"
	N30d     ScheduledReportsV1Cadence = "30d"
	N7d      ScheduledReportsV1Cadence = "7d"
)

// Defines values for ScheduledReportsV1OnUploadNoteEventType.
const (
	ScheduledReportsV1OnUploadNoteEventTypeNew     ScheduledReportsV1OnUploadNoteEventType = "New"
	ScheduledReportsV1OnUploadNoteEventTypeReplace ScheduledReportsV1OnUploadNoteEventType = "Replace"
)

// Defines values for TierV1.
const (
	Tier0100 TierV1 = "tier0100"
	Tier0200 TierV1 = "tier0200"
	Tier0300 TierV1 = "tier0300"
	Tier0400 TierV1 = "tier0400"
)

// Defines values for FindPatientsParamsWorkspaceIdType.
const (
	FindPatientsParamsWorkspaceIdTypeClinicId    FindPatientsParamsWorkspaceIdType = "clinicId"
	FindPatientsParamsWorkspaceIdTypeEhrSourceId FindPatientsParamsWorkspaceIdType = "ehrSourceId"
)

// FloatFilter defines model for FloatFilter.
type FloatFilter = string

// IntFilter defines model for IntFilter.
type IntFilter = string

// UpdateSuppressedNotifications defines model for UpdateSuppressedNotifications.
type UpdateSuppressedNotifications struct {
	SuppressedNotifications SuppressedNotificationsV1 `json:"suppressedNotifications"`
}

// UpdateTier defines model for UpdateTier.
type UpdateTier struct {
	Tier TierV1 `json:"tier"`
}

// AddServiceAccountV1 defines model for addServiceAccount.v1.
type AddServiceAccountV1 struct {
	ClientId     string `json:"client_id"`
	ClientSecret string `json:"client_secret"`
	Name         string `json:"name"`
}

// AssociateClinicianToUserV1 defines model for associateClinicianToUser.v1.
type AssociateClinicianToUserV1 struct {
	UserId string `json:"userId"`
}

// BgmPeriodV1 Summary of a specific BGM time period (currently: 1d, 7d, 14d, 30d)
type BgmPeriodV1 struct {
	// AverageDailyRecords Average daily readings
	AverageDailyRecords *float64 `json:"averageDailyRecords,omitempty"`

	// AverageDailyRecordsDelta Difference between the averageDailyRecords in this period and version in the opposite offset
	AverageDailyRecordsDelta *float64 `json:"averageDailyRecordsDelta,omitempty"`

	// AverageGlucoseMmol Average Glucose of records in this period
	AverageGlucoseMmol *float64 `json:"averageGlucoseMmol,omitempty"`

	// AverageGlucoseMmolDelta Difference between the averageGlucose in this period and the other offset version
	AverageGlucoseMmolDelta     *float64 `json:"averageGlucoseMmolDelta,omitempty"`
	CoefficientOfVariation      float64  `json:"coefficientOfVariation"`
	CoefficientOfVariationDelta float64  `json:"coefficientOfVariationDelta"`
	DaysWithData                int      `json:"daysWithData"`
	DaysWithDataDelta           int      `json:"daysWithDataDelta"`
	HasAverageDailyRecords      bool     `json:"hasAverageDailyRecords"`
	HasAverageGlucoseMmol       bool     `json:"hasAverageGlucoseMmol"`
	HasTimeInAnyHighPercent     bool     `json:"hasTimeInAnyHighPercent"`
	HasTimeInAnyHighRecords     bool     `json:"hasTimeInAnyHighRecords"`
	HasTimeInAnyLowPercent      bool     `json:"hasTimeInAnyLowPercent"`
	HasTimeInAnyLowRecords      bool     `json:"hasTimeInAnyLowRecords"`
	HasTimeInExtremeHighPercent bool     `json:"hasTimeInExtremeHighPercent"`
	HasTimeInExtremeHighRecords bool     `json:"hasTimeInExtremeHighRecords"`
	HasTimeInHighPercent        bool     `json:"hasTimeInHighPercent"`
	HasTimeInHighRecords        bool     `json:"hasTimeInHighRecords"`
	HasTimeInLowPercent         bool     `json:"hasTimeInLowPercent"`
	HasTimeInLowRecords         bool     `json:"hasTimeInLowRecords"`
	HasTimeInTargetPercent      bool     `json:"hasTimeInTargetPercent"`
	HasTimeInTargetRecords      bool     `json:"hasTimeInTargetRecords"`
	HasTimeInVeryHighPercent    bool     `json:"hasTimeInVeryHighPercent"`
	HasTimeInVeryHighRecords    bool     `json:"hasTimeInVeryHighRecords"`
	HasTimeInVeryLowPercent     bool     `json:"hasTimeInVeryLowPercent"`
	HasTimeInVeryLowRecords     bool     `json:"hasTimeInVeryLowRecords"`
	HasTotalRecords             bool     `json:"hasTotalRecords"`
	Max                         float64  `json:"max"`
	MaxDelta                    float64  `json:"maxDelta"`
	Min                         float64  `json:"min"`
	MinDelta                    float64  `json:"minDelta"`
	StandardDeviation           float64  `json:"standardDeviation"`
	StandardDeviationDelta      float64  `json:"standardDeviationDelta"`

	// TimeInAnyHighPercent Percentage of time spent in Any high glucose range
	TimeInAnyHighPercent *float64 `json:"timeInAnyHighPercent,omitempty"`

	// TimeInAnyHighPercentDelta Difference between the timeInAnyHighPercent in this period and version in the opposite offset
	TimeInAnyHighPercentDelta *float64 `json:"timeInAnyHighPercentDelta,omitempty"`

	// TimeInAnyHighRecords Counter of records in Any high glucose range
	TimeInAnyHighRecords *int `json:"timeInAnyHighRecords,omitempty"`

	// TimeInAnyHighRecordsDelta Difference between the timeInAnyHighRecords in this period and version in the opposite offset
	TimeInAnyHighRecordsDelta *int `json:"timeInAnyHighRecordsDelta,omitempty"`

	// TimeInAnyLowPercent Percentage of time spent in Any low glucose range
	TimeInAnyLowPercent *float64 `json:"timeInAnyLowPercent,omitempty"`

	// TimeInAnyLowPercentDelta Difference between the timeInAnyLowPercent in this period and version in the opposite offset
	TimeInAnyLowPercentDelta *float64 `json:"timeInAnyLowPercentDelta,omitempty"`

	// TimeInAnyLowRecords Counter of records in Any low glucose range
	TimeInAnyLowRecords *int `json:"timeInAnyLowRecords,omitempty"`

	// TimeInAnyLowRecordsDelta Difference between the timeInAnyLowRecords in this period and version in the opposite offset
	TimeInAnyLowRecordsDelta *int `json:"timeInAnyLowRecordsDelta,omitempty"`

	// TimeInExtremeHighPercent Percentage of time spent in extreme high glucose range
	TimeInExtremeHighPercent *float64 `json:"timeInExtremeHighPercent,omitempty"`

	// TimeInExtremeHighPercentDelta Difference between the timeInExtremeHighPercent in this period and version in the opposite offset
	TimeInExtremeHighPercentDelta *float64 `json:"timeInExtremeHighPercentDelta,omitempty"`

	// TimeInExtremeHighRecords Counter of records in extreme high glucose range
	TimeInExtremeHighRecords *int `json:"timeInExtremeHighRecords,omitempty"`

	// TimeInExtremeHighRecordsDelta Difference between the timeInExtremeHighRecords in this period and version in the opposite offset
	TimeInExtremeHighRecordsDelta *int `json:"timeInExtremeHighRecordsDelta,omitempty"`

	// TimeInHighPercent Percentage of time spent in high glucose range
	TimeInHighPercent *float64 `json:"timeInHighPercent,omitempty"`

	// TimeInHighPercentDelta Difference between the timeInHighPercent in this period and version in the opposite offset
	TimeInHighPercentDelta *float64 `json:"timeInHighPercentDelta,omitempty"`

	// TimeInHighRecords Counter of records in high glucose range
	TimeInHighRecords *int `json:"timeInHighRecords,omitempty"`

	// TimeInHighRecordsDelta Difference between the timeInHighRecords in this period and version in the opposite offset
	TimeInHighRecordsDelta *int `json:"timeInHighRecordsDelta,omitempty"`

	// TimeInLowPercent Percentage of time spent in low glucose range
	TimeInLowPercent *float64 `json:"timeInLowPercent,omitempty"`

	// TimeInLowPercentDelta Difference between the timeInLowPercent in this period and version in the opposite offset
	TimeInLowPercentDelta *float64 `json:"timeInLowPercentDelta,omitempty"`

	// TimeInLowRecords Counter of records in low glucose range
	TimeInLowRecords *int `json:"timeInLowRecords,omitempty"`

	// TimeInLowRecordsDelta Difference between the timeInLowRecords in this period and version in the opposite offset
	TimeInLowRecordsDelta *int `json:"timeInLowRecordsDelta,omitempty"`

	// TimeInTargetPercent Percentage of time spent in target glucose range
	TimeInTargetPercent *float64 `json:"timeInTargetPercent,omitempty"`

	// TimeInTargetPercentDelta Difference between the timeInTargetPercent in this period and version in the opposite offset
	TimeInTargetPercentDelta *float64 `json:"timeInTargetPercentDelta,omitempty"`

	// TimeInTargetRecords Counter of records in target glucose range
	TimeInTargetRecords *int `json:"timeInTargetRecords,omitempty"`

	// TimeInTargetRecordsDelta Difference between the timeInTargetRecords in this period and version in the opposite offset
	TimeInTargetRecordsDelta *int `json:"timeInTargetRecordsDelta,omitempty"`

	// TimeInVeryHighPercent Percentage of time spent in very high glucose range
	TimeInVeryHighPercent *float64 `json:"timeInVeryHighPercent,omitempty"`

	// TimeInVeryHighPercentDelta Difference between the timeInVeryHighPercent in this period and version in the opposite offset
	TimeInVeryHighPercentDelta *float64 `json:"timeInVeryHighPercentDelta,omitempty"`

	// TimeInVeryHighRecords Counter of records in very high glucose range
	TimeInVeryHighRecords *int `json:"timeInVeryHighRecords,omitempty"`

	// TimeInVeryHighRecordsDelta Difference between the timeInVeryHighRecords in this period and version in the opposite offset
	TimeInVeryHighRecordsDelta *int `json:"timeInVeryHighRecordsDelta,omitempty"`

	// TimeInVeryLowPercent Percentage of time spent in very low glucose range
	TimeInVeryLowPercent *float64 `json:"timeInVeryLowPercent,omitempty"`

	// TimeInVeryLowPercentDelta Difference between the timeInVeryLowPercent in this period and version in the opposite offset
	TimeInVeryLowPercentDelta *float64 `json:"timeInVeryLowPercentDelta,omitempty"`

	// TimeInVeryLowRecords Counter of records in very low glucose range
	TimeInVeryLowRecords *int `json:"timeInVeryLowRecords,omitempty"`

	// TimeInVeryLowRecordsDelta Difference between the timeInVeryLowRecords in this period and version in the opposite offset
	TimeInVeryLowRecordsDelta *int `json:"timeInVeryLowRecordsDelta,omitempty"`

	// TotalRecords Counter of records
	TotalRecords *int `json:"totalRecords,omitempty"`

	// TotalRecordsDelta Difference between the totalRecords in this period and version in the opposite offset
	TotalRecordsDelta *int `json:"totalRecordsDelta,omitempty"`
}

// BgmPeriodsV1 A map to each supported BGM summary period
type BgmPeriodsV1 map[string]BgmPeriodV1

// BgmStatsV1 A summary of a users recent BGM glucose values
type BgmStatsV1 struct {
	// Config Summary schema version and calculation configuration
	Config SummaryConfigV1 `json:"config,omitempty"`

	// Dates dates tracked for summary calculation
	Dates SummaryDatesV1 `json:"dates,omitempty"`

	// Id Summary Unique Identifier
	Id *SummaryIdV1 `json:"id,omitempty"`

	// Periods A map to each supported BGM summary period
	Periods BgmPeriodsV1 `json:"periods,omitempty"`
}

// CgmPeriodV1 Summary of a specific CGM time period (currently: 1d, 7d, 14d, 30d)
type CgmPeriodV1 struct {
	// AverageDailyRecords Average daily readings
	AverageDailyRecords *float64 `json:"averageDailyRecords,omitempty"`

	// AverageDailyRecordsDelta Difference between the averageDailyRecords in this period and version in the opposite offset
	AverageDailyRecordsDelta *float64 `json:"averageDailyRecordsDelta,omitempty"`

	// AverageGlucoseMmol Average Glucose of records in this period
	AverageGlucoseMmol *float64 `json:"averageGlucoseMmol,omitempty"`

	// AverageGlucoseMmolDelta Difference between the averageGlucose in this period and the other offset version
	AverageGlucoseMmolDelta     *float64 `json:"averageGlucoseMmolDelta,omitempty"`
	CoefficientOfVariation      float64  `json:"coefficientOfVariation"`
	CoefficientOfVariationDelta float64  `json:"coefficientOfVariationDelta"`
	DaysWithData                int      `json:"daysWithData"`
	DaysWithDataDelta           int      `json:"daysWithDataDelta"`

	// GlucoseManagementIndicator A derived value which emulates A1C
	GlucoseManagementIndicator *float64 `json:"glucoseManagementIndicator,omitempty"`

	// GlucoseManagementIndicatorDelta Difference between the glucoseManagementIndicator in this period and the other offset version
	GlucoseManagementIndicatorDelta *float64 `json:"glucoseManagementIndicatorDelta,omitempty"`
	HasAverageDailyRecords          bool     `json:"hasAverageDailyRecords"`
	HasAverageGlucoseMmol           bool     `json:"hasAverageGlucoseMmol"`
	HasGlucoseManagementIndicator   bool     `json:"hasGlucoseManagementIndicator"`
	HasTimeCGMUseMinutes            bool     `json:"hasTimeCGMUseMinutes"`
	HasTimeCGMUsePercent            bool     `json:"hasTimeCGMUsePercent"`
	HasTimeCGMUseRecords            bool     `json:"hasTimeCGMUseRecords"`
	HasTimeInAnyHighMinutes         bool     `json:"hasTimeInAnyHighMinutes"`
	HasTimeInAnyHighPercent         bool     `json:"hasTimeInAnyHighPercent"`
	HasTimeInAnyHighRecords         bool     `json:"hasTimeInAnyHighRecords"`
	HasTimeInAnyLowMinutes          bool     `json:"hasTimeInAnyLowMinutes"`
	HasTimeInAnyLowPercent          bool     `json:"hasTimeInAnyLowPercent"`
	HasTimeInAnyLowRecords          bool     `json:"hasTimeInAnyLowRecords"`
	HasTimeInExtremeHighMinutes     bool     `json:"hasTimeInExtremeHighMinutes"`
	HasTimeInExtremeHighPercent     bool     `json:"hasTimeInExtremeHighPercent"`
	HasTimeInExtremeHighRecords     bool     `json:"hasTimeInExtremeHighRecords"`
	HasTimeInHighMinutes            bool     `json:"hasTimeInHighMinutes"`
	HasTimeInHighPercent            bool     `json:"hasTimeInHighPercent"`
	HasTimeInHighRecords            bool     `json:"hasTimeInHighRecords"`
	HasTimeInLowMinutes             bool     `json:"hasTimeInLowMinutes"`
	HasTimeInLowPercent             bool     `json:"hasTimeInLowPercent"`
	HasTimeInLowRecords             bool     `json:"hasTimeInLowRecords"`
	HasTimeInTargetMinutes          bool     `json:"hasTimeInTargetMinutes"`
	HasTimeInTargetPercent          bool     `json:"hasTimeInTargetPercent"`
	HasTimeInTargetRecords          bool     `json:"hasTimeInTargetRecords"`
	HasTimeInVeryHighMinutes        bool     `json:"hasTimeInVeryHighMinutes"`
	HasTimeInVeryHighPercent        bool     `json:"hasTimeInVeryHighPercent"`
	HasTimeInVeryHighRecords        bool     `json:"hasTimeInVeryHighRecords"`
	HasTimeInVeryLowMinutes         bool     `json:"hasTimeInVeryLowMinutes"`
	HasTimeInVeryLowPercent         bool     `json:"hasTimeInVeryLowPercent"`
	HasTimeInVeryLowRecords         bool     `json:"hasTimeInVeryLowRecords"`
	HasTotalRecords                 bool     `json:"hasTotalRecords"`
	HoursWithData                   int      `json:"hoursWithData"`
	HoursWithDataDelta              int      `json:"hoursWithDataDelta"`
	Max                             float64  `json:"max"`
	MaxDelta                        float64  `json:"maxDelta"`
	Min                             float64  `json:"min"`
	MinDelta                        float64  `json:"minDelta"`
	StandardDeviation               float64  `json:"standardDeviation"`
	StandardDeviationDelta          float64  `json:"standardDeviationDelta"`

	// TimeCGMUseMinutes Counter of minutes spent wearing a cgm
	TimeCGMUseMinutes *int `json:"timeCGMUseMinutes,omitempty"`

	// TimeCGMUseMinutesDelta Difference between the timeCGMUseMinutes in this period and version in the opposite offset
	TimeCGMUseMinutesDelta *int `json:"timeCGMUseMinutesDelta,omitempty"`

	// TimeCGMUsePercent Percentage of time spent wearing a cgm
	TimeCGMUsePercent *float64 `json:"timeCGMUsePercent,omitempty"`

	// TimeCGMUsePercentDelta Difference between the timeCGMUsePercent in this period and version in the opposite offset
	TimeCGMUsePercentDelta *float64 `json:"timeCGMUsePercentDelta,omitempty"`

	// TimeCGMUseRecords Counter of minutes spent wearing a cgm
	TimeCGMUseRecords *int `json:"timeCGMUseRecords,omitempty"`

	// TimeCGMUseRecordsDelta Difference between the timeCGMUseRecords in this period and version in the opposite offset
	TimeCGMUseRecordsDelta *int `json:"timeCGMUseRecordsDelta,omitempty"`

	// TimeInAnyHighMinutes Counter of minutes spent in Any high glucose range
	TimeInAnyHighMinutes *int `json:"timeInAnyHighMinutes,omitempty"`

	// TimeInAnyHighMinutesDelta Difference between the timeInAnyHighMinutes in this period and version in the opposite offset
	TimeInAnyHighMinutesDelta *int `json:"timeInAnyHighMinutesDelta,omitempty"`

	// TimeInAnyHighPercent Percentage of time spent in Any high glucose range
	TimeInAnyHighPercent *float64 `json:"timeInAnyHighPercent,omitempty"`

	// TimeInAnyHighPercentDelta Difference between the timeInAnyHighPercent in this period and version in the opposite offset
	TimeInAnyHighPercentDelta *float64 `json:"timeInAnyHighPercentDelta,omitempty"`

	// TimeInAnyHighRecords Counter of records in Any high glucose range
	TimeInAnyHighRecords *int `json:"timeInAnyHighRecords,omitempty"`

	// TimeInAnyHighRecordsDelta Difference between the timeInAnyHighRecords in this period and version in the opposite offset
	TimeInAnyHighRecordsDelta *int `json:"timeInAnyHighRecordsDelta,omitempty"`

	// TimeInAnyLowMinutes Counter of minutes spent in Any low glucose range
	TimeInAnyLowMinutes *int `json:"timeInAnyLowMinutes,omitempty"`

	// TimeInAnyLowMinutesDelta Difference between the timeInAnyLowMinutes in this period and version in the opposite offset
	TimeInAnyLowMinutesDelta *int `json:"timeInAnyLowMinutesDelta,omitempty"`

	// TimeInAnyLowPercent Percentage of time spent in Any low glucose range
	TimeInAnyLowPercent *float64 `json:"timeInAnyLowPercent,omitempty"`

	// TimeInAnyLowPercentDelta Difference between the timeInAnyLowPercent in this period and version in the opposite offset
	TimeInAnyLowPercentDelta *float64 `json:"timeInAnyLowPercentDelta,omitempty"`

	// TimeInAnyLowRecords Counter of records in Any low glucose range
	TimeInAnyLowRecords *int `json:"timeInAnyLowRecords,omitempty"`

	// TimeInAnyLowRecordsDelta Difference between the timeInAnyLowRecords in this period and version in the opposite offset
	TimeInAnyLowRecordsDelta *int `json:"timeInAnyLowRecordsDelta,omitempty"`

	// TimeInExtremeHighMinutes Counter of minutes spent in extreme high glucose range
	TimeInExtremeHighMinutes *int `json:"timeInExtremeHighMinutes,omitempty"`

	// TimeInExtremeHighMinutesDelta Difference between the timeInExtremeHighMinutes in this period and version in the opposite offset
	TimeInExtremeHighMinutesDelta *int `json:"timeInExtremeHighMinutesDelta,omitempty"`

	// TimeInExtremeHighPercent Percentage of time spent in extreme high glucose range
	TimeInExtremeHighPercent *float64 `json:"timeInExtremeHighPercent,omitempty"`

	// TimeInExtremeHighPercentDelta Difference between the timeInExtremeHighPercent in this period and version in the opposite offset
	TimeInExtremeHighPercentDelta *float64 `json:"timeInExtremeHighPercentDelta,omitempty"`

	// TimeInExtremeHighRecords Counter of records in extreme high glucose range
	TimeInExtremeHighRecords *int `json:"timeInExtremeHighRecords,omitempty"`

	// TimeInExtremeHighRecordsDelta Difference between the timeInExtremeHighRecords in this period and version in the opposite offset
	TimeInExtremeHighRecordsDelta *int `json:"timeInExtremeHighRecordsDelta,omitempty"`

	// TimeInHighMinutes Counter of minutes spent in high glucose range
	TimeInHighMinutes *int `json:"timeInHighMinutes,omitempty"`

	// TimeInHighMinutesDelta Difference between the timeInHighMinutes in this period and version in the opposite offset
	TimeInHighMinutesDelta *int `json:"timeInHighMinutesDelta,omitempty"`

	// TimeInHighPercent Percentage of time spent in high glucose range
	TimeInHighPercent *float64 `json:"timeInHighPercent,omitempty"`

	// TimeInHighPercentDelta Difference between the timeInHighPercent in this period and version in the opposite offset
	TimeInHighPercentDelta *float64 `json:"timeInHighPercentDelta,omitempty"`

	// TimeInHighRecords Counter of records in high glucose range
	TimeInHighRecords *int `json:"timeInHighRecords,omitempty"`

	// TimeInHighRecordsDelta Difference between the timeInHighRecords in this period and version in the opposite offset
	TimeInHighRecordsDelta *int `json:"timeInHighRecordsDelta,omitempty"`

	// TimeInLowMinutes Counter of minutes spent in low glucose range
	TimeInLowMinutes *int `json:"timeInLowMinutes,omitempty"`

	// TimeInLowMinutesDelta Difference between the timeInLowMinutes in this period and version in the opposite offset
	TimeInLowMinutesDelta *int `json:"timeInLowMinutesDelta,omitempty"`

	// TimeInLowPercent Percentage of time spent in low glucose range
	TimeInLowPercent *float64 `json:"timeInLowPercent,omitempty"`

	// TimeInLowPercentDelta Difference between the timeInLowPercent in this period and version in the opposite offset
	TimeInLowPercentDelta *float64 `json:"timeInLowPercentDelta,omitempty"`

	// TimeInLowRecords Counter of records in low glucose range
	TimeInLowRecords *int `json:"timeInLowRecords,omitempty"`

	// TimeInLowRecordsDelta Difference between the timeInLowRecords in this period and version in the opposite offset
	TimeInLowRecordsDelta *int `json:"timeInLowRecordsDelta,omitempty"`

	// TimeInTargetMinutes Counter of minutes spent in target glucose range
	TimeInTargetMinutes *int `json:"timeInTargetMinutes,omitempty"`

	// TimeInTargetMinutesDelta Difference between the timeInTargetMinutes in this period and version in the opposite offset
	TimeInTargetMinutesDelta *int `json:"timeInTargetMinutesDelta,omitempty"`

	// TimeInTargetPercent Percentage of time spent in target glucose range
	TimeInTargetPercent *float64 `json:"timeInTargetPercent,omitempty"`

	// TimeInTargetPercentDelta Difference between the timeInTargetPercent in this period and version in the opposite offset
	TimeInTargetPercentDelta *float64 `json:"timeInTargetPercentDelta,omitempty"`

	// TimeInTargetRecords Counter of records in target glucose range
	TimeInTargetRecords *int `json:"timeInTargetRecords,omitempty"`

	// TimeInTargetRecordsDelta Difference between the timeInTargetRecords in this period and version in the opposite offset
	TimeInTargetRecordsDelta *int `json:"timeInTargetRecordsDelta,omitempty"`

	// TimeInVeryHighMinutes Counter of minutes spent in very high glucose range
	TimeInVeryHighMinutes *int `json:"timeInVeryHighMinutes,omitempty"`

	// TimeInVeryHighMinutesDelta Difference between the timeInVeryHighMinutes in this period and version in the opposite offset
	TimeInVeryHighMinutesDelta *int `json:"timeInVeryHighMinutesDelta,omitempty"`

	// TimeInVeryHighPercent Percentage of time spent in very high glucose range
	TimeInVeryHighPercent *float64 `json:"timeInVeryHighPercent,omitempty"`

	// TimeInVeryHighPercentDelta Difference between the timeInVeryHighPercent in this period and version in the opposite offset
	TimeInVeryHighPercentDelta *float64 `json:"timeInVeryHighPercentDelta,omitempty"`

	// TimeInVeryHighRecords Counter of records in very high glucose range
	TimeInVeryHighRecords *int `json:"timeInVeryHighRecords,omitempty"`

	// TimeInVeryHighRecordsDelta Difference between the timeInVeryHighRecords in this period and version in the opposite offset
	TimeInVeryHighRecordsDelta *int `json:"timeInVeryHighRecordsDelta,omitempty"`

	// TimeInVeryLowMinutes Counter of minutes spent in very low glucose range
	TimeInVeryLowMinutes *int `json:"timeInVeryLowMinutes,omitempty"`

	// TimeInVeryLowMinutesDelta Difference between the timeInVeryLowMinutes in this period and version in the opposite offset
	TimeInVeryLowMinutesDelta *int `json:"timeInVeryLowMinutesDelta,omitempty"`

	// TimeInVeryLowPercent Percentage of time spent in very low glucose range
	TimeInVeryLowPercent *float64 `json:"timeInVeryLowPercent,omitempty"`

	// TimeInVeryLowPercentDelta Difference between the timeInVeryLowPercent in this period and version in the opposite offset
	TimeInVeryLowPercentDelta *float64 `json:"timeInVeryLowPercentDelta,omitempty"`

	// TimeInVeryLowRecords Counter of records in very low glucose range
	TimeInVeryLowRecords *int `json:"timeInVeryLowRecords,omitempty"`

	// TimeInVeryLowRecordsDelta Difference between the timeInVeryLowRecords in this period and version in the opposite offset
	TimeInVeryLowRecordsDelta *int `json:"timeInVeryLowRecordsDelta,omitempty"`

	// TotalRecords Counter of records
	TotalRecords *int `json:"totalRecords,omitempty"`

	// TotalRecordsDelta Difference between the totalRecords in this period and version in the opposite offset
	TotalRecordsDelta *int `json:"totalRecordsDelta,omitempty"`
}

// CgmPeriodsV1 A map to each supported CGM summary period
type CgmPeriodsV1 map[string]CgmPeriodV1

// CgmStatsV1 A summary of a users recent CGM glucose values
type CgmStatsV1 struct {
	// Config Summary schema version and calculation configuration
	Config SummaryConfigV1 `json:"config,omitempty"`

	// Dates dates tracked for summary calculation
	Dates SummaryDatesV1 `json:"dates,omitempty"`

	// Id Summary Unique Identifier
	Id *SummaryIdV1 `json:"id,omitempty"`

	// Periods A map to each supported CGM summary period
	Periods CgmPeriodsV1 `json:"periods,omitempty"`
}

// CityV1 City name.
type CityV1 = string

// ClinicV1 Clinic
type ClinicV1 struct {
	// Address Street address.
	Address    *StreetAddressV1 `json:"address,omitempty"`
	CanMigrate *bool            `json:"canMigrate,omitempty"`

	// City City name.
	City       *CityV1             `json:"city,omitempty"`
	ClinicSize *ClinicV1ClinicSize `json:"clinicSize,omitempty"`
	ClinicType *ClinicV1ClinicType `json:"clinicType,omitempty"`

	// Country Country name.
	Country     *CountryV1 `json:"country,omitempty"`
	CreatedTime *time.Time `json:"createdTime,omitempty"`

	// Id Clinic identifier.
	Id                    *ClinicIdV1   `json:"id,omitempty"`
	LastDeletedPatientTag *PatientTagV1 `json:"lastDeletedPatientTag,omitempty"`

	// Name Name of the clinic.
	Name        NameV1          `json:"name"`
	PatientTags *[]PatientTagV1 `json:"patientTags,omitempty"`

	// PhoneNumbers An array of phone numbers.
	PhoneNumbers *PhoneNumbersV1 `json:"phoneNumbers,omitempty"`

	// PostalCode Postal code. In the U.S., typically the zip code such as `94301` or `94301-1704`.
	PostalCode       *PostalCodeV1            `json:"postalCode,omitempty"`
	PreferredBgUnits ClinicV1PreferredBgUnits `json:"preferredBgUnits"`

	// ShareCode Globally unique share code for a clinic. The share code is 3 groups of 4 uppercase alphanumeric characters in each group. Ambiguous characters such as `I` and `1`, or `O` and `0` are excluded.
	ShareCode *ShareCodeV1 `json:"shareCode,omitempty"`

	// State State or province. In the U.S., typically something like `CA` or `California`.
	State                   *StateV1                   `json:"state,omitempty"`
	SuppressedNotifications *SuppressedNotificationsV1 `json:"suppressedNotifications,omitempty"`
	Tier                    *string                    `json:"tier,omitempty"`
	TierDescription         *string                    `json:"tierDescription,omitempty"`
	Timezone                *ClinicTimezoneV1          `json:"timezone,omitempty"`
	UpdatedTime             *time.Time                 `json:"updatedTime,omitempty"`
	Website                 *string                    `json:"website,omitempty"`
}

// ClinicV1ClinicSize defines model for ClinicV1.ClinicSize.
type ClinicV1ClinicSize string

// ClinicV1ClinicType defines model for ClinicV1.ClinicType.
type ClinicV1ClinicType string

// ClinicV1PreferredBgUnits defines model for ClinicV1.PreferredBgUnits.
type ClinicV1PreferredBgUnits string

// ClinicIdV1 Clinic identifier.
type ClinicIdV1 = string

// ClinicTimezoneV1 defines model for clinicTimezone.v1.
type ClinicTimezoneV1 string

// ClinicianV1 The `id` may be empty if the clinician invite has not been accepted.
type ClinicianV1 struct {
	CreatedTime *time.Time `json:"createdTime,omitempty"`
	Email       string     `json:"email"`

	// Id String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
	Id *Tidepooluserid `json:"id,omitempty"`

	// InviteId The id of the invite if it hasn't been accepted
	InviteId *string `json:"inviteId,omitempty"`

	// Name The name of the clinician
	Name        *string          `json:"name,omitempty"`
	Roles       ClinicianRolesV1 `json:"roles"`
	UpdatedTime *time.Time       `json:"updatedTime,omitempty"`
}

// ClinicianClinicRelationshipV1 defines model for clinicianClinicRelationship.v1.
type ClinicianClinicRelationshipV1 struct {
	// Clinic Clinic
	Clinic ClinicV1 `json:"clinic"`

	// Clinician The `id` may be empty if the clinician invite has not been accepted.
	Clinician ClinicianV1 `json:"clinician"`
}

// ClinicianClinicRelationshipsV1 defines model for clinicianClinicRelationships.v1.
type ClinicianClinicRelationshipsV1 = []ClinicianClinicRelationshipV1

// ClinicianRolesV1 defines model for clinicianRoles.v1.
type ClinicianRolesV1 = []string

// CliniciansV1 defines model for clinicians.v1.
type CliniciansV1 = []ClinicianV1

// ClinicsV1 defines model for clinics.v1.
type ClinicsV1 = []ClinicV1

// CountryV1 Country name.
type CountryV1 = string

// CreatePatientV1 defines model for createPatient.v1.
type CreatePatientV1 struct {
	AttestationSubmitted *bool               `json:"attestationSubmitted,omitempty"`
	BirthDate            *openapi_types.Date `json:"birthDate,omitempty"`

	// FullName The full name of the patient
	FullName   *string `json:"fullName,omitempty"`
	IsMigrated *bool   `json:"isMigrated,omitempty"`

	// LegacyClinicianId String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
	LegacyClinicianId *Tidepooluserid `json:"legacyClinicianId,omitempty"`

	// Mrn The medical record number of the patient
	Mrn         *string               `json:"mrn,omitempty"`
	Permissions *PatientPermissionsV1 `json:"permissions,omitempty"`
	Tags        *PatientTagIdsV1      `json:"tags"`
}

// DataSourceV1 defines model for dataSource.v1.
type DataSourceV1 struct {
	// DataSourceId String representation of a resource id
	DataSourceId *string `json:"dataSourceId,omitempty"`

	// ExpirationTime [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) / [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp _with_ timezone information
	ExpirationTime *DatetimeV1 `json:"expirationTime,omitempty"`

	// ModifiedTime [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) / [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp _with_ timezone information
	ModifiedTime *DatetimeV1       `json:"modifiedTime,omitempty"`
	ProviderName ProviderNameV1    `json:"providerName"`
	State        DataSourceV1State `json:"state"`
}

// DataSourceV1State defines model for DataSourceV1.State.
type DataSourceV1State string

// DataSourcesV1 defines model for dataSources.v1.
type DataSourcesV1 = []DataSourceV1

// DatetimeV1 [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) / [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp _with_ timezone information
type DatetimeV1 = string

// EhrDestinationsV1 defines model for ehrDestinations.v1.
type EhrDestinationsV1 struct {
	// Flowsheet Destination ID override for Flowsheets
	Flowsheet string `json:"flowsheet"`

	// Notes Destination ID override for Notes
	Notes string `json:"notes"`

	// Results Destination ID override for Results
	Results string `json:"results"`
}

// EhrFacilityV1 defines model for ehrFacility.v1.
type EhrFacilityV1 struct {
	// Name Ordering Facility Name
	Name string `json:"name"`
}

// EhrFlowsheetSettingsV1 defines model for ehrFlowsheetSettings.v1.
type EhrFlowsheetSettingsV1 struct {
	// Icode Determine if values should be sent in accorance with ICode2 rounding standards, or if we should send the values at higher precision.
	Icode bool `json:"icode"`
}

// EhrMatchMessageRefV1 defines model for ehrMatchMessageRef.v1.
type EhrMatchMessageRefV1 struct {
	DataModel  EhrMatchMessageRefV1DataModel `json:"dataModel"`
	DocumentId string                        `json:"documentId"`
	EventType  EhrMatchMessageRefV1EventType `json:"eventType"`
}

// EhrMatchMessageRefV1DataModel defines model for EhrMatchMessageRefV1.DataModel.
type EhrMatchMessageRefV1DataModel string

// EhrMatchMessageRefV1EventType defines model for EhrMatchMessageRefV1.EventType.
type EhrMatchMessageRefV1EventType string

// EhrMatchRequestV1 defines model for ehrMatchRequest.v1.
type EhrMatchRequestV1 struct {
	MessageRef *EhrMatchMessageRefV1             `json:"messageRef,omitempty"`
	Patients   *EhrMatchRequestPatientsOptionsV1 `json:"patients,omitempty"`
}

// EhrMatchRequestPatientsOptionsV1 defines model for ehrMatchRequestPatientsOptions.v1.
type EhrMatchRequestPatientsOptionsV1 struct {
	// Criteria Performs an "OR" match for each item in the array
	Criteria []EhrMatchRequestPatientsOptionsV1Criteria `json:"criteria"`

	// OnUniqueMatch Optional action to be performed when a unique match has been found
	OnUniqueMatch *EhrMatchRequestPatientsOptionsV1OnUniqueMatch `json:"onUniqueMatch,omitempty"`
}

// EhrMatchRequestPatientsOptionsV1Criteria defines model for EhrMatchRequestPatientsOptionsV1.Criteria.
type EhrMatchRequestPatientsOptionsV1Criteria string

// EhrMatchRequestPatientsOptionsV1OnUniqueMatch Optional action to be performed when a unique match has been found
type EhrMatchRequestPatientsOptionsV1OnUniqueMatch string

// EhrMatchResponseV1 defines model for ehrMatchResponse.v1.
type EhrMatchResponseV1 struct {
	// Clinic Clinic
	Clinic   ClinicV1      `json:"clinic"`
	Patients *PatientsV1   `json:"patients,omitempty"`
	Settings EhrSettingsV1 `json:"settings"`
}

// EhrProceduresV1 defines model for ehrProcedures.v1.
type EhrProceduresV1 struct {
	CreateAccount                 *string `json:"createAccount,omitempty"`
	CreateAccountAndEnableReports *string `json:"createAccountAndEnableReports,omitempty"`
	DisableSummaryReports         *string `json:"disableSummaryReports,omitempty"`

	// EnableSummaryReports Procedure Code for Summary Statistics and PDF Reports subscription
	EnableSummaryReports *string `json:"enableSummaryReports,omitempty"`
}

// EhrSettingsV1 defines model for ehrSettings.v1.
type EhrSettingsV1 struct {
	DestinationIds *EhrDestinationsV1 `json:"destinationIds,omitempty"`

	// Enabled Enable or disable the EHR integration
	Enabled        bool                   `json:"enabled"`
	Facility       *EhrFacilityV1         `json:"facility,omitempty"`
	Flowsheets     EhrFlowsheetSettingsV1 `json:"flowsheets"`
	MrnIdType      string                 `json:"mrnIdType"`
	ProcedureCodes EhrProceduresV1        `json:"procedureCodes"`
	Provider       EhrSettingsV1Provider  `json:"provider"`

	// ScheduledReports Scheduled Report Settings
	ScheduledReports ScheduledReportsV1 `json:"scheduledReports"`
	SourceId         string             `json:"sourceId"`

	// Tags This configuration only applies to integrations using Redox Data Model
	Tags EhrTagsSettingsV1 `json:"tags"`
}

// EhrSettingsV1Provider defines model for EhrSettingsV1.Provider.
type EhrSettingsV1Provider string

// EhrTagsSettingsV1 This configuration only applies to integrations using Redox Data Model
type EhrTagsSettingsV1 struct {
	// Codes Codes of the clinical info items used to select the tags to associate with the patient. If defined, all tags of a patient will be replaced every time an enrollment order for the patient is processed.
	Codes *[]string `json:"codes,omitempty"`

	// Separator If set to a non-empty string, the tag values will be split using this separator
	Separator *string `json:"separator,omitempty"`
}

// ErrorV1 defines model for error.v1.
type ErrorV1 struct {
	Code    int    `json:"code"`
	Message string `json:"message"`
}

// GenerateMergeReportV1 defines model for generateMergeReport.v1.
type GenerateMergeReportV1 struct {
	// SourceId Clinic identifier.
	SourceId *ClinicIdV1 `json:"sourceId,omitempty"`
}

// MembershipRestrictionV1 A user joining a clinic must match all of the defined restrictions
type MembershipRestrictionV1 struct {
	// EmailDomain The restriction applies only if the user has an email address with a matching domain
	EmailDomain string `json:"emailDomain"`

	// RequiredIdp If this attribute is set, at the time of joining the clinic the user must be authenticated against this identity provider
	RequiredIdp *string `json:"requiredIdp,omitempty"`
}

// MembershipRestrictionsV1 A user joining a clinic must match at least one of the specified membership restrictions
type MembershipRestrictionsV1 struct {
	Restrictions *[]MembershipRestrictionV1 `json:"restrictions,omitempty"`
}

// MergeClinicV1 defines model for mergeClinic.v1.
type MergeClinicV1 struct {
	// SourceId Clinic identifier.
	SourceId *ClinicIdV1 `json:"sourceId,omitempty"`
}

// MetaV1 defines model for meta.v1.
type MetaV1 struct {
	// Count The number of items matching the filter
	Count *int `json:"count,omitempty"`

	// TotalCount The total number of items
	TotalCount *int `json:"totalCount,omitempty"`
}

// MigrationV1 defines model for migration.v1.
type MigrationV1 struct {
	AttestationTime *time.Time `json:"attestationTime,omitempty"`
	CreatedTime     *time.Time `json:"createdTime,omitempty"`

	// Status The current status of the migration
	Status      *MigrationStatusV1 `json:"status,omitempty"`
	UpdatedTime *time.Time         `json:"updatedTime,omitempty"`

	// UserId The user id of the legacy clinician account that needs to be migrated.
	UserId string `json:"userId"`
}

// MigrationStatusV1 The current status of the migration
type MigrationStatusV1 string

// MigrationUpdateV1 defines model for migrationUpdate.v1.
type MigrationUpdateV1 struct {
	// Status The current status of the migration
	Status MigrationStatusV1 `json:"status"`
}

// MigrationsV1 defines model for migrations.v1.
type MigrationsV1 = []MigrationV1

// MrnSettingsV1 defines model for mrnSettings.v1.
type MrnSettingsV1 struct {
	// Required Require MRN when creating or updating patients
	Required bool `json:"required"`

	// Unique Enforce MRN uniqueness constraint
	Unique bool `json:"unique"`
}

// NameV1 Name of the clinic.
type NameV1 = string

// ObjectidV1 String representation of a resource id
type ObjectidV1 = string

// PatientV1 defines model for patient.v1.
type PatientV1 struct {
	AttestationSubmitted *bool                         `json:"attestationSubmitted,omitempty"`
	BirthDate            openapi_types.Date            `json:"birthDate"`
	ConnectionRequests   *ProviderConnectionRequestsV1 `json:"connectionRequests,omitempty"`
	CreatedTime          *time.Time                    `json:"createdTime,omitempty"`
	DataSources          *[]DataSourceV1               `json:"dataSources"`
	Email                *string                       `json:"email,omitempty"`

	// FullName The full name of the patient
	FullName string `json:"fullName"`

	// Id String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
	Id                     *Tidepooluserid `json:"id,omitempty"`
	LastUploadReminderTime *time.Time      `json:"lastUploadReminderTime,omitempty"`

	// Mrn The medical record number of the patient
	Mrn         *string               `json:"mrn,omitempty"`
	Permissions *PatientPermissionsV1 `json:"permissions,omitempty"`
	Reviews     []PatientReviewV1     `json:"reviews"`

	// Summary A summary of a patients recent data
	Summary       *PatientSummaryV1 `json:"summary,omitempty"`
	Tags          *PatientTagIdsV1  `json:"tags"`
	TargetDevices *[]string         `json:"targetDevices,omitempty"`
	UpdatedTime   *time.Time        `json:"updatedTime,omitempty"`
}

// PatientClinicRelationshipV1 defines model for patientClinicRelationship.v1.
type PatientClinicRelationshipV1 struct {
	// Clinic Clinic
	Clinic  ClinicV1  `json:"clinic"`
	Patient PatientV1 `json:"patient"`
}

// PatientClinicRelationshipsV1 defines model for patientClinicRelationships.v1.
type PatientClinicRelationshipsV1 = []PatientClinicRelationshipV1

// PatientCountV1 defines model for patientCount.v1.
type PatientCountV1 struct {
	// PatientCount The patient count for a clinic
	PatientCount int `json:"patientCount"`
}

// PatientCountLimitV1 defines model for patientCountLimit.v1.
type PatientCountLimitV1 struct {
	// EndDate [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) / [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp _with_ timezone information
	EndDate *DatetimeV1 `json:"endDate,omitempty"`

	// PatientCount The patient count limit
	PatientCount int `json:"patientCount"`

	// StartDate [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) / [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) timestamp _with_ timezone information
	StartDate *DatetimeV1 `json:"startDate,omitempty"`
}

// PatientCountSettingsV1 defines model for patientCountSettings.v1.
type PatientCountSettingsV1 struct {
	HardLimit *PatientCountLimitV1 `json:"hardLimit,omitempty"`
	SoftLimit *PatientCountLimitV1 `json:"softLimit,omitempty"`
}

// PatientPermissionsV1 defines model for patientPermissions.v1.
type PatientPermissionsV1 struct {
	Custodian *map[string]interface{} `json:"custodian,omitempty"`
	Note      *map[string]interface{} `json:"note,omitempty"`
	Upload    *map[string]interface{} `json:"upload,omitempty"`
	View      *map[string]interface{} `json:"view,omitempty"`
}

// PatientReviewV1 A summary of a patients recent data
type PatientReviewV1 struct {
	ClinicianId string    `json:"clinicianId"`
	Time        time.Time `json:"time"`
}

// PatientReviewsV1 defines model for patientReviews.v1.
type PatientReviewsV1 = []PatientReviewV1

// PatientSummaryV1 A summary of a patients recent data
type PatientSummaryV1 struct {
	// BgmStats A summary of a users recent BGM glucose values
	BgmStats *BgmStatsV1 `json:"bgmStats,omitempty"`

	// CgmStats A summary of a users recent CGM glucose values
	CgmStats *CgmStatsV1 `json:"cgmStats,omitempty"`
}

// PatientTagV1 defines model for patientTag.v1.
type PatientTagV1 struct {
	// Id String representation of a resource id
	Id *ObjectidV1 `json:"id,omitempty"`

	// Name The tag display name
	Name string `json:"name"`
}

// PatientTagIdsV1 defines model for patientTagIds.v1.
type PatientTagIdsV1 = []string

// PatientsV1 defines model for patients.v1.
type PatientsV1 = []PatientV1

// PatientsResponseV1 defines model for patientsResponse.v1.
type PatientsResponseV1 struct {
	Data *PatientsV1 `json:"data,omitempty"`
	Meta *MetaV1     `json:"meta,omitempty"`
}

// PhoneNumberV1 defines model for phoneNumber.v1.
type PhoneNumberV1 struct {
	Number string  `json:"number"`
	Type   *string `json:"type,omitempty"`
}

// PhoneNumbersV1 An array of phone numbers.
type PhoneNumbersV1 = []PhoneNumberV1

// PostalCodeV1 Postal code. In the U.S., typically the zip code such as `94301` or `94301-1704`.
type PostalCodeV1 = string

// ProviderConnectionRequestV1 defines model for providerConnectionRequest.v1.
type ProviderConnectionRequestV1 struct {
	CreatedTime  time.Time    `json:"createdTime"`
	ProviderName ProviderIdV1 `json:"providerName"`
}

// ProviderConnectionRequestsV1 defines model for providerConnectionRequests.v1.
type ProviderConnectionRequestsV1 struct {
	Abbott []ProviderConnectionRequestV1 `json:"abbott"`
	Dexcom []ProviderConnectionRequestV1 `json:"dexcom"`
	Twiist []ProviderConnectionRequestV1 `json:"twiist"`
}

// ProviderIdV1 defines model for providerId.v1.
type ProviderIdV1 string

// ProviderNameV1 defines model for providerName.v1.
type ProviderNameV1 = string

// ScheduledReportsV1 Scheduled Report Settings
type ScheduledReportsV1 struct {
	// Cadence The cadence of the scheduled reports. Disabling the scheduled reports does not affect reports which are generated after a dataset is uploaded.
	Cadence ScheduledReportsV1Cadence `json:"cadence"`

	// OnUploadEnabled Send a PDF Report and a Flowsheet to Redox after a dataset is uploaded.
	OnUploadEnabled       bool                                     `json:"onUploadEnabled"`
	OnUploadNoteEventType *ScheduledReportsV1OnUploadNoteEventType `json:"onUploadNoteEventType,omitempty"`
}

// ScheduledReportsV1Cadence The cadence of the scheduled reports. Disabling the scheduled reports does not affect reports which are generated after a dataset is uploaded.
type ScheduledReportsV1Cadence string

// ScheduledReportsV1OnUploadNoteEventType defines model for ScheduledReportsV1.OnUploadNoteEventType.
type ScheduledReportsV1OnUploadNoteEventType string

// ShareCodeV1 Globally unique share code for a clinic. The share code is 3 groups of 4 uppercase alphanumeric characters in each group. Ambiguous characters such as `I` and `1`, or `O` and `0` are excluded.
type ShareCodeV1 = string

// StateV1 State or province. In the U.S., typically something like `CA` or `California`.
type StateV1 = string

// StreetAddressV1 Street address.
type StreetAddressV1 = string

// SummaryConfigV1 Summary schema version and calculation configuration
type SummaryConfigV1 struct {
	// HighGlucoseThreshold Threshold used for determining if a value is high
	HighGlucoseThreshold float64 `json:"highGlucoseThreshold"`

	// LowGlucoseThreshold Threshold used for determining if a value is low
	LowGlucoseThreshold float64 `json:"lowGlucoseThreshold"`

	// SchemaVersion Summary schema version
	SchemaVersion int `json:"schemaVersion"`

	// VeryHighGlucoseThreshold Threshold used for determining if a value is very high
	VeryHighGlucoseThreshold float64 `json:"veryHighGlucoseThreshold"`

	// VeryLowGlucoseThreshold Threshold used for determining if a value is very low
	VeryLowGlucoseThreshold float64 `json:"veryLowGlucoseThreshold"`
}

// SummaryDatesV1 dates tracked for summary calculation
type SummaryDatesV1 struct {
	// FirstData Date of the first included value
	FirstData         *time.Time `json:"firstData,omitempty"`
	HasFirstData      bool       `json:"hasFirstData"`
	HasLastData       bool       `json:"hasLastData"`
	HasLastUploadDate bool       `json:"hasLastUploadDate"`
	HasOutdatedSince  bool       `json:"hasOutdatedSince"`

	// LastData Date of the last calculated value
	LastData *time.Time `json:"lastData,omitempty"`

	// LastUpdatedDate Date of the last calculation
	LastUpdatedDate *time.Time `json:"lastUpdatedDate,omitempty"`

	// LastUpdatedReason List of reasons the summary was updated for
	LastUpdatedReason *[]string `json:"lastUpdatedReason,omitempty"`

	// LastUploadDate Created date of the last calculated value
	LastUploadDate *time.Time `json:"lastUploadDate,omitempty"`

	// OutdatedReason List of reasons the summary was marked outdated for
	OutdatedReason *[]string `json:"outdatedReason,omitempty"`

	// OutdatedSince Date of the first user upload after lastData, removed when calculated
	OutdatedSince *time.Time `json:"outdatedSince,omitempty"`

	// OutdatedSinceLimit Upper limit of the OutdatedSince value to prevent infinite queue duration
	OutdatedSinceLimit *time.Time `json:"outdatedSinceLimit,omitempty"`
}

// SummaryIdV1 Summary Unique Identifier
type SummaryIdV1 = string

// SuppressedNotificationsV1 defines model for suppressedNotifications.v1.
type SuppressedNotificationsV1 struct {
	PatientClinicInvitation *bool `json:"patientClinicInvitation,omitempty"`
}

// TideConfigV1 defines model for tideConfig.v1.
type TideConfigV1 struct {
	// ClinicId Clinic identifier.
	ClinicId *ClinicIdV1   `json:"clinicId,omitempty"`
	Filters  TideFiltersV1 `json:"filters"`

	// HighGlucoseThreshold Threshold used for determining if a value is high
	HighGlucoseThreshold float64   `json:"highGlucoseThreshold"`
	LastDataCutoff       time.Time `json:"lastDataCutoff"`

	// LowGlucoseThreshold Threshold used for determining if a value is low
	LowGlucoseThreshold float64 `json:"lowGlucoseThreshold"`
	Period              string  `json:"period"`

	// SchemaVersion TIDE schema version
	SchemaVersion int              `json:"schemaVersion"`
	Tags          *PatientTagIdsV1 `json:"tags"`

	// VeryHighGlucoseThreshold Threshold used for determining if a value is very high
	VeryHighGlucoseThreshold float64 `json:"veryHighGlucoseThreshold"`

	// VeryLowGlucoseThreshold Threshold used for determining if a value is very low
	VeryLowGlucoseThreshold float64 `json:"veryLowGlucoseThreshold"`
}

// TideFiltersV1 defines model for tideFilters.v1.
type TideFiltersV1 struct {
	DropInTimeInTargetPercent string `json:"dropInTimeInTargetPercent"`
	TimeCGMUsePercent         string `json:"timeCGMUsePercent"`
	TimeInAnyLowPercent       string `json:"timeInAnyLowPercent"`
	TimeInTargetPercent       string `json:"timeInTargetPercent"`
	TimeInVeryLowPercent      string `json:"timeInVeryLowPercent"`
}

// TidePatientV1 defines model for tidePatient.v1.
type TidePatientV1 struct {
	DataSources *[]DataSourceV1 `json:"dataSources"`
	Email       *string         `json:"email,omitempty"`

	// FullName The full name of the patient
	FullName *string `json:"fullName,omitempty"`

	// Id String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
	Id      *Tidepooluserid   `json:"id,omitempty"`
	Reviews []PatientReviewV1 `json:"reviews"`
	Tags    *PatientTagIdsV1  `json:"tags"`
}

// TideResponseV1 Report of at-risk patients based on specific grouping criteria
type TideResponseV1 struct {
	Config  TideConfigV1  `json:"config"`
	Results TideResultsV1 `json:"results"`
}

// TideResultPatientV1 defines model for tideResultPatient.v1.
type TideResultPatientV1 struct {
	// AverageGlucoseMmol Average Glucose of records in this period
	AverageGlucoseMmol *float64 `json:"averageGlucoseMmol,omitempty"`

	// GlucoseManagementIndicator A derived value which emulates A1C
	GlucoseManagementIndicator *float64      `json:"glucoseManagementIndicator,omitempty"`
	LastData                   *time.Time    `json:"lastData,omitempty"`
	Patient                    TidePatientV1 `json:"patient"`

	// TimeCGMUseMinutes Counter of minutes spent wearing a cgm
	TimeCGMUseMinutes *int `json:"timeCGMUseMinutes,omitempty"`

	// TimeCGMUsePercent Percentage of time spent wearing a cgm
	TimeCGMUsePercent *float64 `json:"timeCGMUsePercent,omitempty"`

	// TimeInAnyHighPercent Percentage of time spent in any high glucose range
	TimeInAnyHighPercent *float64 `json:"timeInAnyHighPercent,omitempty"`

	// TimeInAnyLowPercent Percentage of time spent in any low glucose range
	TimeInAnyLowPercent *float64 `json:"timeInAnyLowPercent,omitempty"`

	// TimeInHighPercent Percentage of time spent in high glucose range
	TimeInHighPercent *float64 `json:"timeInHighPercent,omitempty"`

	// TimeInLowPercent Percentage of time spent in low glucose range
	TimeInLowPercent *float64 `json:"timeInLowPercent,omitempty"`

	// TimeInTargetPercent Percentage of time spent in target glucose range
	TimeInTargetPercent *float64 `json:"timeInTargetPercent,omitempty"`

	// TimeInTargetPercentDelta Difference between the timeInTargetPercent in this period and version in the opposite offset
	TimeInTargetPercentDelta *float64 `json:"timeInTargetPercentDelta,omitempty"`

	// TimeInVeryHighPercent Percentage of time spent in very high glucose range
	TimeInVeryHighPercent *float64 `json:"timeInVeryHighPercent,omitempty"`

	// TimeInVeryLowPercent Percentage of time spent in very low glucose range
	TimeInVeryLowPercent *float64 `json:"timeInVeryLowPercent,omitempty"`
}

// TideResultsV1 defines model for tideResults.v1.
type TideResultsV1 map[string][]TideResultPatientV1

// TidepoolUserIdsV1 Array of Tidepool User IDs
type TidepoolUserIdsV1 = []Tidepooluserid

// Tidepooluserid String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
type Tidepooluserid = string

// TierV1 defines model for tier.v1.
type TierV1 string

// TriggerMigrationV1 defines model for triggerMigration.v1.
type TriggerMigrationV1 struct {
	AttestationSubmitted *bool `json:"attestationSubmitted,omitempty"`
}

// UpdateUserDetailsV1 defines model for updateUserDetails.v1.
type UpdateUserDetailsV1 struct {
	Email *openapi_types.Email `json:"email,omitempty"`
}

// ClinicId defines model for clinicId.
type ClinicId = string

// ClinicianId defines model for clinicianId.
type ClinicianId = string

// CreatedTimeEnd defines model for createdTimeEnd.
type CreatedTimeEnd = time.Time

// CreatedTimeStart defines model for createdTimeStart.
type CreatedTimeStart = time.Time

// EhrEnabled defines model for ehrEnabled.
type EhrEnabled = bool

// Email defines model for email.
type Email = openapi_types.Email

// InviteId defines model for inviteId.
type InviteId = string

// Limit defines model for limit.
type Limit = int

// Offset defines model for offset.
type Offset = int

// PatientId defines model for patientId.
type PatientId = string

// PatientTagId defines model for patientTagId.
type PatientTagId = string

// ProviderId defines model for providerId.
type ProviderId = ProviderIdV1

// Role defines model for role.
type Role = string

// Search defines model for search.
type Search = string

// ShareCode defines model for shareCode.
type ShareCode = string

// Sort defines model for sort.
type Sort = string

// SummaryId Summary Unique Identifier
type SummaryId = SummaryIdV1

// UserId String representation of a Tidepool User ID. Old style IDs are 10-digit strings consisting of only hexadeximcal digits. New style IDs are 36-digit [UUID v4](https://en.wikipedia.org/wiki/Universally_unique_identifier#Version_4_(random))
type UserId = Tidepooluserid

// ListAllCliniciansParams defines parameters for ListAllClinicians.
type ListAllCliniciansParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`

	// CreatedTimeStart Return records created after the given date (inclusive)
	CreatedTimeStart *CreatedTimeStart `form:"createdTimeStart,omitempty" json:"createdTimeStart,omitempty"`

	// CreatedTimeEnd Return records created before the given date (exclusive)
	CreatedTimeEnd *CreatedTimeEnd `form:"createdTimeEnd,omitempty" json:"createdTimeEnd,omitempty"`
}

// ListClinicsForClinicianParams defines parameters for ListClinicsForClinician.
type ListClinicsForClinicianParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
}

// ListClinicsParams defines parameters for ListClinics.
type ListClinicsParams struct {
	Limit     *Limit     `form:"limit,omitempty" json:"limit,omitempty"`
	Offset    *Offset    `form:"offset,omitempty" json:"offset,omitempty"`
	ShareCode *ShareCode `form:"shareCode,omitempty" json:"shareCode,omitempty"`

	// CreatedTimeStart Return records created after the given date (inclusive)
	CreatedTimeStart *CreatedTimeStart `form:"createdTimeStart,omitempty" json:"createdTimeStart,omitempty"`

	// CreatedTimeEnd Return records created before the given date (exclusive)
	CreatedTimeEnd *CreatedTimeEnd `form:"createdTimeEnd,omitempty" json:"createdTimeEnd,omitempty"`

	// EhrEnabled Retrieve clinics with enabled EHR integration
	EhrEnabled *EhrEnabled `form:"ehrEnabled,omitempty" json:"ehrEnabled,omitempty"`
}

// ListCliniciansParams defines parameters for ListClinicians.
type ListCliniciansParams struct {
	// Search Full text search query
	Search *Search `form:"search,omitempty" json:"search,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
	Email  *Email  `form:"email,omitempty" json:"email,omitempty"`
	Role   *Role   `form:"role,omitempty" json:"role,omitempty"`
}

// ListPatientsParams defines parameters for ListPatients.
type ListPatientsParams struct {
	// Search Full text search query
	Search *Search `form:"search,omitempty" json:"search,omitempty"`
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`

	// Sort Sort order and attribute (e.g. +name or -name)
	Sort *Sort `form:"sort,omitempty" json:"sort,omitempty"`

	// SortType Summary type to sort by
	SortType *string `form:"sortType,omitempty" json:"sortType,omitempty"`

	// Period Time Period to display, filter, and sort
	Period *string `form:"period,omitempty" json:"period,omitempty"`

	// LastReviewed Inclusive
	LastReviewed *time.Time `form:"lastReviewed,omitempty" json:"lastReviewed,omitempty"`

	// CgmMax Max glucose value in Mmol/L
	CgmMax *FloatFilter `form:"cgm.max,omitempty" json:"cgm.max,omitempty"`

	// CgmMin Min glucose value in Mmol/L
	CgmMin *FloatFilter `form:"cgm.min,omitempty" json:"cgm.min,omitempty"`

	// CgmAverageGlucoseMmol Average glucose value of records in Mmol/L
	CgmAverageGlucoseMmol *FloatFilter `form:"cgm.averageGlucoseMmol,omitempty" json:"cgm.averageGlucoseMmol,omitempty"`

	// CgmGlucoseManagementIndicator Glucose management Indicator of records
	CgmGlucoseManagementIndicator *FloatFilter `form:"cgm.glucoseManagementIndicator,omitempty" json:"cgm.glucoseManagementIndicator,omitempty"`

	// CgmTimeCGMUsePercent Percentage of time [0.0-1.0]  of CGM use
	CgmTimeCGMUsePercent *FloatFilter `form:"cgm.timeCGMUsePercent,omitempty" json:"cgm.timeCGMUsePercent,omitempty"`

	// CgmTimeInVeryLowPercent Percentage of time [0.0-1.0]  below 54 mg/dL
	CgmTimeInVeryLowPercent *FloatFilter `form:"cgm.timeInVeryLowPercent,omitempty" json:"cgm.timeInVeryLowPercent,omitempty"`

	// CgmTimeInAnyLowPercent Percentage of time [0.0-1.0]  below 70 mg/dL
	CgmTimeInAnyLowPercent *FloatFilter `form:"cgm.timeInAnyLowPercent,omitempty" json:"cgm.timeInAnyLowPercent,omitempty"`

	// CgmTimeInLowPercent Percentage of time [0.0-1.0]  in range 54-70 mg/dL
	CgmTimeInLowPercent *FloatFilter `form:"cgm.timeInLowPercent,omitempty" json:"cgm.timeInLowPercent,omitempty"`

	// CgmTimeInTargetPercent Percentage of time [0.0-1.0]  in range 70-180 mg/dL
	CgmTimeInTargetPercent *FloatFilter `form:"cgm.timeInTargetPercent,omitempty" json:"cgm.timeInTargetPercent,omitempty"`

	// CgmTimeInHighPercent Percentage of time [0.0-1.0]  in range 180-250 mg/dL
	CgmTimeInHighPercent *FloatFilter `form:"cgm.timeInHighPercent,omitempty" json:"cgm.timeInHighPercent,omitempty"`

	// CgmTimeInVeryHighPercent Percentage of time [0.0-1.0]  above 250 mg/dL
	CgmTimeInVeryHighPercent *FloatFilter `form:"cgm.timeInVeryHighPercent,omitempty" json:"cgm.timeInVeryHighPercent,omitempty"`

	// CgmTimeInExtremeHighPercent Percentage of time [0.0-1.0]  above 350 mg/dL
	CgmTimeInExtremeHighPercent *FloatFilter `form:"cgm.timeInExtremeHighPercent,omitempty" json:"cgm.timeInExtremeHighPercent,omitempty"`

	// CgmTimeInAnyHighPercent Percentage of time [0.0-1.0]  above 180 mg/dL
	CgmTimeInAnyHighPercent *FloatFilter `form:"cgm.timeInAnyHighPercent,omitempty" json:"cgm.timeInAnyHighPercent,omitempty"`

	// CgmTimeCGMUseMinutes Minutes of CGM use
	CgmTimeCGMUseMinutes *IntFilter `form:"cgm.timeCGMUseMinutes,omitempty" json:"cgm.timeCGMUseMinutes,omitempty"`

	// CgmTimeInVeryLowMinutes Minutes below 54 mg/dL
	CgmTimeInVeryLowMinutes *IntFilter `form:"cgm.timeInVeryLowMinutes,omitempty" json:"cgm.timeInVeryLowMinutes,omitempty"`

	// CgmTimeInAnyLowMinutes Minutes below 70 mg/dL
	CgmTimeInAnyLowMinutes *IntFilter `form:"cgm.timeInAnyLowMinutes,omitempty" json:"cgm.timeInAnyLowMinutes,omitempty"`

	// CgmTimeInLowMinutes Minutes in range 54-70 mg/dL
	CgmTimeInLowMinutes *IntFilter `form:"cgm.timeInLowMinutes,omitempty" json:"cgm.timeInLowMinutes,omitempty"`

	// CgmTimeInTargetMinutes Minutes in range 70-180 mg/dL
	CgmTimeInTargetMinutes *IntFilter `form:"cgm.timeInTargetMinutes,omitempty" json:"cgm.timeInTargetMinutes,omitempty"`

	// CgmTimeInHighMinutes Minutes in range 180-250 mg/dL
	CgmTimeInHighMinutes *IntFilter `form:"cgm.timeInHighMinutes,omitempty" json:"cgm.timeInHighMinutes,omitempty"`

	// CgmTimeInVeryHighMinutes Minutes above 250 mg/dL
	CgmTimeInVeryHighMinutes *IntFilter `form:"cgm.timeInVeryHighMinutes,omitempty" json:"cgm.timeInVeryHighMinutes,omitempty"`

	// CgmTimeInExtremeHighMinutes Minutes above 350 mg/dL
	CgmTimeInExtremeHighMinutes *IntFilter `form:"cgm.timeInExtremeHighMinutes,omitempty" json:"cgm.timeInExtremeHighMinutes,omitempty"`

	// CgmTimeInAnyHighMinutes Minutes above 180 mg/dL
	CgmTimeInAnyHighMinutes *IntFilter `form:"cgm.timeInAnyHighMinutes,omitempty" json:"cgm.timeInAnyHighMinutes,omitempty"`

	// CgmTimeCGMUseRecords Records of CGM use
	CgmTimeCGMUseRecords *IntFilter `form:"cgm.timeCGMUseRecords,omitempty" json:"cgm.timeCGMUseRecords,omitempty"`

	// CgmTimeInVeryLowRecords Records below 54 mg/dL
	CgmTimeInVeryLowRecords *IntFilter `form:"cgm.timeInVeryLowRecords,omitempty" json:"cgm.timeInVeryLowRecords,omitempty"`

	// CgmTimeInAnyLowRecords Records below 70 mg/dL
	CgmTimeInAnyLowRecords *IntFilter `form:"cgm.timeInAnyLowRecords,omitempty" json:"cgm.timeInAnyLowRecords,omitempty"`

	// CgmTimeInLowRecords Records in range 54-70 mg/dL
	CgmTimeInLowRecords *IntFilter `form:"cgm.timeInLowRecords,omitempty" json:"cgm.timeInLowRecords,omitempty"`

	// CgmTimeInTargetRecords Records in range 70-180 mg/dL
	CgmTimeInTargetRecords *IntFilter `form:"cgm.timeInTargetRecords,omitempty" json:"cgm.timeInTargetRecords,omitempty"`

	// CgmTimeInHighRecords Records in range 180-250 mg/dL
	CgmTimeInHighRecords *IntFilter `form:"cgm.timeInHighRecords,omitempty" json:"cgm.timeInHighRecords,omitempty"`

	// CgmTimeInVeryHighRecords Records above 250 mg/dL
	CgmTimeInVeryHighRecords *IntFilter `form:"cgm.timeInVeryHighRecords,omitempty" json:"cgm.timeInVeryHighRecords,omitempty"`

	// CgmTimeInAnyHighRecords Records above 180 mg/dL
	CgmTimeInAnyHighRecords *IntFilter `form:"cgm.timeInAnyHighRecords,omitempty" json:"cgm.timeInAnyHighRecords,omitempty"`

	// CgmAverageDailyRecords Average records per day
	CgmAverageDailyRecords *FloatFilter `form:"cgm.averageDailyRecords,omitempty" json:"cgm.averageDailyRecords,omitempty"`

	// CgmTotalRecords Total records in period
	CgmTotalRecords *IntFilter `form:"cgm.totalRecords,omitempty" json:"cgm.totalRecords,omitempty"`

	// CgmHoursWithData Total hours with data in period
	CgmHoursWithData *IntFilter `form:"cgm.hoursWithData,omitempty" json:"cgm.hoursWithData,omitempty"`

	// CgmDaysWithData Total days with data in period
	CgmDaysWithData *IntFilter `form:"cgm.daysWithData,omitempty" json:"cgm.daysWithData,omitempty"`

	// CgmStandardDeviation Standard deviation of glucose values in Mmol/L
	CgmStandardDeviation *FloatFilter `form:"cgm.standardDeviation,omitempty" json:"cgm.standardDeviation,omitempty"`

	// CgmCoefficientOfVariation Coefficient Of Variation of glucose values in Mmol/L
	CgmCoefficientOfVariation *FloatFilter `form:"cgm.coefficientOfVariation,omitempty" json:"cgm.coefficientOfVariation,omitempty"`

	// BgmMax Max glucose value in Mmol/L
	BgmMax *FloatFilter `form:"bgm.max,omitempty" json:"bgm.max,omitempty"`

	// BgmMin Min glucose value in Mmol/L
	BgmMin *FloatFilter `form:"bgm.min,omitempty" json:"bgm.min,omitempty"`

	// BgmAverageGlucoseMmol Average glucose value of records in Mmol/L
	BgmAverageGlucoseMmol *FloatFilter `form:"bgm.averageGlucoseMmol,omitempty" json:"bgm.averageGlucoseMmol,omitempty"`

	// BgmTimeInVeryLowPercent Percentage of time [0.0-1.0]  below 54 mg/dL
	BgmTimeInVeryLowPercent *FloatFilter `form:"bgm.timeInVeryLowPercent,omitempty" json:"bgm.timeInVeryLowPercent,omitempty"`

	// BgmTimeInAnyLowPercent Percentage of time [0.0-1.0]  below 70 mg/dL
	BgmTimeInAnyLowPercent *FloatFilter `form:"bgm.timeInAnyLowPercent,omitempty" json:"bgm.timeInAnyLowPercent,omitempty"`

	// BgmTimeInLowPercent Percentage of time [0.0-1.0]  in range 54-70 mg/dL
	BgmTimeInLowPercent *FloatFilter `form:"bgm.timeInLowPercent,omitempty" json:"bgm.timeInLowPercent,omitempty"`

	// BgmTimeInTargetPercent Percentage of time [0.0-1.0]  in range 70-180 mg/dL
	BgmTimeInTargetPercent *FloatFilter `form:"bgm.timeInTargetPercent,omitempty" json:"bgm.timeInTargetPercent,omitempty"`

	// BgmTimeInHighPercent Percentage of time [0.0-1.0]  in range 180-250 mg/dL
	BgmTimeInHighPercent *FloatFilter `form:"bgm.timeInHighPercent,omitempty" json:"bgm.timeInHighPercent,omitempty"`

	// BgmTimeInVeryHighPercent Percentage of time [0.0-1.0]  above 250 mg/dL
	BgmTimeInVeryHighPercent *FloatFilter `form:"bgm.timeInVeryHighPercent,omitempty" json:"bgm.timeInVeryHighPercent,omitempty"`

	// BgmTimeInExtremeHighPercent Percentage of time [0.0-1.0]  above 350 mg/dL
	BgmTimeInExtremeHighPercent *FloatFilter `form:"bgm.timeInExtremeHighPercent,omitempty" json:"bgm.timeInExtremeHighPercent,omitempty"`

	// BgmTimeInAnyHighPercent Percentage of time [0.0-1.0]  above 180 mg/dL
	BgmTimeInAnyHighPercent *FloatFilter `form:"bgm.timeInAnyHighPercent,omitempty" json:"bgm.timeInAnyHighPercent,omitempty"`

	// BgmTimeInVeryLowRecords Records below 54 mg/dL
	BgmTimeInVeryLowRecords *IntFilter `form:"bgm.timeInVeryLowRecords,omitempty" json:"bgm.timeInVeryLowRecords,omitempty"`

	// BgmTimeInAnyLowRecords Records below 70 mg/dL
	BgmTimeInAnyLowRecords *IntFilter `form:"bgm.timeInAnyLowRecords,omitempty" json:"bgm.timeInAnyLowRecords,omitempty"`

	// BgmTimeInLowRecords Records in range 54-70 mg/dL
	BgmTimeInLowRecords *IntFilter `form:"bgm.timeInLowRecords,omitempty" json:"bgm.timeInLowRecords,omitempty"`

	// BgmTimeInTargetRecords Records in range 70-180 mg/dL
	BgmTimeInTargetRecords *IntFilter `form:"bgm.timeInTargetRecords,omitempty" json:"bgm.timeInTargetRecords,omitempty"`

	// BgmTimeInHighRecords Records in range 180-250 mg/dL
	BgmTimeInHighRecords *IntFilter `form:"bgm.timeInHighRecords,omitempty" json:"bgm.timeInHighRecords,omitempty"`

	// BgmTimeInVeryHighRecords Records above 250 mg/dL
	BgmTimeInVeryHighRecords *IntFilter `form:"bgm.timeInVeryHighRecords,omitempty" json:"bgm.timeInVeryHighRecords,omitempty"`

	// BgmTimeInAnyHighRecords Records above 180 mg/dL
	BgmTimeInAnyHighRecords *IntFilter `form:"bgm.timeInAnyHighRecords,omitempty" json:"bgm.timeInAnyHighRecords,omitempty"`

	// BgmAverageDailyRecords Average records per day
	BgmAverageDailyRecords *FloatFilter `form:"bgm.averageDailyRecords,omitempty" json:"bgm.averageDailyRecords,omitempty"`

	// BgmTotalRecords Total records in period
	BgmTotalRecords *IntFilter `form:"bgm.totalRecords,omitempty" json:"bgm.totalRecords,omitempty"`

	// CgmMaxDelta Delta of Max glucose value in Mmol/L
	CgmMaxDelta *FloatFilter `form:"cgm.maxDelta,omitempty" json:"cgm.maxDelta,omitempty"`

	// CgmMinDelta Delta of Min glucose value in Mmol/L
	CgmMinDelta *FloatFilter `form:"cgm.minDelta,omitempty" json:"cgm.minDelta,omitempty"`

	// CgmAverageGlucoseMmolDelta Delta of average glucose value in Mmol/L
	CgmAverageGlucoseMmolDelta *FloatFilter `form:"cgm.averageGlucoseMmolDelta,omitempty" json:"cgm.averageGlucoseMmolDelta,omitempty"`

	// CgmGlucoseManagementIndicatorDelta Glucose management Indicator of records
	CgmGlucoseManagementIndicatorDelta *FloatFilter `form:"cgm.glucoseManagementIndicatorDelta,omitempty" json:"cgm.glucoseManagementIndicatorDelta,omitempty"`

	// CgmTimeCGMUsePercentDelta Delta of time of CGM use
	CgmTimeCGMUsePercentDelta *FloatFilter `form:"cgm.timeCGMUsePercentDelta,omitempty" json:"cgm.timeCGMUsePercentDelta,omitempty"`

	// CgmTimeInVeryLowPercentDelta Delta of time below 54 mg/dL
	CgmTimeInVeryLowPercentDelta *FloatFilter `form:"cgm.timeInVeryLowPercentDelta,omitempty" json:"cgm.timeInVeryLowPercentDelta,omitempty"`

	// CgmTimeInAnyLowPercentDelta Delta of time below 70 mg/dL
	CgmTimeInAnyLowPercentDelta *FloatFilter `form:"cgm.timeInAnyLowPercentDelta,omitempty" json:"cgm.timeInAnyLowPercentDelta,omitempty"`

	// CgmTimeInLowPercentDelta Delta of time in range 54-70 mg/dL
	CgmTimeInLowPercentDelta *FloatFilter `form:"cgm.timeInLowPercentDelta,omitempty" json:"cgm.timeInLowPercentDelta,omitempty"`

	// CgmTimeInTargetPercentDelta Delta of time in range 70-180 mg/dL
	CgmTimeInTargetPercentDelta *FloatFilter `form:"cgm.timeInTargetPercentDelta,omitempty" json:"cgm.timeInTargetPercentDelta,omitempty"`

	// CgmTimeInHighPercentDelta Delta of time in range 180-250 mg/dL
	CgmTimeInHighPercentDelta *FloatFilter `form:"cgm.timeInHighPercentDelta,omitempty" json:"cgm.timeInHighPercentDelta,omitempty"`

	// CgmTimeInVeryHighPercentDelta Delta of time above 250 mg/dL
	CgmTimeInVeryHighPercentDelta *FloatFilter `form:"cgm.timeInVeryHighPercentDelta,omitempty" json:"cgm.timeInVeryHighPercentDelta,omitempty"`

	// CgmTimeInExtremeHighPercentDelta Delta of time above 350 mg/dL
	CgmTimeInExtremeHighPercentDelta *FloatFilter `form:"cgm.timeInExtremeHighPercentDelta,omitempty" json:"cgm.timeInExtremeHighPercentDelta,omitempty"`

	// CgmTimeInAnyHighPercentDelta Delta of time above 180 mg/dL
	CgmTimeInAnyHighPercentDelta *FloatFilter `form:"cgm.timeInAnyHighPercentDelta,omitempty" json:"cgm.timeInAnyHighPercentDelta,omitempty"`

	// CgmTimeCGMUseMinutesDelta Delta of minutes of CGM use
	CgmTimeCGMUseMinutesDelta *IntFilter `form:"cgm.timeCGMUseMinutesDelta,omitempty" json:"cgm.timeCGMUseMinutesDelta,omitempty"`

	// CgmTimeInVeryLowMinutesDelta Delta of minutes below 54 mg/dL
	CgmTimeInVeryLowMinutesDelta *IntFilter `form:"cgm.timeInVeryLowMinutesDelta,omitempty" json:"cgm.timeInVeryLowMinutesDelta,omitempty"`

	// CgmTimeInAnyLowMinutesDelta Delta of minutes below 70 mg/dL
	CgmTimeInAnyLowMinutesDelta *IntFilter `form:"cgm.timeInAnyLowMinutesDelta,omitempty" json:"cgm.timeInAnyLowMinutesDelta,omitempty"`

	// CgmTimeInLowMinutesDelta Delta of minutes in range 54-70 mg/dL
	CgmTimeInLowMinutesDelta *IntFilter `form:"cgm.timeInLowMinutesDelta,omitempty" json:"cgm.timeInLowMinutesDelta,omitempty"`

	// CgmTimeInTargetMinutesDelta Delta of minutes in range 70-180 mg/dL
	CgmTimeInTargetMinutesDelta *IntFilter `form:"cgm.timeInTargetMinutesDelta,omitempty" json:"cgm.timeInTargetMinutesDelta,omitempty"`

	// CgmTimeInHighMinutesDelta Delta of minutes in range 180-250 mg/dL
	CgmTimeInHighMinutesDelta *IntFilter `form:"cgm.timeInHighMinutesDelta,omitempty" json:"cgm.timeInHighMinutesDelta,omitempty"`

	// CgmTimeInVeryHighMinutesDelta Delta of minutes above 250 mg/dL
	CgmTimeInVeryHighMinutesDelta *IntFilter `form:"cgm.timeInVeryHighMinutesDelta,omitempty" json:"cgm.timeInVeryHighMinutesDelta,omitempty"`

	// CgmTimeInExtremeHighMinutesDelta Delta of minutes above 350 mg/dL
	CgmTimeInExtremeHighMinutesDelta *IntFilter `form:"cgm.timeInExtremeHighMinutesDelta,omitempty" json:"cgm.timeInExtremeHighMinutesDelta,omitempty"`

	// CgmTimeInAnyHighMinutesDelta Delta of minutes above 180 mg/dL
	CgmTimeInAnyHighMinutesDelta *IntFilter `form:"cgm.timeInAnyHighMinutesDelta,omitempty" json:"cgm.timeInAnyHighMinutesDelta,omitempty"`

	// CgmTimeCGMUseRecordsDelta Delta of records count
	CgmTimeCGMUseRecordsDelta *IntFilter `form:"cgm.timeCGMUseRecordsDelta,omitempty" json:"cgm.timeCGMUseRecordsDelta,omitempty"`

	// CgmTimeInVeryLowRecordsDelta Delta of records below 54 mg/dL
	CgmTimeInVeryLowRecordsDelta *IntFilter `form:"cgm.timeInVeryLowRecordsDelta,omitempty" json:"cgm.timeInVeryLowRecordsDelta,omitempty"`

	// CgmTimeInAnyLowRecordsDelta Delta of records below 70 mg/dL
	CgmTimeInAnyLowRecordsDelta *IntFilter `form:"cgm.timeInAnyLowRecordsDelta,omitempty" json:"cgm.timeInAnyLowRecordsDelta,omitempty"`

	// CgmTimeInLowRecordsDelta Delta of records in range 54-70 mg/dL
	CgmTimeInLowRecordsDelta *IntFilter `form:"cgm.timeInLowRecordsDelta,omitempty" json:"cgm.timeInLowRecordsDelta,omitempty"`

	// CgmTimeInTargetRecordsDelta Delta of records in range 70-180 mg/dL
	CgmTimeInTargetRecordsDelta *IntFilter `form:"cgm.timeInTargetRecordsDelta,omitempty" json:"cgm.timeInTargetRecordsDelta,omitempty"`

	// CgmTimeInHighRecordsDelta Delta of records in range 180-250 mg/dL
	CgmTimeInHighRecordsDelta *IntFilter `form:"cgm.timeInHighRecordsDelta,omitempty" json:"cgm.timeInHighRecordsDelta,omitempty"`

	// CgmTimeInVeryHighRecordsDelta Delta of records above 250 mg/dL
	CgmTimeInVeryHighRecordsDelta *IntFilter `form:"cgm.timeInVeryHighRecordsDelta,omitempty" json:"cgm.timeInVeryHighRecordsDelta,omitempty"`

	// CgmTimeInAnyHighRecordsDelta Delta of records above 180 mg/dL
	CgmTimeInAnyHighRecordsDelta *IntFilter `form:"cgm.timeInAnyHighRecordsDelta,omitempty" json:"cgm.timeInAnyHighRecordsDelta,omitempty"`

	// CgmAverageDailyRecordsDelta Delta of average records per day
	CgmAverageDailyRecordsDelta *FloatFilter `form:"cgm.averageDailyRecordsDelta,omitempty" json:"cgm.averageDailyRecordsDelta,omitempty"`

	// CgmTotalRecordsDelta Delta of total records
	CgmTotalRecordsDelta *IntFilter `form:"cgm.totalRecordsDelta,omitempty" json:"cgm.totalRecordsDelta,omitempty"`

	// CgmHoursWithDataDelta Delta of total hours with data
	CgmHoursWithDataDelta *IntFilter `form:"cgm.hoursWithDataDelta,omitempty" json:"cgm.hoursWithDataDelta,omitempty"`

	// CgmDaysWithDataDelta Delta of total days with data
	CgmDaysWithDataDelta *IntFilter `form:"cgm.daysWithDataDelta,omitempty" json:"cgm.daysWithDataDelta,omitempty"`

	// CgmStandardDeviationDelta Delta of the standard deviation of glucose values in Mmol/L
	CgmStandardDeviationDelta *FloatFilter `form:"cgm.standardDeviationDelta,omitempty" json:"cgm.standardDeviationDelta,omitempty"`

	// CgmCoefficientOfVariationDelta Delta of the coefficient of glucose values in Mmol/L
	CgmCoefficientOfVariationDelta *FloatFilter `form:"cgm.coefficientOfVariationDelta,omitempty" json:"cgm.coefficientOfVariationDelta,omitempty"`

	// CgmLastDataFrom Inclusive
	CgmLastDataFrom *time.Time `form:"cgm.lastDataFrom,omitempty" json:"cgm.lastDataFrom,omitempty"`

	// CgmLastDataTo Exclusive
	CgmLastDataTo *time.Time `form:"cgm.lastDataTo,omitempty" json:"cgm.lastDataTo,omitempty"`

	// BgmMaxDelta Delta of Max glucose value in Mmol/L
	BgmMaxDelta *FloatFilter `form:"bgm.maxDelta,omitempty" json:"bgm.maxDelta,omitempty"`

	// BgmMinDelta Delta of Min glucose value in Mmol/L
	BgmMinDelta *FloatFilter `form:"bgm.minDelta,omitempty" json:"bgm.minDelta,omitempty"`

	// BgmAverageGlucoseMmolDelta Delta of the average glucose values in Mmol/L
	BgmAverageGlucoseMmolDelta *FloatFilter `form:"bgm.averageGlucoseMmolDelta,omitempty" json:"bgm.averageGlucoseMmolDelta,omitempty"`

	// BgmTimeInVeryLowPercentDelta Delta of time below 54 mg/dL
	BgmTimeInVeryLowPercentDelta *FloatFilter `form:"bgm.timeInVeryLowPercentDelta,omitempty" json:"bgm.timeInVeryLowPercentDelta,omitempty"`

	// BgmTimeInAnyLowPercentDelta Delta of time below 70 mg/dL
	BgmTimeInAnyLowPercentDelta *FloatFilter `form:"bgm.timeInAnyLowPercentDelta,omitempty" json:"bgm.timeInAnyLowPercentDelta,omitempty"`

	// BgmTimeInLowPercentDelta Delta of time in range 54-70 mg/dL
	BgmTimeInLowPercentDelta *FloatFilter `form:"bgm.timeInLowPercentDelta,omitempty" json:"bgm.timeInLowPercentDelta,omitempty"`

	// BgmTimeInTargetPercentDelta Delta of time in range 70-180 mg/dL
	BgmTimeInTargetPercentDelta *FloatFilter `form:"bgm.timeInTargetPercentDelta,omitempty" json:"bgm.timeInTargetPercentDelta,omitempty"`

	// BgmTimeInHighPercentDelta Delta of time in range 180-250 mg/dL
	BgmTimeInHighPercentDelta *FloatFilter `form:"bgm.timeInHighPercentDelta,omitempty" json:"bgm.timeInHighPercentDelta,omitempty"`

	// BgmTimeInVeryHighPercentDelta Delta of time above 250 mg/dL
	BgmTimeInVeryHighPercentDelta *FloatFilter `form:"bgm.timeInVeryHighPercentDelta,omitempty" json:"bgm.timeInVeryHighPercentDelta,omitempty"`

	// BgmTimeInExtremeHighPercentDelta Delta of time above 350 mg/dL
	BgmTimeInExtremeHighPercentDelta *FloatFilter `form:"bgm.timeInExtremeHighPercentDelta,omitempty" json:"bgm.timeInExtremeHighPercentDelta,omitempty"`

	// BgmTimeInAnyHighPercentDelta Delta of time above 180 mg/dL
	BgmTimeInAnyHighPercentDelta *FloatFilter `form:"bgm.timeInAnyHighPercentDelta,omitempty" json:"bgm.timeInAnyHighPercentDelta,omitempty"`

	// BgmTimeInVeryLowRecordsDelta Delta of records below 54 mg/dL
	BgmTimeInVeryLowRecordsDelta *IntFilter `form:"bgm.timeInVeryLowRecordsDelta,omitempty" json:"bgm.timeInVeryLowRecordsDelta,omitempty"`

	// BgmTimeInAnyLowRecordsDelta Delta of records below 70 mg/dL
	BgmTimeInAnyLowRecordsDelta *IntFilter `form:"bgm.timeInAnyLowRecordsDelta,omitempty" json:"bgm.timeInAnyLowRecordsDelta,omitempty"`

	// BgmTimeInLowRecordsDelta Delta of records in range 54-70 mg/dL
	BgmTimeInLowRecordsDelta *IntFilter `form:"bgm.timeInLowRecordsDelta,omitempty" json:"bgm.timeInLowRecordsDelta,omitempty"`

	// BgmTimeInTargetRecordsDelta Delta of records in range 70-180 mg/dL
	BgmTimeInTargetRecordsDelta *IntFilter `form:"bgm.timeInTargetRecordsDelta,omitempty" json:"bgm.timeInTargetRecordsDelta,omitempty"`

	// BgmTimeInHighRecordsDelta Delta of records in range 180-250 mg/dL
	BgmTimeInHighRecordsDelta *IntFilter `form:"bgm.timeInHighRecordsDelta,omitempty" json:"bgm.timeInHighRecordsDelta,omitempty"`

	// BgmTimeInVeryHighRecordsDelta Delta of records above 250 mg/dL
	BgmTimeInVeryHighRecordsDelta *IntFilter `form:"bgm.timeInVeryHighRecordsDelta,omitempty" json:"bgm.timeInVeryHighRecordsDelta,omitempty"`

	// BgmTimeInAnyHighRecordsDelta Delta of records above 180 mg/dL
	BgmTimeInAnyHighRecordsDelta *IntFilter `form:"bgm.timeInAnyHighRecordsDelta,omitempty" json:"bgm.timeInAnyHighRecordsDelta,omitempty"`

	// BgmAverageDailyRecordsDelta Delta of average records per day
	BgmAverageDailyRecordsDelta *IntFilter `form:"bgm.averageDailyRecordsDelta,omitempty" json:"bgm.averageDailyRecordsDelta,omitempty"`

	// BgmTotalRecordsDelta Delta of total record count
	BgmTotalRecordsDelta *IntFilter `form:"bgm.totalRecordsDelta,omitempty" json:"bgm.totalRecordsDelta,omitempty"`

	// BgmLastDataFrom Inclusive
	BgmLastDataFrom *time.Time `form:"bgm.lastDataFrom,omitempty" json:"bgm.lastDataFrom,omitempty"`

	// BgmLastDataTo Exclusive
	BgmLastDataTo *time.Time `form:"bgm.lastDataTo,omitempty" json:"bgm.lastDataTo,omitempty"`

	// Tags Comma-separated list of patient tag IDs
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`
}

// TideReportParams defines parameters for TideReport.
type TideReportParams struct {
	// Period Time Period to display
	Period *string `form:"period,omitempty" json:"period,omitempty"`

	// Tags Comma-separated list of patient tag IDs
	Tags *[]string `form:"tags,omitempty" json:"tags,omitempty"`

	// LastDataCutoff Inclusive
	LastDataCutoff *time.Time `form:"lastDataCutoff,omitempty" json:"lastDataCutoff,omitempty"`
}

// FindPatientsParams defines parameters for FindPatients.
type FindPatientsParams struct {
	Mrn       *string `form:"mrn,omitempty" json:"mrn,omitempty"`
	BirthDate *string `form:"birthDate,omitempty" json:"birthDate,omitempty"`

	// WorkspaceId The identifier of the workspace
	WorkspaceId *string `form:"workspaceId,omitempty" json:"workspaceId,omitempty"`

	// WorkspaceIdType The type of the workspace identifier
	WorkspaceIdType *FindPatientsParamsWorkspaceIdType `form:"workspaceIdType,omitempty" json:"workspaceIdType,omitempty"`
	Offset          *Offset                            `form:"offset,omitempty" json:"offset,omitempty"`
	Limit           *Limit                             `form:"limit,omitempty" json:"limit,omitempty"`
}

// FindPatientsParamsWorkspaceIdType defines parameters for FindPatients.
type FindPatientsParamsWorkspaceIdType string

// ListClinicsForPatientParams defines parameters for ListClinicsForPatient.
type ListClinicsForPatientParams struct {
	Offset *Offset `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *Limit  `form:"limit,omitempty" json:"limit,omitempty"`
}

// ProcessEHRMessageJSONBody defines parameters for ProcessEHRMessage.
type ProcessEHRMessageJSONBody = map[string]interface{}

// ViewPDFReportParams defines parameters for ViewPDFReport.
type ViewPDFReportParams struct {
	ClinicId        string `form:"clinicId" json:"clinicId"`
	PatientId       string `form:"patientId" json:"patientId"`
	RestrictedToken string `form:"restricted_token" json:"restricted_token"`
}

// CreateClinicJSONRequestBody defines body for CreateClinic for application/json ContentType.
type CreateClinicJSONRequestBody = ClinicV1

// UpdateClinicJSONRequestBody defines body for UpdateClinic for application/json ContentType.
type UpdateClinicJSONRequestBody = ClinicV1

// CreateClinicianJSONRequestBody defines body for CreateClinician for application/json ContentType.
type CreateClinicianJSONRequestBody = ClinicianV1

// UpdateClinicianJSONRequestBody defines body for UpdateClinician for application/json ContentType.
type UpdateClinicianJSONRequestBody = ClinicianV1

// AssociateClinicianToUserJSONRequestBody defines body for AssociateClinicianToUser for application/json ContentType.
type AssociateClinicianToUserJSONRequestBody = AssociateClinicianToUserV1

// UpdateMembershipRestrictionsJSONRequestBody defines body for UpdateMembershipRestrictions for application/json ContentType.
type UpdateMembershipRestrictionsJSONRequestBody = MembershipRestrictionsV1

// MergeClinicJSONRequestBody defines body for MergeClinic for application/json ContentType.
type MergeClinicJSONRequestBody = MergeClinicV1

// TriggerInitialMigrationJSONRequestBody defines body for TriggerInitialMigration for application/json ContentType.
type TriggerInitialMigrationJSONRequestBody = TriggerMigrationV1

// MigrateLegacyClinicianPatientsJSONRequestBody defines body for MigrateLegacyClinicianPatients for application/json ContentType.
type MigrateLegacyClinicianPatientsJSONRequestBody = MigrationV1

// UpdateMigrationJSONRequestBody defines body for UpdateMigration for application/json ContentType.
type UpdateMigrationJSONRequestBody = MigrationUpdateV1

// CreatePatientTagJSONRequestBody defines body for CreatePatientTag for application/json ContentType.
type CreatePatientTagJSONRequestBody = PatientTagV1

// UpdatePatientTagJSONRequestBody defines body for UpdatePatientTag for application/json ContentType.
type UpdatePatientTagJSONRequestBody = PatientTagV1

// CreatePatientAccountJSONRequestBody defines body for CreatePatientAccount for application/json ContentType.
type CreatePatientAccountJSONRequestBody = PatientV1

// AssignPatientTagToClinicPatientsJSONRequestBody defines body for AssignPatientTagToClinicPatients for application/json ContentType.
type AssignPatientTagToClinicPatientsJSONRequestBody = TidepoolUserIdsV1

// DeletePatientTagFromClinicPatientsJSONRequestBody defines body for DeletePatientTagFromClinicPatients for application/json ContentType.
type DeletePatientTagFromClinicPatientsJSONRequestBody = TidepoolUserIdsV1

// CreatePatientFromUserJSONRequestBody defines body for CreatePatientFromUser for application/json ContentType.
type CreatePatientFromUserJSONRequestBody = CreatePatientV1

// UpdatePatientJSONRequestBody defines body for UpdatePatient for application/json ContentType.
type UpdatePatientJSONRequestBody = PatientV1

// UpdatePatientPermissionsJSONRequestBody defines body for UpdatePatientPermissions for application/json ContentType.
type UpdatePatientPermissionsJSONRequestBody = PatientPermissionsV1

// GenerateMergeReportJSONRequestBody defines body for GenerateMergeReport for application/json ContentType.
type GenerateMergeReportJSONRequestBody = GenerateMergeReportV1

// AddServiceAccountJSONRequestBody defines body for AddServiceAccount for application/json ContentType.
type AddServiceAccountJSONRequestBody = AddServiceAccountV1

// UpdateEHRSettingsJSONRequestBody defines body for UpdateEHRSettings for application/json ContentType.
type UpdateEHRSettingsJSONRequestBody = EhrSettingsV1

// UpdateMRNSettingsJSONRequestBody defines body for UpdateMRNSettings for application/json ContentType.
type UpdateMRNSettingsJSONRequestBody = MrnSettingsV1

// UpdatePatientCountSettingsJSONRequestBody defines body for UpdatePatientCountSettings for application/json ContentType.
type UpdatePatientCountSettingsJSONRequestBody = PatientCountSettingsV1

// UpdateSuppressedNotificationsJSONRequestBody defines body for UpdateSuppressedNotifications for application/json ContentType.
type UpdateSuppressedNotificationsJSONRequestBody = UpdateSuppressedNotifications

// UpdateTierJSONRequestBody defines body for UpdateTier for application/json ContentType.
type UpdateTierJSONRequestBody = UpdateTier

// UpdatePatientSummaryJSONRequestBody defines body for UpdatePatientSummary for application/json ContentType.
type UpdatePatientSummaryJSONRequestBody = PatientSummaryV1

// UpdatePatientDataSourcesJSONRequestBody defines body for UpdatePatientDataSources for application/json ContentType.
type UpdatePatientDataSourcesJSONRequestBody = DataSourcesV1

// ProcessEHRMessageJSONRequestBody defines body for ProcessEHRMessage for application/json ContentType.
type ProcessEHRMessageJSONRequestBody = ProcessEHRMessageJSONBody

// MatchClinicAndPatientJSONRequestBody defines body for MatchClinicAndPatient for application/json ContentType.
type MatchClinicAndPatientJSONRequestBody = EhrMatchRequestV1

// UpdateClinicUserDetailsJSONRequestBody defines body for UpdateClinicUserDetails for application/json ContentType.
type UpdateClinicUserDetailsJSONRequestBody = UpdateUserDetailsV1
