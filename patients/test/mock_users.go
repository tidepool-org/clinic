// Code generated by MockGen. DO NOT EDIT.
// Source: ./users.go

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	patients "github.com/tidepool-org/clinic/patients"
	shoreline "github.com/tidepool-org/go-common/clients/shoreline"
)

// MockUserService is a mock of UserService interface.
type MockUserService struct {
	ctrl     *gomock.Controller
	recorder *MockUserServiceMockRecorder
}

// MockUserServiceMockRecorder is the mock recorder for MockUserService.
type MockUserServiceMockRecorder struct {
	mock *MockUserService
}

// NewMockUserService creates a new mock instance.
func NewMockUserService(ctrl *gomock.Controller) *MockUserService {
	mock := &MockUserService{ctrl: ctrl}
	mock.recorder = &MockUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserService) EXPECT() *MockUserServiceMockRecorder {
	return m.recorder
}

// CreateCustodialAccount mocks base method.
func (m *MockUserService) CreateCustodialAccount(ctx context.Context, patient patients.Patient) (*shoreline.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCustodialAccount", ctx, patient)
	ret0, _ := ret[0].(*shoreline.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCustodialAccount indicates an expected call of CreateCustodialAccount.
func (mr *MockUserServiceMockRecorder) CreateCustodialAccount(ctx, patient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCustodialAccount", reflect.TypeOf((*MockUserService)(nil).CreateCustodialAccount), ctx, patient)
}

// GetUser mocks base method.
func (m *MockUserService) GetUser(userId string) (*shoreline.UserData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userId)
	ret0, _ := ret[0].(*shoreline.UserData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockUserServiceMockRecorder) GetUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockUserService)(nil).GetUser), userId)
}

// GetUserProfile mocks base method.
func (m *MockUserService) GetUserProfile(ctx context.Context, userId string) (*patients.Profile, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserProfile", ctx, userId)
	ret0, _ := ret[0].(*patients.Profile)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserProfile indicates an expected call of GetUserProfile.
func (mr *MockUserServiceMockRecorder) GetUserProfile(ctx, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserProfile", reflect.TypeOf((*MockUserService)(nil).GetUserProfile), ctx, userId)
}

// PopulatePatientDetailsFromExistingUser mocks base method.
func (m *MockUserService) PopulatePatientDetailsFromExistingUser(ctx context.Context, patient *patients.Patient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PopulatePatientDetailsFromExistingUser", ctx, patient)
	ret0, _ := ret[0].(error)
	return ret0
}

// PopulatePatientDetailsFromExistingUser indicates an expected call of PopulatePatientDetailsFromExistingUser.
func (mr *MockUserServiceMockRecorder) PopulatePatientDetailsFromExistingUser(ctx, patient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PopulatePatientDetailsFromExistingUser", reflect.TypeOf((*MockUserService)(nil).PopulatePatientDetailsFromExistingUser), ctx, patient)
}

// UpdateCustodialAccount mocks base method.
func (m *MockUserService) UpdateCustodialAccount(ctx context.Context, patient patients.Patient) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCustodialAccount", ctx, patient)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCustodialAccount indicates an expected call of UpdateCustodialAccount.
func (mr *MockUserServiceMockRecorder) UpdateCustodialAccount(ctx, patient interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCustodialAccount", reflect.TypeOf((*MockUserService)(nil).UpdateCustodialAccount), ctx, patient)
}
