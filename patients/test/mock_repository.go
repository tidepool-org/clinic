// Code generated by MockGen. DO NOT EDIT.
// Source: ./repo.go
//
// Generated by this command:
//
//	mockgen --build_flags=--mod=mod -source=./repo.go -destination=./test/mock_repository.go -package test -aux_files=github.com/tidepool-org/clinic/patients=patients.go MockRepository
//

// Package test is a generated GoMock package.
package test

import (
	context "context"
	reflect "reflect"

	patients "github.com/tidepool-org/clinic/patients"
	sites "github.com/tidepool-org/clinic/sites"
	store "github.com/tidepool-org/clinic/store"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddProviderConnectionRequest mocks base method.
func (m *MockRepository) AddProviderConnectionRequest(ctx context.Context, clinicId, userId string, request patients.ConnectionRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddProviderConnectionRequest", ctx, clinicId, userId, request)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddProviderConnectionRequest indicates an expected call of AddProviderConnectionRequest.
func (mr *MockRepositoryMockRecorder) AddProviderConnectionRequest(ctx, clinicId, userId, request any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddProviderConnectionRequest", reflect.TypeOf((*MockRepository)(nil).AddProviderConnectionRequest), ctx, clinicId, userId, request)
}

// AddReview mocks base method.
func (m *MockRepository) AddReview(ctx context.Context, clinicId, userId string, review patients.Review) ([]patients.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReview", ctx, clinicId, userId, review)
	ret0, _ := ret[0].([]patients.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddReview indicates an expected call of AddReview.
func (mr *MockRepositoryMockRecorder) AddReview(ctx, clinicId, userId, review any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReview", reflect.TypeOf((*MockRepository)(nil).AddReview), ctx, clinicId, userId, review)
}

// AssignPatientTagToClinicPatients mocks base method.
func (m *MockRepository) AssignPatientTagToClinicPatients(ctx context.Context, clinicId, tagId string, patientIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AssignPatientTagToClinicPatients", ctx, clinicId, tagId, patientIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// AssignPatientTagToClinicPatients indicates an expected call of AssignPatientTagToClinicPatients.
func (mr *MockRepositoryMockRecorder) AssignPatientTagToClinicPatients(ctx, clinicId, tagId, patientIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AssignPatientTagToClinicPatients", reflect.TypeOf((*MockRepository)(nil).AssignPatientTagToClinicPatients), ctx, clinicId, tagId, patientIds)
}

// Count mocks base method.
func (m *MockRepository) Count(ctx context.Context, filter *patients.Filter) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", ctx, filter)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Count indicates an expected call of Count.
func (mr *MockRepositoryMockRecorder) Count(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockRepository)(nil).Count), ctx, filter)
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, patient patients.Patient) (*patients.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, patient)
	ret0, _ := ret[0].(*patients.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, patient any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, patient)
}

// DeleteFromAllClinics mocks base method.
func (m *MockRepository) DeleteFromAllClinics(ctx context.Context, userId string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromAllClinics", ctx, userId)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteFromAllClinics indicates an expected call of DeleteFromAllClinics.
func (mr *MockRepositoryMockRecorder) DeleteFromAllClinics(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromAllClinics", reflect.TypeOf((*MockRepository)(nil).DeleteFromAllClinics), ctx, userId)
}

// DeleteNonCustodialPatientsOfClinic mocks base method.
func (m *MockRepository) DeleteNonCustodialPatientsOfClinic(ctx context.Context, clinicId string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNonCustodialPatientsOfClinic", ctx, clinicId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNonCustodialPatientsOfClinic indicates an expected call of DeleteNonCustodialPatientsOfClinic.
func (mr *MockRepositoryMockRecorder) DeleteNonCustodialPatientsOfClinic(ctx, clinicId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNonCustodialPatientsOfClinic", reflect.TypeOf((*MockRepository)(nil).DeleteNonCustodialPatientsOfClinic), ctx, clinicId)
}

// DeletePatientTagFromClinicPatients mocks base method.
func (m *MockRepository) DeletePatientTagFromClinicPatients(ctx context.Context, clinicId, tagId string, patientIds []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePatientTagFromClinicPatients", ctx, clinicId, tagId, patientIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePatientTagFromClinicPatients indicates an expected call of DeletePatientTagFromClinicPatients.
func (mr *MockRepositoryMockRecorder) DeletePatientTagFromClinicPatients(ctx, clinicId, tagId, patientIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePatientTagFromClinicPatients", reflect.TypeOf((*MockRepository)(nil).DeletePatientTagFromClinicPatients), ctx, clinicId, tagId, patientIds)
}

// DeletePermission mocks base method.
func (m *MockRepository) DeletePermission(ctx context.Context, clinicId, userId, permission string) (*patients.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePermission", ctx, clinicId, userId, permission)
	ret0, _ := ret[0].(*patients.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeletePermission indicates an expected call of DeletePermission.
func (mr *MockRepositoryMockRecorder) DeletePermission(ctx, clinicId, userId, permission any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePermission", reflect.TypeOf((*MockRepository)(nil).DeletePermission), ctx, clinicId, userId, permission)
}

// DeleteReview mocks base method.
func (m *MockRepository) DeleteReview(ctx context.Context, clinicId, clinicianId, userId string) ([]patients.Review, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReview", ctx, clinicId, clinicianId, userId)
	ret0, _ := ret[0].([]patients.Review)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReview indicates an expected call of DeleteReview.
func (mr *MockRepositoryMockRecorder) DeleteReview(ctx, clinicId, clinicianId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReview", reflect.TypeOf((*MockRepository)(nil).DeleteReview), ctx, clinicId, clinicianId, userId)
}

// DeleteSites mocks base method.
func (m *MockRepository) DeleteSites(ctx context.Context, clinicId, siteId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSites", ctx, clinicId, siteId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSites indicates an expected call of DeleteSites.
func (mr *MockRepositoryMockRecorder) DeleteSites(ctx, clinicId, siteId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSites", reflect.TypeOf((*MockRepository)(nil).DeleteSites), ctx, clinicId, siteId)
}

// DeleteSummaryInAllClinics mocks base method.
func (m *MockRepository) DeleteSummaryInAllClinics(ctx context.Context, summaryId string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSummaryInAllClinics", ctx, summaryId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSummaryInAllClinics indicates an expected call of DeleteSummaryInAllClinics.
func (mr *MockRepositoryMockRecorder) DeleteSummaryInAllClinics(ctx, summaryId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSummaryInAllClinics", reflect.TypeOf((*MockRepository)(nil).DeleteSummaryInAllClinics), ctx, summaryId)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, clinicId, userId string) (*patients.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, clinicId, userId)
	ret0, _ := ret[0].(*patients.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, clinicId, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, clinicId, userId)
}

// List mocks base method.
func (m *MockRepository) List(ctx context.Context, filter *patients.Filter, pagination store.Pagination, sort []*store.Sort) (*patients.ListResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, filter, pagination, sort)
	ret0, _ := ret[0].(*patients.ListResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(ctx, filter, pagination, sort any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx, filter, pagination, sort)
}

// Remove mocks base method.
func (m *MockRepository) Remove(ctx context.Context, clinicId, userId string, deletedByUserId *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, clinicId, userId, deletedByUserId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockRepositoryMockRecorder) Remove(ctx, clinicId, userId, deletedByUserId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockRepository)(nil).Remove), ctx, clinicId, userId, deletedByUserId)
}

// RescheduleLastSubscriptionOrderForAllPatients mocks base method.
func (m *MockRepository) RescheduleLastSubscriptionOrderForAllPatients(ctx context.Context, clinicId, subscription, ordersCollection, targetCollection string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleLastSubscriptionOrderForAllPatients", ctx, clinicId, subscription, ordersCollection, targetCollection)
	ret0, _ := ret[0].(error)
	return ret0
}

// RescheduleLastSubscriptionOrderForAllPatients indicates an expected call of RescheduleLastSubscriptionOrderForAllPatients.
func (mr *MockRepositoryMockRecorder) RescheduleLastSubscriptionOrderForAllPatients(ctx, clinicId, subscription, ordersCollection, targetCollection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleLastSubscriptionOrderForAllPatients", reflect.TypeOf((*MockRepository)(nil).RescheduleLastSubscriptionOrderForAllPatients), ctx, clinicId, subscription, ordersCollection, targetCollection)
}

// RescheduleLastSubscriptionOrderForPatient mocks base method.
func (m *MockRepository) RescheduleLastSubscriptionOrderForPatient(ctx context.Context, clinicIds []string, userId, subscription, ordersCollection, targetCollection string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RescheduleLastSubscriptionOrderForPatient", ctx, clinicIds, userId, subscription, ordersCollection, targetCollection)
	ret0, _ := ret[0].(error)
	return ret0
}

// RescheduleLastSubscriptionOrderForPatient indicates an expected call of RescheduleLastSubscriptionOrderForPatient.
func (mr *MockRepositoryMockRecorder) RescheduleLastSubscriptionOrderForPatient(ctx, clinicIds, userId, subscription, ordersCollection, targetCollection any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RescheduleLastSubscriptionOrderForPatient", reflect.TypeOf((*MockRepository)(nil).RescheduleLastSubscriptionOrderForPatient), ctx, clinicIds, userId, subscription, ordersCollection, targetCollection)
}

// TideReport mocks base method.
func (m *MockRepository) TideReport(ctx context.Context, clinicId string, params patients.TideReportParams) (*patients.Tide, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TideReport", ctx, clinicId, params)
	ret0, _ := ret[0].(*patients.Tide)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TideReport indicates an expected call of TideReport.
func (mr *MockRepositoryMockRecorder) TideReport(ctx, clinicId, params any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TideReport", reflect.TypeOf((*MockRepository)(nil).TideReport), ctx, clinicId, params)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, update patients.PatientUpdate) (*patients.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, update)
	ret0, _ := ret[0].(*patients.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, update)
}

// UpdateEHRSubscription mocks base method.
func (m *MockRepository) UpdateEHRSubscription(ctx context.Context, clinicId, userId string, update patients.SubscriptionUpdate) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEHRSubscription", ctx, clinicId, userId, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEHRSubscription indicates an expected call of UpdateEHRSubscription.
func (mr *MockRepositoryMockRecorder) UpdateEHRSubscription(ctx, clinicId, userId, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEHRSubscription", reflect.TypeOf((*MockRepository)(nil).UpdateEHRSubscription), ctx, clinicId, userId, update)
}

// UpdateEmail mocks base method.
func (m *MockRepository) UpdateEmail(ctx context.Context, userId string, email *string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEmail", ctx, userId, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEmail indicates an expected call of UpdateEmail.
func (mr *MockRepositoryMockRecorder) UpdateEmail(ctx, userId, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEmail", reflect.TypeOf((*MockRepository)(nil).UpdateEmail), ctx, userId, email)
}

// UpdateLastUploadReminderTime mocks base method.
func (m *MockRepository) UpdateLastUploadReminderTime(ctx context.Context, update *patients.UploadReminderUpdate) (*patients.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLastUploadReminderTime", ctx, update)
	ret0, _ := ret[0].(*patients.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLastUploadReminderTime indicates an expected call of UpdateLastUploadReminderTime.
func (mr *MockRepositoryMockRecorder) UpdateLastUploadReminderTime(ctx, update any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLastUploadReminderTime", reflect.TypeOf((*MockRepository)(nil).UpdateLastUploadReminderTime), ctx, update)
}

// UpdatePatientDataSources mocks base method.
func (m *MockRepository) UpdatePatientDataSources(ctx context.Context, userId string, dataSources *patients.DataSources) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePatientDataSources", ctx, userId, dataSources)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePatientDataSources indicates an expected call of UpdatePatientDataSources.
func (mr *MockRepositoryMockRecorder) UpdatePatientDataSources(ctx, userId, dataSources any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePatientDataSources", reflect.TypeOf((*MockRepository)(nil).UpdatePatientDataSources), ctx, userId, dataSources)
}

// UpdatePermissions mocks base method.
func (m *MockRepository) UpdatePermissions(ctx context.Context, clinicId, userId string, permissions *patients.Permissions) (*patients.Patient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePermissions", ctx, clinicId, userId, permissions)
	ret0, _ := ret[0].(*patients.Patient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePermissions indicates an expected call of UpdatePermissions.
func (mr *MockRepositoryMockRecorder) UpdatePermissions(ctx, clinicId, userId, permissions any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePermissions", reflect.TypeOf((*MockRepository)(nil).UpdatePermissions), ctx, clinicId, userId, permissions)
}

// UpdateSites mocks base method.
func (m *MockRepository) UpdateSites(ctx context.Context, clinicId, siteId string, site *sites.Site) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSites", ctx, clinicId, siteId, site)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSites indicates an expected call of UpdateSites.
func (mr *MockRepositoryMockRecorder) UpdateSites(ctx, clinicId, siteId, site any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSites", reflect.TypeOf((*MockRepository)(nil).UpdateSites), ctx, clinicId, siteId, site)
}

// UpdateSummaryInAllClinics mocks base method.
func (m *MockRepository) UpdateSummaryInAllClinics(ctx context.Context, userId string, summary *patients.Summary) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSummaryInAllClinics", ctx, userId, summary)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSummaryInAllClinics indicates an expected call of UpdateSummaryInAllClinics.
func (mr *MockRepositoryMockRecorder) UpdateSummaryInAllClinics(ctx, userId, summary any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSummaryInAllClinics", reflect.TypeOf((*MockRepository)(nil).UpdateSummaryInAllClinics), ctx, userId, summary)
}
